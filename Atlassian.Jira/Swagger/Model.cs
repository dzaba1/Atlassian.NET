//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8600 // Disable "CS8600 Converting null literal or possible null value to non-nullable type"
#pragma warning disable 8602 // Disable "CS8602 Dereference of a possibly null reference"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace Atlassian.Jira.Swagger
{
    using System = global::System;



    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ActorInputBean
    {

        /// <summary>
        /// The name of the group to add as a default actor. This parameter cannot be used with the `groupId` parameter. As a group's name can change,use of `groupId` is recommended. This parameter accepts a comma-separated list. For example, `"group":["project-admin", "jira-developers"]`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Group { get; set; }

        /// <summary>
        /// The ID of the group to add as a default actor. This parameter cannot be used with the `group` parameter This parameter accepts a comma-separated list. For example, `"groupId":["77f6ab39-e755-4570-a6ae-2d7a8df0bcb8", "0c011f85-69ed-49c4-a801-3b18d0f771bc"]`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> GroupId { get; set; }

        /// <summary>
        /// The account IDs of the users to add as default actors. This parameter accepts a comma-separated list. For example, `"user":["5b10a2844c20165700ede21g", "5b109f2e9729b51b54dc274d"]`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> User { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ActorsMap
    {

        /// <summary>
        /// The name of the group to add. This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Group { get; set; }

        /// <summary>
        /// The ID of the group to add. This parameter cannot be used with the `group` parameter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> GroupId { get; set; }

        /// <summary>
        /// The user account ID of the user to add.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> User { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AddAtlassianTeamRequest
    {

        /// <summary>
        /// The capacity for the Atlassian team.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("capacity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Capacity { get; set; }

        /// <summary>
        /// The Atlassian team ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The ID of the issue source for the Atlassian team.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueSourceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssueSourceId { get; set; }

        /// <summary>
        /// The planning style for the Atlassian team. This must be "Scrum" or "Kanban".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("planningStyle", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AddAtlassianTeamRequestPlanningStyle PlanningStyle { get; set; }

        /// <summary>
        /// The sprint length for the Atlassian team.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sprintLength", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long SprintLength { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AddFieldBean
    {

        /// <summary>
        /// The ID of the field to add.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Always)]
        public string FieldId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AddGroupBean
    {

        /// <summary>
        /// The name of the group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details of notifications which should be added to the notification scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AddNotificationsDetails
    {

        /// <summary>
        /// The list of notifications which should be added to the notification scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationSchemeEvents", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<NotificationSchemeEventDetails> NotificationSchemeEvents { get; set; } = new System.Collections.ObjectModel.Collection<NotificationSchemeEventDetails>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AddSecuritySchemeLevelsRequestBean
    {

        /// <summary>
        /// The list of scheme levels which should be added to the security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("levels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SecuritySchemeLevelBean> Levels { get; set; }

    }

    /// <summary>
    /// Announcement banner configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AnnouncementBannerConfiguration
    {

        /// <summary>
        /// Hash of the banner data. The client detects updates by comparing hash IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hashId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HashId { get; set; }

        /// <summary>
        /// Flag indicating if the announcement banner can be dismissed by the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDismissible", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDismissible { get; set; }

        /// <summary>
        /// Flag indicating if the announcement banner is enabled or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsEnabled { get; set; }

        /// <summary>
        /// The text on the announcement banner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// Visibility of the announcement banner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visibility", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AnnouncementBannerConfigurationVisibility Visibility { get; set; }

    }

    /// <summary>
    /// Configuration of the announcement banner.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AnnouncementBannerConfigurationUpdate
    {

        /// <summary>
        /// Flag indicating if the announcement banner can be dismissed by the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDismissible", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDismissible { get; set; }

        /// <summary>
        /// Flag indicating if the announcement banner is enabled or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsEnabled { get; set; }

        /// <summary>
        /// The text on the announcement banner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// Visibility of the announcement banner. Can be public or private.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visibility", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Visibility { get; set; }

    }

    /// <summary>
    /// A workflow transition rule.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AppWorkflowTransitionRule
    {

        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.Always)]
        public RuleConfiguration Configuration { get; set; } = new RuleConfiguration();

        /// <summary>
        /// The ID of the transition rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The key of the rule, as defined in the Connect or the Forge app descriptor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("transition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowTransition Transition { get; set; }

    }

    /// <summary>
    /// The application the linked item is in.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Application
    {

        /// <summary>
        /// The name of the application. Used in conjunction with the (remote) object icon title to display a tooltip for the link's icon. The tooltip takes the format "\[application name\] icon title". Blank items are excluded from the tooltip title. If both items are blank, the icon tooltop displays as "Web Link". Grouping and sorting of links may place links without an application name last.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The name-spaced type of the application, used by registered rendering apps.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details of an application property.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ApplicationProperty
    {

        /// <summary>
        /// The allowed values, if applicable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowedValues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AllowedValues { get; set; }

        /// <summary>
        /// The default value of the application property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultValue { get; set; }

        /// <summary>
        /// The description of the application property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("desc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Desc { get; set; }

        [Newtonsoft.Json.JsonProperty("example", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Example { get; set; }

        /// <summary>
        /// The ID of the application property. The ID and key are the same.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The key of the application property. The ID and key are the same.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The name of the application property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The data type of the application property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// The new value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    /// <summary>
    /// Details of an application role.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ApplicationRole
    {

        /// <summary>
        /// The groups that are granted default access for this application role. As a group's name can change, use of `defaultGroupsDetails` is recommended to identify a groups.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultGroups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DefaultGroups { get; set; }

        /// <summary>
        /// The groups that are granted default access for this application role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultGroupsDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GroupName> DefaultGroupsDetails { get; set; }

        /// <summary>
        /// Deprecated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defined", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Defined { get; set; }

        /// <summary>
        /// The groups associated with the application role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GroupName> GroupDetails { get; set; }

        /// <summary>
        /// The groups associated with the application role. As a group's name can change, use of `groupDetails` is recommended to identify a groups.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Groups { get; set; }

        [Newtonsoft.Json.JsonProperty("hasUnlimitedSeats", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasUnlimitedSeats { get; set; }

        /// <summary>
        /// The key of the application role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The display name of the application role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The maximum count of users on your license.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfSeats", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NumberOfSeats { get; set; }

        /// <summary>
        /// Indicates if the application role belongs to Jira platform (`jira-core`).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("platform", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Platform { get; set; }

        /// <summary>
        /// The count of users remaining on your license.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remainingSeats", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RemainingSeats { get; set; }

        /// <summary>
        /// Determines whether this application role should be selected by default on user creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("selectedByDefault", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SelectedByDefault { get; set; }

        /// <summary>
        /// The number of users counting against your license.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int UserCount { get; set; }

        /// <summary>
        /// The [type of users](https://confluence.atlassian.com/x/lRW3Ng) being counted against your license.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userCountDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserCountDescription { get; set; }

    }

    /// <summary>
    /// The approval configuration of a status within a workflow. Applies only to Jira Service Management approvals.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ApprovalConfiguration
    {

        /// <summary>
        /// Whether the approval configuration is active.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApprovalConfigurationActive Active { get; set; }

        /// <summary>
        /// How the required approval count is calculated. It may be configured to require a specific number of approvals, or approval by a percentage of approvers. If the approvers source field is Approver groups, you can configure how many approvals per group are required for the request to be approved. The number will be the same across all groups.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditionType", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApprovalConfigurationConditionType ConditionType { get; set; }

        /// <summary>
        /// The number or percentage of approvals required for a request to be approved. If `conditionType` is `number`, the value must be 20 or less. If `conditionType` is `percent`, the value must be 100 or less.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditionValue", Required = Newtonsoft.Json.Required.Always)]
        public string ConditionValue { get; set; }

        /// <summary>
        /// A list of roles that should be excluded as possible approvers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exclude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Exclude?> Exclude { get; set; }

        /// <summary>
        /// The custom field ID of the "Approvers" or "Approver Groups" field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Always)]
        public string FieldId { get; set; }

        /// <summary>
        /// The custom field ID of the field used to pre-populate the Approver field. Only supports the "Affected Services" field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prePopulatedFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrePopulatedFieldId { get; set; }

        /// <summary>
        /// The numeric ID of the transition to be executed if the request is approved.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transitionApproved", Required = Newtonsoft.Json.Required.Always)]
        public string TransitionApproved { get; set; }

        /// <summary>
        /// The numeric ID of the transition to be executed if the request is declined.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transitionRejected", Required = Newtonsoft.Json.Required.Always)]
        public string TransitionRejected { get; set; }

    }

    /// <summary>
    /// Approval configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ApprovalConfigurationPreview
    {

        /// <summary>
        /// The active approval configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Active { get; set; }

        /// <summary>
        /// The transition ID for approved state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transitionApproved", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransitionApproved { get; set; }

        /// <summary>
        /// The transition ID for rejected state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transitionRejected", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransitionRejected { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ArchiveIssueAsyncRequest
    {

        [Newtonsoft.Json.JsonProperty("jql", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Jql { get; set; }

    }

    /// <summary>
    /// Details of a filter for exporting archived issues.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ArchivedIssuesFilterRequest
    {

        /// <summary>
        /// List archived issues archived by a specified account ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("archivedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ArchivedBy { get; set; }

        [Newtonsoft.Json.JsonProperty("archivedDateRange", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRangeFilterRequest ArchivedDateRange { get; set; }

        /// <summary>
        /// List archived issues with a specified issue type ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> IssueTypes { get; set; }

        /// <summary>
        /// List archived issues with a specified project key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Projects { get; set; }

        /// <summary>
        /// List archived issues where the reporter is a specified account ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reporters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Reporters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details of a field configuration to issue type mappings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AssociateFieldConfigurationsWithIssueTypesRequest
    {

        /// <summary>
        /// Field configuration to issue type mappings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mappings", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<FieldConfigurationToIssueTypeMapping> Mappings { get; set; } = new System.Collections.ObjectModel.Collection<FieldConfigurationToIssueTypeMapping>();

    }

    /// <summary>
    /// Issue security scheme, project, and remapping details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AssociateSecuritySchemeWithProjectDetails
    {

        /// <summary>
        /// The list of scheme levels which should be remapped to new levels of the issue security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oldToNewSecurityLevelMappings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OldToNewSecurityLevelMappingsBean> OldToNewSecurityLevelMappings { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.Always)]
        public string ProjectId { get; set; }

        /// <summary>
        /// The ID of the issue security scheme. Providing null will clear the association with the issue security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemeId", Required = Newtonsoft.Json.Required.Always)]
        public string SchemeId { get; set; }

    }

    /// <summary>
    /// Details of an item associated with the changed record.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AssociatedItemBean
    {

        /// <summary>
        /// The ID of the associated record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the associated record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The ID of the associated parent record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parentId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentId { get; set; }

        /// <summary>
        /// The name of the associated parent record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parentName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentName { get; set; }

        /// <summary>
        /// The type of the associated record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("typeName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeName { get; set; }

    }

    /// <summary>
    /// Field association for example PROJECT\_ID.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "type")]
    [JsonInheritanceAttribute("ProjectIdAssociationContext", typeof(ProjectIdAssociationContext))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AssociationContextObject
    {

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Identifier { get; set; }

    }

    /// <summary>
    /// Details about an attachment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Attachment
    {

        /// <summary>
        /// Details of the user who added the attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDetails Author { get; set; }

        /// <summary>
        /// The content of the attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }

        /// <summary>
        /// The datetime the attachment was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        /// <summary>
        /// The file name of the attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filename", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Filename { get; set; }

        /// <summary>
        /// The ID of the attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The MIME type of the attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mimeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MimeType { get; set; }

        /// <summary>
        /// The URL of the attachment details response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        /// <summary>
        /// The size of the attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Size { get; set; }

        /// <summary>
        /// The URL of a thumbnail representing the attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("thumbnail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Thumbnail { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AttachmentArchive
    {

        [Newtonsoft.Json.JsonProperty("entries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AttachmentArchiveEntry> Entries { get; set; }

        [Newtonsoft.Json.JsonProperty("moreAvailable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool MoreAvailable { get; set; }

        [Newtonsoft.Json.JsonProperty("totalEntryCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalEntryCount { get; set; }

        [Newtonsoft.Json.JsonProperty("totalNumberOfEntriesAvailable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalNumberOfEntriesAvailable { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AttachmentArchiveEntry
    {

        [Newtonsoft.Json.JsonProperty("abbreviatedName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AbbreviatedName { get; set; }

        [Newtonsoft.Json.JsonProperty("entryIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long EntryIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("mediaType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MediaType { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Size { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AttachmentArchiveImpl
    {

        /// <summary>
        /// The list of the items included in the archive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AttachmentArchiveEntry> Entries { get; set; }

        /// <summary>
        /// The number of items in the archive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalEntryCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalEntryCount { get; set; }

    }

    /// <summary>
    /// Metadata for an item in an attachment archive.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AttachmentArchiveItemReadable
    {

        /// <summary>
        /// The position of the item within the archive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Index { get; set; }

        /// <summary>
        /// The label for the archive item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>
        /// The MIME type of the archive item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mediaType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MediaType { get; set; }

        /// <summary>
        /// The path of the archive item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        /// <summary>
        /// The size of the archive item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Size { get; set; }

    }

    /// <summary>
    /// Metadata for an archive (for example a zip) and its contents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AttachmentArchiveMetadataReadable
    {

        /// <summary>
        /// The list of the items included in the archive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AttachmentArchiveItemReadable> Entries { get; set; }

        /// <summary>
        /// The ID of the attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The MIME type of the attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mediaType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MediaType { get; set; }

        /// <summary>
        /// The name of the archive file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The number of items included in the archive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalEntryCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long TotalEntryCount { get; set; }

    }

    /// <summary>
    /// Metadata for an issue attachment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AttachmentMetadata
    {

        /// <summary>
        /// Details of the user who attached the file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User Author { get; set; }

        /// <summary>
        /// The URL of the attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }

        /// <summary>
        /// The datetime the attachment was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        /// <summary>
        /// The name of the attachment file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filename", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Filename { get; set; }

        /// <summary>
        /// The ID of the attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The MIME type of the attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mimeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MimeType { get; set; }

        /// <summary>
        /// Additional properties of the attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }

        /// <summary>
        /// The URL of the attachment metadata details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The size of the attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Size { get; set; }

        /// <summary>
        /// The URL of a thumbnail representing the attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("thumbnail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Thumbnail { get; set; }

    }

    /// <summary>
    /// Details of the instance's attachment settings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AttachmentSettings
    {

        /// <summary>
        /// Whether the ability to add attachments is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Enabled { get; set; }

        /// <summary>
        /// The maximum size of attachments permitted, in bytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uploadLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long UploadLimit { get; set; }

    }

    /// <summary>
    /// An audit record.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AuditRecordBean
    {

        /// <summary>
        /// The list of items associated with the changed record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("associatedItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AssociatedItemBean> AssociatedItems { get; set; }

        /// <summary>
        /// Deprecated, use `authorAccountId` instead. The key of the user who created the audit record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AuthorKey { get; set; }

        /// <summary>
        /// The category of the audit record. For a list of these categories, see the help article [Auditing in Jira applications](https://confluence.atlassian.com/x/noXKM).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }

        /// <summary>
        /// The list of values changed in the record event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changedValues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChangedValueBean> ChangedValues { get; set; }

        /// <summary>
        /// The date and time on which the audit record was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        /// <summary>
        /// The description of the audit record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The event the audit record originated from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eventSource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EventSource { get; set; }

        /// <summary>
        /// The ID of the audit record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("objectItem", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AssociatedItemBean ObjectItem { get; set; }

        /// <summary>
        /// The URL of the computer where the creation of the audit record was initiated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remoteAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RemoteAddress { get; set; }

        /// <summary>
        /// The summary of the audit record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Summary { get; set; }

    }

    /// <summary>
    /// Container for a list of audit records.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AuditRecords
    {

        /// <summary>
        /// The requested or default limit on the number of audit items to be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Limit { get; set; }

        /// <summary>
        /// The number of audit items skipped before the first item in this list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Offset { get; set; }

        /// <summary>
        /// The list of audit items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("records", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AuditRecordBean> Records { get; set; }

        /// <summary>
        /// The total number of audit items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

    }

    /// <summary>
    /// A field auto-complete suggestion.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AutoCompleteSuggestion
    {

        /// <summary>
        /// The display name of a suggested item. If `fieldValue` or `predicateValue` are provided, the matching text is highlighted with the HTML bold tag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The value of a suggested item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    /// <summary>
    /// The results from a JQL query.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AutoCompleteSuggestions
    {

        /// <summary>
        /// The list of suggested item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AutoCompleteSuggestion> Results { get; set; }

    }

    /// <summary>
    /// The details of the available dashboard gadget.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AvailableDashboardGadget
    {

        /// <summary>
        /// The module key of the gadget type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moduleKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModuleKey { get; set; }

        /// <summary>
        /// The title of the gadget.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        public string Title { get; set; }

        /// <summary>
        /// The URI of the gadget type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

    }

    /// <summary>
    /// The list of available gadgets.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AvailableDashboardGadgetsResponse
    {

        /// <summary>
        /// The list of available gadgets.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gadgets", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<AvailableDashboardGadget> Gadgets { get; set; } = new System.Collections.ObjectModel.Collection<AvailableDashboardGadget>();

    }

    /// <summary>
    /// The Connect provided ecosystem rules available.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AvailableWorkflowConnectRule
    {

        /// <summary>
        /// The add-on providing the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addonKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddonKey { get; set; }

        /// <summary>
        /// The URL creation path segment defined in the Connect module.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreateUrl { get; set; }

        /// <summary>
        /// The rule description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The URL edit path segment defined in the Connect module.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("editUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EditUrl { get; set; }

        /// <summary>
        /// The module providing the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moduleKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModuleKey { get; set; }

        /// <summary>
        /// The rule name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The rule key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RuleKey { get; set; }

        /// <summary>
        /// The rule type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AvailableWorkflowConnectRuleRuleType RuleType { get; set; }

        /// <summary>
        /// The URL view path segment defined in the Connect module.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("viewUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ViewUrl { get; set; }

    }

    /// <summary>
    /// The Forge provided ecosystem rules available.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AvailableWorkflowForgeRule
    {

        /// <summary>
        /// The rule description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The unique ARI of the forge rule type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The rule name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The rule key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RuleKey { get; set; }

        /// <summary>
        /// The rule type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AvailableWorkflowForgeRuleRuleType RuleType { get; set; }

    }

    /// <summary>
    /// The Atlassian provided system rules available.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AvailableWorkflowSystemRule
    {

        /// <summary>
        /// The rule description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        public string Description { get; set; }

        /// <summary>
        /// List of rules that conflict with this one.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incompatibleRuleKeys", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> IncompatibleRuleKeys { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// Whether the rule can be added added to an initial transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAvailableForInitialTransition", Required = Newtonsoft.Json.Required.Always)]
        public bool IsAvailableForInitialTransition { get; set; }

        /// <summary>
        /// Whether the rule is visible.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isVisible", Required = Newtonsoft.Json.Required.Always)]
        public bool IsVisible { get; set; }

        /// <summary>
        /// The rule name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// The rule key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleKey", Required = Newtonsoft.Json.Required.Always)]
        public string RuleKey { get; set; }

        /// <summary>
        /// The rule type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleType", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AvailableWorkflowSystemRuleRuleType RuleType { get; set; }

    }

    /// <summary>
    /// The list of available trigger types.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AvailableWorkflowTriggerTypes
    {

        /// <summary>
        /// The description of the trigger rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the trigger rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The type identifier of trigger rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// The trigger rules available.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AvailableWorkflowTriggers
    {

        /// <summary>
        /// The list of available trigger types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("availableTypes", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<AvailableWorkflowTriggerTypes> AvailableTypes { get; set; } = new System.Collections.ObjectModel.Collection<AvailableWorkflowTriggerTypes>();

        /// <summary>
        /// The rule key of the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleKey", Required = Newtonsoft.Json.Required.Always)]
        public string RuleKey { get; set; }

    }

    /// <summary>
    /// Details of an avatar.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Avatar
    {

        /// <summary>
        /// The file name of the avatar icon. Returned for system avatars.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }

        /// <summary>
        /// The ID of the avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// Whether the avatar can be deleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDeletable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDeletable { get; set; }

        /// <summary>
        /// Whether the avatar is used in Jira. For example, shown as a project's avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSelected", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSelected { get; set; }

        /// <summary>
        /// Whether the avatar is a system avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSystemAvatar", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSystemAvatar { get; set; }

        /// <summary>
        /// The owner of the avatar. For a system avatar the owner is null (and nothing is returned). For non-system avatars this is the appropriate identifier, such as the ID for a project or the account ID for a user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// The list of avatar icon URLs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("urls", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Uri> Urls { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AvatarUrlsBean
    {

        /// <summary>
        /// The URL of the item's 16x16 pixel avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("16x16", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri _16x16 { get; set; }

        /// <summary>
        /// The URL of the item's 24x24 pixel avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("24x24", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri _24x24 { get; set; }

        /// <summary>
        /// The URL of the item's 32x32 pixel avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("32x32", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri _32x32 { get; set; }

        /// <summary>
        /// The URL of the item's 48x48 pixel avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("48x48", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri _48x48 { get; set; }

    }

    /// <summary>
    /// Details about system and custom avatars.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Avatars
    {

        /// <summary>
        /// Custom avatars list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("custom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Avatar> Custom { get; set; }

        /// <summary>
        /// System avatars list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("system", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Avatar> System { get; set; }

    }

    /// <summary>
    /// The payload for creating a board column
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class BoardColumnPayload
    {

        /// <summary>
        /// The maximum issue constraint for the column
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maximumIssueConstraint", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long MaximumIssueConstraint { get; set; }

        /// <summary>
        /// The minimum issue constraint for the column
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimumIssueConstraint", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long MinimumIssueConstraint { get; set; }

        /// <summary>
        /// The name of the column
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The status IDs for the column
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectCreateResourceIdentifier> StatusIds { get; set; }

    }

    /// <summary>
    /// The payload for setting a board feature
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class BoardFeaturePayload
    {

        /// <summary>
        /// The key of the feature
        /// </summary>
        [Newtonsoft.Json.JsonProperty("featureKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BoardFeaturePayloadFeatureKey FeatureKey { get; set; }

        /// <summary>
        /// Whether the feature should be turned on or off
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool State { get; set; }

    }

    /// <summary>
    /// The payload for creating a board
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class BoardPayload
    {

        /// <summary>
        /// Takes in a JQL string to create a new filter. If no value is provided, it'll default to a JQL filter for the project creating
        /// </summary>
        [Newtonsoft.Json.JsonProperty("boardFilterJQL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BoardFilterJQL { get; set; }

        /// <summary>
        /// Card color settings of the board
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cardColorStrategy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BoardPayloadCardColorStrategy CardColorStrategy { get; set; }

        [Newtonsoft.Json.JsonProperty("cardLayout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CardLayout CardLayout { get; set; }

        /// <summary>
        /// Card layout settings of the board
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cardLayouts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CardLayoutField> CardLayouts { get; set; }

        /// <summary>
        /// The columns of the board
        /// </summary>
        [Newtonsoft.Json.JsonProperty("columns", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BoardColumnPayload> Columns { get; set; }

        /// <summary>
        /// Feature settings for the board
        /// </summary>
        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BoardFeaturePayload> Features { get; set; }

        /// <summary>
        /// The name of the board
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("pcri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier Pcri { get; set; }

        /// <summary>
        /// The quick filters for the board.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quickFilters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QuickFilterPayload> QuickFilters { get; set; }

        /// <summary>
        /// Whether sprints are supported on the board
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportsSprint", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SupportsSprint { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("swimlanes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SwimlanesPayload Swimlanes { get; set; }

        [Newtonsoft.Json.JsonProperty("workingDaysConfig", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkingDaysConfig WorkingDaysConfig { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class BoardsPayload
    {

        /// <summary>
        /// The boards to be associated with the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("boards", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BoardPayload> Boards { get; set; }

    }

    /// <summary>
    /// Details for changing owners of shareable entities
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class BulkChangeOwnerDetails
    {

        /// <summary>
        /// Whether the name is fixed automatically if it's duplicated after changing owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autofixName", Required = Newtonsoft.Json.Required.Always)]
        public bool AutofixName { get; set; }

        /// <summary>
        /// The account id of the new owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newOwner", Required = Newtonsoft.Json.Required.Always)]
        public string NewOwner { get; set; }

    }

    /// <summary>
    /// Request bean for bulk changelog retrieval
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class BulkChangelogRequestBean
    {

        /// <summary>
        /// List of field IDs to filter changelogs
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> FieldIds { get; set; }

        /// <summary>
        /// List of issue IDs/keys to fetch changelogs for
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueIdsOrKeys", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> IssueIdsOrKeys { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The maximum number of items to return per page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; } = 1000;

        /// <summary>
        /// The cursor for pagination
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPageToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageToken { get; set; }

    }

    /// <summary>
    /// A page of changelogs which is designed to handle multiple issues
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class BulkChangelogResponseBean
    {

        /// <summary>
        /// The list of issues changelogs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueChangeLogs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueChangeLog> IssueChangeLogs { get; set; }

        /// <summary>
        /// Continuation token to fetch the next page. If this result represents the last or the only page, this token will be null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPageToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageToken { get; set; }

    }

    /// <summary>
    /// Details of the contextual configuration for a custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class BulkContextualConfiguration
    {

        /// <summary>
        /// The field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Configuration { get; set; }

        /// <summary>
        /// The ID of the custom field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customFieldId", Required = Newtonsoft.Json.Required.Always)]
        public string CustomFieldId { get; set; }

        /// <summary>
        /// The ID of the field context the configuration is associated with.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldContextId", Required = Newtonsoft.Json.Required.Always)]
        public string FieldContextId { get; set; }

        /// <summary>
        /// The ID of the configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The field value schema.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Schema { get; set; }

    }

    /// <summary>
    /// Details of the options to create for a custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class BulkCustomFieldOptionCreateRequest
    {

        /// <summary>
        /// Details of options to create.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomFieldOptionCreate> Options { get; set; }

    }

    /// <summary>
    /// Details of the options to update for a custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class BulkCustomFieldOptionUpdateRequest
    {

        /// <summary>
        /// Details of the options to update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomFieldOptionUpdate> Options { get; set; }

    }

    /// <summary>
    /// Errors of bulk edit action.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class BulkEditActionError
    {

        /// <summary>
        /// The error messages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessages", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> ErrorMessages { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.IDictionary<string, string> Errors { get; set; } = new System.Collections.Generic.Dictionary<string, string>();

    }

    /// <summary>
    /// Details of a request to bulk edit shareable entity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class BulkEditShareableEntityRequest
    {

        /// <summary>
        /// Allowed action for bulk edit shareable entity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BulkEditShareableEntityRequestAction Action { get; set; }

        /// <summary>
        /// The details of change owner action.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changeOwnerDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BulkChangeOwnerDetails ChangeOwnerDetails { get; set; }

        /// <summary>
        /// The id list of shareable entities to be changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<long> EntityIds { get; set; } = new System.Collections.ObjectModel.Collection<long>();

        /// <summary>
        /// Whether the actions are executed by users with Administer Jira global permission.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extendAdminPermissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ExtendAdminPermissions { get; set; }

        /// <summary>
        /// The permission details to be changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PermissionDetails PermissionDetails { get; set; }

    }

    /// <summary>
    /// Details of a request to bulk edit shareable entity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class BulkEditShareableEntityResponse
    {

        /// <summary>
        /// Allowed action for bulk edit shareable entity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BulkEditShareableEntityResponseAction Action { get; set; }

        /// <summary>
        /// The mapping dashboard id to errors if any.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityErrors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, BulkEditActionError> EntityErrors { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class BulkFetchIssueRequestBean
    {

        /// <summary>
        /// Use [expand](#expansion) to include additional information about issues in the response. Note that, unlike the majority of instances where `expand` is specified, `expand` is defined as a list of values. The expand options are:
        /// <br/>
        /// <br/> *  `renderedFields` Returns field values rendered in HTML format.
        /// <br/> *  `names` Returns the display name of each field.
        /// <br/> *  `schema` Returns the schema describing a field type.
        /// <br/> *  `transitions` Returns all possible transitions for the issue.
        /// <br/> *  `operations` Returns all possible operations for the issue.
        /// <br/> *  `editmeta` Returns information about how each field can be edited.
        /// <br/> *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
        /// <br/> *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Expand { get; set; }

        /// <summary>
        /// A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `*all` Returns all fields.
        /// <br/> *  `*navigable` Returns navigable fields.
        /// <br/> *  Any issue field, prefixed with a minus to exclude.
        /// <br/>
        /// <br/>The default is `*navigable`.
        /// <br/>
        /// <br/>Examples:
        /// <br/>
        /// <br/> *  `summary,comment` Returns the summary and comments fields only.
        /// <br/> *  `-description` Returns all navigable (default) fields except description.
        /// <br/> *  `*all,-comment` Returns all fields except comments.
        /// <br/>
        /// <br/>Multiple `fields` parameters can be included in a request.
        /// <br/>
        /// <br/>Note: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-2-issue-issueIdOrKey-get) where the default is all fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Fields { get; set; }

        /// <summary>
        /// Reference fields by their key (rather than ID). The default is `false`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldsByKeys", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool FieldsByKeys { get; set; }

        /// <summary>
        /// An array of issue IDs or issue keys to fetch. You can mix issue IDs and keys in the same query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueIdsOrKeys", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> IssueIdsOrKeys { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// A list of issue property keys of issue properties to be included in the results. A maximum of 5 issue property keys can be specified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Properties { get; set; }

    }

    /// <summary>
    /// A container for the watch status of a list of issues.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class BulkIssueIsWatching
    {

        /// <summary>
        /// The map of issue ID to boolean watch status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuesIsWatching", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, bool> IssuesIsWatching { get; set; }

    }

    /// <summary>
    /// Bulk issue property update request details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class BulkIssuePropertyUpdateRequest
    {

        /// <summary>
        /// EXPERIMENTAL. The Jira expression to calculate the value of the property. The value of the expression must be an object that can be converted to JSON, such as a number, boolean, string, list, or map. The context variables available to the expression are `issue` and `user`. Issues for which the expression returns a value whose JSON representation is longer than 32768 characters are ignored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expression", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expression { get; set; }

        /// <summary>
        /// The bulk operation filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueFilterForBulkPropertySet Filter { get; set; }

        /// <summary>
        /// The value of the property. The value must be a [valid](https://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }

    }

    /// <summary>
    /// The list of requested issues &amp; fields.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class BulkIssueResults
    {

        /// <summary>
        /// When Jira can't return an issue enumerated in a request due to a retriable error or payload constraint, we'll return the respective issue ID with a corresponding error message. This list is empty when there are no errors Issues which aren't found or that the user doesn't have permission to view won't be returned in this list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueErrors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueError> IssueErrors { get; set; }

        /// <summary>
        /// The list of issues.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueBean> Issues { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class BulkOperationErrorResult
    {

        [Newtonsoft.Json.JsonProperty("elementErrors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorCollection ElementErrors { get; set; }

        [Newtonsoft.Json.JsonProperty("failedElementNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FailedElementNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }

    }

    /// <summary>
    /// Details of global and project permissions granted to the user.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class BulkPermissionGrants
    {

        /// <summary>
        /// List of permissions granted to the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("globalPermissions", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> GlobalPermissions { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// List of project permissions and the projects and issues those permissions provide access to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectPermissions", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<BulkProjectPermissionGrants> ProjectPermissions { get; set; } = new System.Collections.ObjectModel.Collection<BulkProjectPermissionGrants>();

    }

    /// <summary>
    /// Details of global permissions to look up and project permissions with associated projects and issues to look up.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class BulkPermissionsRequestBean
    {

        /// <summary>
        /// The account ID of a user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountId { get; set; }

        /// <summary>
        /// Global permissions to look up.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("globalPermissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> GlobalPermissions { get; set; }

        /// <summary>
        /// Project permissions with associated projects and issues to look up.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectPermissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BulkProjectPermissions> ProjectPermissions { get; set; }

    }

    /// <summary>
    /// List of project permissions and the projects and issues those permissions grant access to.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class BulkProjectPermissionGrants
    {

        /// <summary>
        /// IDs of the issues the user has the permission for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issues", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<long> Issues { get; set; } = new System.Collections.ObjectModel.Collection<long>();

        /// <summary>
        /// A project permission,
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permission", Required = Newtonsoft.Json.Required.Always)]
        public string Permission { get; set; }

        /// <summary>
        /// IDs of the projects the user has the permission for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projects", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<long> Projects { get; set; } = new System.Collections.ObjectModel.Collection<long>();

    }

    /// <summary>
    /// Details of project permissions and associated issues and projects to look up.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class BulkProjectPermissions
    {

        /// <summary>
        /// List of issue IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> Issues { get; set; }

        /// <summary>
        /// List of project permissions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> Permissions { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// List of project IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> Projects { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class BulkRedactionRequest
    {

        [Newtonsoft.Json.JsonProperty("redactions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SingleRedactionRequest> Redactions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class BulkRedactionResponse
    {

        /// <summary>
        /// Result for requested redactions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<SingleRedactionResponse> Results { get; set; } = new System.Collections.ObjectModel.Collection<SingleRedactionResponse>();

    }

    /// <summary>
    /// Card layout configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CardLayout
    {

        /// <summary>
        /// Whether to show days in column
        /// </summary>
        [Newtonsoft.Json.JsonProperty("showDaysInColumn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ShowDaysInColumn { get; set; }

    }

    /// <summary>
    /// Card layout settings of the board
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CardLayoutField
    {

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CardLayoutFieldMode Mode { get; set; }

        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Position { get; set; }

    }

    /// <summary>
    /// A change item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ChangeDetails
    {

        /// <summary>
        /// The name of the field changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }

        /// <summary>
        /// The ID of the field changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        /// <summary>
        /// The type of the field changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldtype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fieldtype { get; set; }

        /// <summary>
        /// The details of the original value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string From { get; set; }

        /// <summary>
        /// The details of the original value as a string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fromString", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FromString { get; set; }

        /// <summary>
        /// The details of the new value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string To { get; set; }

        /// <summary>
        /// The details of the new value as a string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("toString", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ToString { get; set; }

    }

    /// <summary>
    /// The account ID of the new owner.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ChangeFilterOwner
    {

        /// <summary>
        /// The account ID of the new owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        public string AccountId { get; set; }

    }

    /// <summary>
    /// Details of names changed in the record event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ChangedValueBean
    {

        /// <summary>
        /// The value of the field before the change.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changedFrom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChangedFrom { get; set; }

        /// <summary>
        /// The value of the field after the change.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changedTo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChangedTo { get; set; }

        /// <summary>
        /// The name of the field changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldName { get; set; }

    }

    /// <summary>
    /// Details of a changed worklog.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ChangedWorklog
    {

        /// <summary>
        /// Details of properties associated with the change.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EntityProperty> Properties { get; set; }

        /// <summary>
        /// The datetime of the change.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long UpdatedTime { get; set; }

        /// <summary>
        /// The ID of the worklog.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("worklogId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long WorklogId { get; set; }

    }

    /// <summary>
    /// List of changed worklogs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ChangedWorklogs
    {

        [Newtonsoft.Json.JsonProperty("lastPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool LastPage { get; set; }

        /// <summary>
        /// The URL of the next list of changed worklogs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of this changed worklogs list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The datetime of the first worklog item in the list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("since", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Since { get; set; }

        /// <summary>
        /// The datetime of the last worklog item in the list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("until", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Until { get; set; }

        /// <summary>
        /// Changed worklog list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChangedWorklog> Values { get; set; }

    }

    /// <summary>
    /// A log of changes made to issue fields. Changelogs related to workflow associations are currently being deprecated.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Changelog
    {

        /// <summary>
        /// The user who made the change.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDetails Author { get; set; }

        /// <summary>
        /// The date on which the change took place.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        /// <summary>
        /// The history metadata associated with the changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("historyMetadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HistoryMetadata HistoryMetadata { get; set; }

        /// <summary>
        /// The ID of the changelog.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The list of items changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChangeDetails> Items { get; set; }

    }

    /// <summary>
    /// Details of an issue navigator column item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ColumnItem
    {

        /// <summary>
        /// The issue navigator column label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>
        /// The issue navigator column value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ColumnRequestBody
    {

        [Newtonsoft.Json.JsonProperty("columns", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Columns { get; set; }

    }

    /// <summary>
    /// A comment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Comment
    {

        /// <summary>
        /// The ID of the user who created the comment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDetails Author { get; set; }

        /// <summary>
        /// The comment text.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body { get; set; }

        /// <summary>
        /// The date and time at which the comment was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        /// <summary>
        /// The ID of the comment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Whether the comment was added from an email sent by a person who is not part of the issue. See [Allow external emails to be added as comments on issues](https://support.atlassian.com/jira-service-management-cloud/docs/allow-external-emails-to-be-added-as-comments-on-issues/)for information on setting up this feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jsdAuthorCanSeeRequest", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool JsdAuthorCanSeeRequest { get; set; }

        /// <summary>
        /// Whether the comment is visible in Jira Service Desk. Defaults to true when comments are created in the Jira Cloud Platform. This includes when the site doesn't use Jira Service Desk or the project isn't a Jira Service Desk project and, therefore, there is no Jira Service Desk for the issue to be visible on. To create a comment with its visibility in Jira Service Desk set to false, use the Jira Service Desk REST API [Create request comment](https://developer.atlassian.com/cloud/jira/service-desk/rest/#api-rest-servicedeskapi-request-issueIdOrKey-comment-post) operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jsdPublic", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool JsdPublic { get; set; }

        /// <summary>
        /// A list of comment properties. Optional on create and update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EntityProperty> Properties { get; set; }

        /// <summary>
        /// The rendered version of the comment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("renderedBody", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RenderedBody { get; set; }

        /// <summary>
        /// The URL of the comment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        /// <summary>
        /// The ID of the user who updated the comment last.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updateAuthor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDetails UpdateAuthor { get; set; }

        /// <summary>
        /// The date and time at which the comment was updated last.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

        /// <summary>
        /// The group or role to which this comment is visible. Optional on create and update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visibility", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Visibility Visibility { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Count of issues assigned to a component.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ComponentIssuesCount
    {

        /// <summary>
        /// The count of issues assigned to a component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssueCount { get; set; }

        /// <summary>
        /// The URL for this count of issues for a component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ComponentJsonBean
    {

        [Newtonsoft.Json.JsonProperty("ari", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ari { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Metadata { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about a component with a count of the issues it contains.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ComponentWithIssueCount
    {

        /// <summary>
        /// The details of the user associated with `assigneeType`, if any. See `realAssignee` for details of the user assigned to issues created with this component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User Assignee { get; set; }

        /// <summary>
        /// The nominal user type used to determine the assignee for issues created with this component. See `realAssigneeType` for details on how the type of the user, and hence the user, assigned to issues is determined. Takes the following values:
        /// <br/>
        /// <br/> *  `PROJECT_LEAD` the assignee to any issues created with this component is nominally the lead for the project the component is in.
        /// <br/> *  `COMPONENT_LEAD` the assignee to any issues created with this component is nominally the lead for the component.
        /// <br/> *  `UNASSIGNED` an assignee is not set for issues created with this component.
        /// <br/> *  `PROJECT_DEFAULT` the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assigneeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ComponentWithIssueCountAssigneeType AssigneeType { get; set; }

        /// <summary>
        /// The description for the component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The unique identifier for the component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Whether a user is associated with `assigneeType`. For example, if the `assigneeType` is set to `COMPONENT_LEAD` but the component lead is not set, then `false` is returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAssigneeTypeValid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsAssigneeTypeValid { get; set; }

        /// <summary>
        /// Count of issues for the component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssueCount { get; set; }

        /// <summary>
        /// The user details for the component's lead user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lead", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User Lead { get; set; }

        /// <summary>
        /// The name for the component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The key of the project to which the component is assigned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project { get; set; }

        /// <summary>
        /// Not used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ProjectId { get; set; }

        /// <summary>
        /// The user assigned to issues created with this component, when `assigneeType` does not identify a valid assignee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("realAssignee", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User RealAssignee { get; set; }

        /// <summary>
        /// The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the `assigneeType`. For example, `assigneeType` is set to `COMPONENT_LEAD` but no component lead is set. This property is set to one of the following values:
        /// <br/>
        /// <br/> *  `PROJECT_LEAD` when `assigneeType` is `PROJECT_LEAD` and the project lead has permission to be assigned issues in the project that the component is in.
        /// <br/> *  `COMPONENT_LEAD` when `assignee`Type is `COMPONENT_LEAD` and the component lead has permission to be assigned issues in the project that the component is in.
        /// <br/> *  `UNASSIGNED` when `assigneeType` is `UNASSIGNED` and Jira is configured to allow unassigned issues.
        /// <br/> *  `PROJECT_DEFAULT` when none of the preceding cases are true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("realAssigneeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ComponentWithIssueCountRealAssigneeType RealAssigneeType { get; set; }

        /// <summary>
        /// The URL for this count of the issues contained in the component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

    }

    /// <summary>
    /// A JQL query clause that consists of nested clauses. For example, `(labels in (urgent, blocker) OR lastCommentedBy = currentUser()). Note that, where nesting is not defined, the parser nests JQL clauses based on the operator precedence. For example, "A OR B AND C" is parsed as "(A OR B) AND C". See Setting the precedence of operators for more information about precedence in JQL queries.`
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CompoundClause
    {

        /// <summary>
        /// The list of nested clauses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clauses", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<JqlQueryClause> Clauses { get; set; } = new System.Collections.ObjectModel.Collection<JqlQueryClause>();

        /// <summary>
        /// The operator between the clauses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CompoundClauseOperator Operator { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The conditions group associated with the transition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ConditionGroupConfiguration
    {

        /// <summary>
        /// The nested conditions of the condition group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditionGroups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ConditionGroupConfiguration> ConditionGroups { get; set; }

        /// <summary>
        /// The rules for this condition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowRuleConfiguration> Conditions { get; set; }

        /// <summary>
        /// Determines how the conditions in the group are evaluated. Accepts either `ANY` or `ALL`. If `ANY` is used, at least one condition in the group must be true for the group to evaluate to true. If `ALL` is used, all conditions in the group must be true for the group to evaluate to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConditionGroupConfigurationOperation Operation { get; set; }

    }

    /// <summary>
    /// The payload for creating a condition group in a workflow
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ConditionGroupPayload
    {

        /// <summary>
        /// The nested conditions of the condition group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditionGroup", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ConditionGroupPayload> ConditionGroup { get; set; }

        /// <summary>
        /// The rules for this condition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RulePayload> Conditions { get; set; }

        /// <summary>
        /// Determines how the conditions in the group are evaluated. Accepts either `ANY` or `ALL`. If `ANY` is used, at least one condition in the group must be true for the group to evaluate to true. If `ALL` is used, all conditions in the group must be true for the group to evaluate to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConditionGroupPayloadOperation Operation { get; set; }

    }

    /// <summary>
    /// The conditions group associated with the transition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ConditionGroupUpdate
    {

        /// <summary>
        /// The nested conditions of the condition group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditionGroups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ConditionGroupUpdate> ConditionGroups { get; set; }

        /// <summary>
        /// The rules for this condition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowRuleConfiguration> Conditions { get; set; }

        /// <summary>
        /// Determines how the conditions in the group are evaluated. Accepts either `ANY` or `ALL`. If `ANY` is used, at least one condition in the group must be true for the group to evaluate to true. If `ALL` is used, all conditions in the group must be true for the group to evaluate to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConditionGroupUpdateOperation Operation { get; set; }

    }

    /// <summary>
    /// Details about the configuration of Jira.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Configuration
    {

        /// <summary>
        /// Whether the ability to add attachments to issues is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attachmentsEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AttachmentsEnabled { get; set; }

        /// <summary>
        /// Whether the ability to link issues is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueLinkingEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IssueLinkingEnabled { get; set; }

        /// <summary>
        /// Whether the ability to create subtasks for issues is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subTasksEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SubTasksEnabled { get; set; }

        /// <summary>
        /// The configuration of time tracking.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeTrackingConfiguration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeTrackingConfiguration TimeTrackingConfiguration { get; set; }

        /// <summary>
        /// Whether the ability to track time is enabled. This property is deprecated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeTrackingEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool TimeTrackingEnabled { get; set; }

        /// <summary>
        /// Whether the ability to create unassigned issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unassignedIssuesAllowed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UnassignedIssuesAllowed { get; set; }

        /// <summary>
        /// Whether the ability for users to vote on issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("votingEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool VotingEnabled { get; set; }

        /// <summary>
        /// Whether the ability for users to watch issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("watchingEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool WatchingEnabled { get; set; }

    }

    /// <summary>
    /// List of custom fields identifiers which will be used to filter configurations
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ConfigurationsListParameters
    {

        /// <summary>
        /// List of IDs or keys of the custom fields. It can be a mix of IDs and keys in the same query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldIdsOrKeys", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> FieldIdsOrKeys { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    }

    /// <summary>
    /// A list of custom field details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ConnectCustomFieldValue
    {

        /// <summary>
        /// The type of custom field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConnectCustomFieldValue_type _type { get; set; }

        /// <summary>
        /// The custom field ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldID", Required = Newtonsoft.Json.Required.Always)]
        public int FieldID { get; set; }

        /// <summary>
        /// The issue ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueID", Required = Newtonsoft.Json.Required.Always)]
        public int IssueID { get; set; }

        /// <summary>
        /// The value of number type custom field when `_type` is `NumberIssueField`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Number { get; set; }

        /// <summary>
        /// The value of single select and multiselect custom field type when `_type` is `SingleSelectIssueField` or `MultiSelectIssueField`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("optionID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OptionID { get; set; }

        /// <summary>
        /// The value of richText type custom field when `_type` is `RichTextIssueField`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("richText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RichText { get; set; }

        /// <summary>
        /// The value of string type custom field when `_type` is `StringIssueField`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("string", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string String { get; set; }

        /// <summary>
        /// The value of of text custom field type when `_type` is `TextIssueField`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details of updates for a custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ConnectCustomFieldValues
    {

        /// <summary>
        /// The list of custom field update details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updateValueList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ConnectCustomFieldValue> UpdateValueList { get; set; }

    }

    /// <summary>
    /// A [Connect module](https://developer.atlassian.com/cloud/jira/platform/about-jira-modules/) in the same format as in the
    /// <br/>[app descriptor](https://developer.atlassian.com/cloud/jira/platform/app-descriptor/).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ConnectModule
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ConnectModules
    {

        /// <summary>
        /// A list of app modules in the same format as the `modules` property in the
        /// <br/>[app descriptor](https://developer.atlassian.com/cloud/jira/platform/app-descriptor/).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modules", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<ConnectModule> Modules { get; set; } = new System.Collections.ObjectModel.Collection<ConnectModule>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A workflow transition rule.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ConnectWorkflowTransitionRule
    {

        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.Always)]
        public RuleConfiguration Configuration { get; set; } = new RuleConfiguration();

        /// <summary>
        /// The ID of the transition rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The key of the rule, as defined in the Connect app descriptor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("transition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowTransition Transition { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The list of features on a project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ContainerForProjectFeatures
    {

        /// <summary>
        /// The project features.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectFeature> Features { get; set; }

    }

    /// <summary>
    /// Container for a list of registered webhooks. Webhook details are returned in the same order as the request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ContainerForRegisteredWebhooks
    {

        /// <summary>
        /// A list of registered webhooks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webhookRegistrationResult", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RegisteredWebhook> WebhookRegistrationResult { get; set; }

    }

    /// <summary>
    /// Container for a list of webhook IDs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ContainerForWebhookIDs
    {

        /// <summary>
        /// A list of webhook IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webhookIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<long> WebhookIds { get; set; } = new System.Collections.ObjectModel.Collection<long>();

    }

    /// <summary>
    /// A container for a list of workflow schemes together with the projects they are associated with.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ContainerOfWorkflowSchemeAssociations
    {

        /// <summary>
        /// A list of workflow schemes together with projects they are associated with.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<WorkflowSchemeAssociations> Values { get; set; } = new System.Collections.ObjectModel.Collection<WorkflowSchemeAssociations>();

    }

    /// <summary>
    /// Represents the content to redact
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ContentItem
    {

        /// <summary>
        /// The ID of the content entity.
        /// <br/>
        /// <br/> *  For redacting an issue field, this will be the field ID (e.g., summary, customfield\_10000).
        /// <br/> *  For redacting a comment, this will be the comment ID.
        /// <br/> *  For redacting a worklog, this will be the worklog ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.Always)]
        public string EntityId { get; set; }

        /// <summary>
        /// The type of the entity to redact; It will be one of the following:
        /// <br/>
        /// <br/> *  **issuefieldvalue** \- To redact in issue fields
        /// <br/> *  **issue-comment** \- To redact in issue comments.
        /// <br/> *  **issue-worklog** \- To redact in issue worklogs
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentItemEntityType EntityType { get; set; }

        /// <summary>
        /// This would be the issue ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

    }

    /// <summary>
    /// A context.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Context
    {

        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The name of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The scope of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

    }

    /// <summary>
    /// The project and issue type mapping with a matching custom field context.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ContextForProjectAndIssueType
    {

        /// <summary>
        /// The ID of the custom field context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        public string ContextId { get; set; }

        /// <summary>
        /// The ID of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeId", Required = Newtonsoft.Json.Required.Always)]
        public string IssueTypeId { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.Always)]
        public string ProjectId { get; set; }

    }

    /// <summary>
    /// Details of the contextual configuration for a custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ContextualConfiguration
    {

        /// <summary>
        /// The field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Configuration { get; set; }

        /// <summary>
        /// The ID of the field context the configuration is associated with.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldContextId", Required = Newtonsoft.Json.Required.Always)]
        public string FieldContextId { get; set; }

        /// <summary>
        /// The ID of the configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The field value schema.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Schema { get; set; }

    }

    /// <summary>
    /// The converted JQL queries.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ConvertedJQLQueries
    {

        /// <summary>
        /// List of queries containing user information that could not be mapped to an existing user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queriesWithUnknownUsers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JQLQueryWithUnknownUsers> QueriesWithUnknownUsers { get; set; }

        /// <summary>
        /// The list of converted query strings with account IDs in place of user identifiers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryStrings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> QueryStrings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CreateCrossProjectReleaseRequest
    {

        /// <summary>
        /// The cross-project release name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// The IDs of the releases to include in the cross-project release.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("releaseIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> ReleaseIds { get; set; }

    }

    /// <summary>
    /// The details of a created custom field context.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CreateCustomFieldContext
    {

        /// <summary>
        /// The description of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The list of issue types IDs for the context. If the list is empty, the context refers to all issue types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> IssueTypeIds { get; set; }

        /// <summary>
        /// The name of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// The list of project IDs associated with the context. If the list is empty, the context is global.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ProjectIds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CreateCustomFieldRequest
    {

        /// <summary>
        /// The custom field ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customFieldId", Required = Newtonsoft.Json.Required.Always)]
        public long CustomFieldId { get; set; }

        /// <summary>
        /// Allows filtering issues based on their values for the custom field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Filter { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CreateDateFieldRequest
    {

        /// <summary>
        /// A date custom field ID. This is required if the type is "DateCustomField".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateCustomFieldId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long DateCustomFieldId { get; set; }

        /// <summary>
        /// The date field type. This must be "DueDate", "TargetStartDate", "TargetEndDate" or "DateCustomField".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateDateFieldRequestType Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CreateExclusionRulesRequest
    {

        /// <summary>
        /// The IDs of the issues to exclude from the plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> IssueIds { get; set; }

        /// <summary>
        /// The IDs of the issue types to exclude from the plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> IssueTypeIds { get; set; }

        /// <summary>
        /// Issues completed this number of days ago will be excluded from the plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfDaysToShowCompletedIssues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NumberOfDaysToShowCompletedIssues { get; set; }

        /// <summary>
        /// The IDs of the releases to exclude from the plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("releaseIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> ReleaseIds { get; set; }

        /// <summary>
        /// The IDs of the work status categories to exclude from the plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workStatusCategoryIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> WorkStatusCategoryIds { get; set; }

        /// <summary>
        /// The IDs of the work statuses to exclude from the plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workStatusIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> WorkStatusIds { get; set; }

    }

    /// <summary>
    /// Issue security scheme and it's details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CreateIssueSecuritySchemeDetails
    {

        /// <summary>
        /// The description of the issue security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The list of scheme levels which should be added to the security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("levels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SecuritySchemeLevelBean> Levels { get; set; }

        /// <summary>
        /// The name of the issue security scheme. Must be unique (case-insensitive).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CreateIssueSourceRequest
    {

        /// <summary>
        /// The issue source type. This must be "Board", "Project" or "Filter".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateIssueSourceRequestType Type { get; set; }

        /// <summary>
        /// The issue source value. This must be a board ID if the type is "Board", a project ID if the type is "Project" or a filter ID if the type is "Filter".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public long Value { get; set; }

    }

    /// <summary>
    /// Details of an notification scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CreateNotificationSchemeDetails
    {

        /// <summary>
        /// The description of the notification scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the notification scheme. Must be unique (case-insensitive).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// The list of notifications which should be added to the notification scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationSchemeEvents", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NotificationSchemeEventDetails> NotificationSchemeEvents { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CreatePermissionHolderRequest
    {

        /// <summary>
        /// The permission holder type. This must be "Group" or "AccountId".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreatePermissionHolderRequestType Type { get; set; }

        /// <summary>
        /// The permission holder value. This must be a group name if the type is "Group" or an account ID if the type is "AccountId".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CreatePermissionRequest
    {

        /// <summary>
        /// The permission holder.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holder", Required = Newtonsoft.Json.Required.Always)]
        public CreatePermissionHolderRequest Holder { get; set; } = new CreatePermissionHolderRequest();

        /// <summary>
        /// The permission type. This must be "View" or "Edit".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreatePermissionRequestType Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CreatePlanOnlyTeamRequest
    {

        /// <summary>
        /// The capacity for the plan-only team.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("capacity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Capacity { get; set; }

        /// <summary>
        /// The ID of the issue source for the plan-only team.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueSourceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssueSourceId { get; set; }

        /// <summary>
        /// The account IDs of the plan-only team members.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("memberAccountIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> MemberAccountIds { get; set; }

        /// <summary>
        /// The plan-only team name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// The planning style for the plan-only team. This must be "Scrum" or "Kanban".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("planningStyle", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreatePlanOnlyTeamRequestPlanningStyle PlanningStyle { get; set; }

        /// <summary>
        /// The sprint length for the plan-only team.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sprintLength", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long SprintLength { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CreatePlanRequest
    {

        /// <summary>
        /// The cross-project releases to include in the plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("crossProjectReleases", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CreateCrossProjectReleaseRequest> CrossProjectReleases { get; set; }

        /// <summary>
        /// The custom fields for the plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customFields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CreateCustomFieldRequest> CustomFields { get; set; }

        /// <summary>
        /// The exclusion rules for the plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exclusionRules", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreateExclusionRulesRequest ExclusionRules { get; set; }

        /// <summary>
        /// The issue sources to include in the plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueSources", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<CreateIssueSourceRequest> IssueSources { get; set; } = new System.Collections.ObjectModel.Collection<CreateIssueSourceRequest>();

        /// <summary>
        /// The account ID of the plan lead.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("leadAccountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LeadAccountId { get; set; }

        /// <summary>
        /// The plan name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// The permissions for the plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CreatePermissionRequest> Permissions { get; set; }

        /// <summary>
        /// The scheduling settings for the plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduling", Required = Newtonsoft.Json.Required.Always)]
        public CreateSchedulingRequest Scheduling { get; set; } = new CreateSchedulingRequest();

    }

    /// <summary>
    /// Details of an issue priority.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CreatePriorityDetails
    {

        /// <summary>
        /// The ID for the avatar for the priority. Either the iconUrl or avatarId must be defined, but not both. This parameter is nullable and will become mandatory once the iconUrl parameter is deprecated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long AvatarId { get; set; }

        /// <summary>
        /// The description of the priority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The URL of an icon for the priority. Accepted protocols are HTTP and HTTPS. Built in icons can also be used. Either the iconUrl or avatarId must be defined, but not both.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iconUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreatePriorityDetailsIconUrl? IconUrl { get; set; }

        /// <summary>
        /// The name of the priority. Must be unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// The status color of the priority in 3-digit or 6-digit hexadecimal format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusColor", Required = Newtonsoft.Json.Required.Always)]
        public string StatusColor { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details of a new priority scheme
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CreatePrioritySchemeDetails
    {

        /// <summary>
        /// The ID of the default priority for the priority scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultPriorityId", Required = Newtonsoft.Json.Required.Always)]
        public long DefaultPriorityId { get; set; }

        /// <summary>
        /// The description of the priority scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Instructions to migrate the priorities of issues.
        /// <br/>
        /// <br/>`in` mappings are used to migrate the priorities of issues to priorities used within the priority scheme.
        /// <br/>
        /// <br/>`out` mappings are used to migrate the priorities of issues to priorities not used within the priority scheme.
        /// <br/>
        /// <br/> *  When **priorities** are **added** to the new priority scheme, no mapping needs to be provided as the new priorities are not used by any issues.
        /// <br/> *  When **priorities** are **removed** from the new priority scheme, no mapping needs to be provided as the removed priorities are not used by any issues.
        /// <br/> *  When **projects** are **added** to the priority scheme, the priorities of issues in those projects might need to be migrated to new priorities used by the priority scheme. This can occur when the current scheme does not use all the priorities in the project(s)' priority scheme(s).
        /// <br/>    
        /// <br/>     *  An `in` mapping must be provided for each of these priorities.
        /// <br/> *  When **projects** are **removed** from the priority scheme, no mapping needs to be provided as the removed projects are not using the priorities of the new priority scheme.
        /// <br/>
        /// <br/>For more information on `in` and `out` mappings, see the child properties documentation for the `PriorityMapping` object below.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mappings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PriorityMapping Mappings { get; set; }

        /// <summary>
        /// The name of the priority scheme. Must be unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// The IDs of priorities in the scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priorityIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<long> PriorityIds { get; set; } = new System.Collections.ObjectModel.Collection<long>();

        /// <summary>
        /// The IDs of projects that will use the priority scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> ProjectIds { get; set; }

    }

    /// <summary>
    /// Details about the project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CreateProjectDetails
    {

        /// <summary>
        /// The default assignee when creating issues for this project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assigneeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateProjectDetailsAssigneeType AssigneeType { get; set; }

        /// <summary>
        /// An integer value for the project's avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long AvatarId { get; set; }

        /// <summary>
        /// The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-2-projectCategory-get) operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("categoryId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long CategoryId { get; set; }

        /// <summary>
        /// A brief description of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the field configuration scheme for the project. Use the [Get all field configuration schemes](#api-rest-api-2-fieldconfigurationscheme-get) operation to get a list of field configuration scheme IDs. If you specify the field configuration scheme you cannot specify the project template key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldConfigurationScheme", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long FieldConfigurationScheme { get; set; }

        /// <summary>
        /// The ID of the issue security scheme for the project, which enables you to control who can and cannot view issues. Use the [Get issue security schemes](#api-rest-api-2-issuesecurityschemes-get) resource to get all issue security scheme IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueSecurityScheme", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssueSecurityScheme { get; set; }

        /// <summary>
        /// The ID of the issue type scheme for the project. Use the [Get all issue type schemes](#api-rest-api-2-issuetypescheme-get) operation to get a list of issue type scheme IDs. If you specify the issue type scheme you cannot specify the project template key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeScheme", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssueTypeScheme { get; set; }

        /// <summary>
        /// The ID of the issue type screen scheme for the project. Use the [Get all issue type screen schemes](#api-rest-api-2-issuetypescreenscheme-get) operation to get a list of issue type screen scheme IDs. If you specify the issue type screen scheme you cannot specify the project template key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeScreenScheme", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssueTypeScreenScheme { get; set; }

        /// <summary>
        /// Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; }

        /// <summary>
        /// This parameter is deprecated because of privacy changes. Use `leadAccountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. The user name of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Cannot be provided with `leadAccountId`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lead", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lead { get; set; }

        /// <summary>
        /// The account ID of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Cannot be provided with `lead`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("leadAccountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LeadAccountId { get; set; }

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// The ID of the notification scheme for the project. Use the [Get notification schemes](#api-rest-api-2-notificationscheme-get) resource to get a list of notification scheme IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationScheme", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long NotificationScheme { get; set; }

        /// <summary>
        /// The ID of the permission scheme for the project. Use the [Get all permission schemes](#api-rest-api-2-permissionscheme-get) resource to see a list of all permission scheme IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionScheme", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long PermissionScheme { get; set; }

        /// <summary>
        /// A predefined configuration for a project. The type of the `projectTemplateKey` must match with the type of the `projectTypeKey`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectTemplateKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateProjectDetailsProjectTemplateKey ProjectTemplateKey { get; set; }

        /// <summary>
        /// The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes), which defines the application-specific feature set. If you don't specify the project template you have to specify the project type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectTypeKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateProjectDetailsProjectTypeKey ProjectTypeKey { get; set; }

        /// <summary>
        /// A link to information about this project, such as project documentation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        /// <summary>
        /// The ID of the workflow scheme for the project. Use the [Get all workflow schemes](#api-rest-api-2-workflowscheme-get) operation to get a list of workflow scheme IDs. If you specify the workflow scheme you cannot specify the project template key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowScheme", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long WorkflowScheme { get; set; }

    }

    /// <summary>
    /// Details of an issue resolution.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CreateResolutionDetails
    {

        /// <summary>
        /// The description of the resolution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the resolution. Must be unique (case-insensitive).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CreateSchedulingRequest
    {

        /// <summary>
        /// The dependencies for the plan. This must be "Sequential" or "Concurrent".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dependencies", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateSchedulingRequestDependencies Dependencies { get; set; }

        /// <summary>
        /// The end date field for the plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreateDateFieldRequest EndDate { get; set; }

        /// <summary>
        /// The estimation unit for the plan. This must be "StoryPoints", "Days" or "Hours".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimation", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateSchedulingRequestEstimation Estimation { get; set; }

        /// <summary>
        /// The inferred dates for the plan. This must be "None", "SprintDates" or "ReleaseDates".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inferredDates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateSchedulingRequestInferredDates InferredDates { get; set; }

        /// <summary>
        /// The start date field for the plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreateDateFieldRequest StartDate { get; set; }

    }

    /// <summary>
    /// The details of a UI modification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CreateUiModificationDetails
    {

        /// <summary>
        /// List of contexts of the UI modification. The maximum number of contexts is 1000.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contexts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UiModificationContextDetails> Contexts { get; set; }

        /// <summary>
        /// The data of the UI modification. The maximum size of the data is 50000 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <summary>
        /// The description of the UI modification. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the UI modification. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CreateUpdateRoleRequestBean
    {

        /// <summary>
        /// A description of the project role. Required when fully updating a project role. Optional when creating or partially updating a project role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the project role. Must be unique. Cannot begin or end with whitespace. The maximum length is 255 characters. Required when creating a project role. Optional when partially updating a project role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// A workflow transition condition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CreateWorkflowCondition
    {

        /// <summary>
        /// The list of workflow conditions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CreateWorkflowCondition> Conditions { get; set; }

        /// <summary>
        /// EXPERIMENTAL. The configuration of the transition rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Configuration { get; set; }

        /// <summary>
        /// The compound condition operator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateWorkflowConditionOperator Operator { get; set; }

        /// <summary>
        /// The type of the transition rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// The details of a workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CreateWorkflowDetails
    {

        /// <summary>
        /// The description of the workflow. The maximum length is 1000 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the workflow. The name must be unique. The maximum length is 255 characters. Characters can be separated by a whitespace but the name cannot start or end with a whitespace.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// The statuses of the workflow. Any status that does not include a transition is added to the workflow without a transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<CreateWorkflowStatusDetails> Statuses { get; set; } = new System.Collections.ObjectModel.Collection<CreateWorkflowStatusDetails>();

        /// <summary>
        /// The transitions of the workflow. For the request to be valid, these transitions must:
        /// <br/>
        /// <br/> *  include one *initial* transition.
        /// <br/> *  not use the same name for a *global* and *directed* transition.
        /// <br/> *  have a unique name for each *global* transition.
        /// <br/> *  have a unique 'to' status for each *global* transition.
        /// <br/> *  have unique names for each transition from a status.
        /// <br/> *  not have a 'from' status on *initial* and *global* transitions.
        /// <br/> *  have a 'from' status on *directed* transitions.
        /// <br/>
        /// <br/>All the transition statuses must be included in `statuses`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transitions", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<CreateWorkflowTransitionDetails> Transitions { get; set; } = new System.Collections.ObjectModel.Collection<CreateWorkflowTransitionDetails>();

    }

    /// <summary>
    /// The details of a transition status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CreateWorkflowStatusDetails
    {

        /// <summary>
        /// The ID of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The properties of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Properties { get; set; }

    }

    /// <summary>
    /// The details of a workflow transition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CreateWorkflowTransitionDetails
    {

        /// <summary>
        /// The description of the transition. The maximum length is 1000 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The statuses the transition can start from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> From { get; set; }

        /// <summary>
        /// The name of the transition. The maximum length is 60 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// The properties of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Properties { get; set; }

        /// <summary>
        /// The rules of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rules", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreateWorkflowTransitionRulesDetails Rules { get; set; }

        /// <summary>
        /// The screen of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("screen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreateWorkflowTransitionScreenDetails Screen { get; set; }

        /// <summary>
        /// The status the transition goes to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Always)]
        public string To { get; set; }

        /// <summary>
        /// The type of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateWorkflowTransitionDetailsType Type { get; set; }

    }

    /// <summary>
    /// A workflow transition rule.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CreateWorkflowTransitionRule
    {

        /// <summary>
        /// EXPERIMENTAL. The configuration of the transition rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Configuration { get; set; }

        /// <summary>
        /// The type of the transition rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

    }

    /// <summary>
    /// The details of a workflow transition rules.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CreateWorkflowTransitionRulesDetails
    {

        /// <summary>
        /// The workflow conditions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreateWorkflowCondition Conditions { get; set; }

        /// <summary>
        /// The workflow post functions.
        /// <br/>
        /// <br/>**Note:** The default post functions are always added to the *initial* transition, as in:
        /// <br/>
        /// <br/>    "postFunctions": [
        /// <br/>        {
        /// <br/>            "type": "IssueCreateFunction"
        /// <br/>        },
        /// <br/>        {
        /// <br/>            "type": "IssueReindexFunction"
        /// <br/>        },
        /// <br/>        {
        /// <br/>            "type": "FireIssueEventFunction",
        /// <br/>            "configuration": {
        /// <br/>                "event": {
        /// <br/>                    "id": "1",
        /// <br/>                    "name": "issue_created"
        /// <br/>                }
        /// <br/>            }
        /// <br/>        }
        /// <br/>    ]
        /// <br/>
        /// <br/>**Note:** The default post functions are always added to the *global* and *directed* transitions, as in:
        /// <br/>
        /// <br/>    "postFunctions": [
        /// <br/>        {
        /// <br/>            "type": "UpdateIssueStatusFunction"
        /// <br/>        },
        /// <br/>        {
        /// <br/>            "type": "CreateCommentFunction"
        /// <br/>        },
        /// <br/>        {
        /// <br/>            "type": "GenerateChangeHistoryFunction"
        /// <br/>        },
        /// <br/>        {
        /// <br/>            "type": "IssueReindexFunction"
        /// <br/>        },
        /// <br/>        {
        /// <br/>            "type": "FireIssueEventFunction",
        /// <br/>            "configuration": {
        /// <br/>                "event": {
        /// <br/>                    "id": "13",
        /// <br/>                    "name": "issue_generic"
        /// <br/>                }
        /// <br/>            }
        /// <br/>        }
        /// <br/>    ]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postFunctions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CreateWorkflowTransitionRule> PostFunctions { get; set; }

        /// <summary>
        /// The workflow validators.
        /// <br/>
        /// <br/>**Note:** The default permission validator is always added to the *initial* transition, as in:
        /// <br/>
        /// <br/>    "validators": [
        /// <br/>        {
        /// <br/>            "type": "PermissionValidator",
        /// <br/>            "configuration": {
        /// <br/>                "permissionKey": "CREATE_ISSUES"
        /// <br/>            }
        /// <br/>        }
        /// <br/>    ]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validators", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CreateWorkflowTransitionRule> Validators { get; set; }

    }

    /// <summary>
    /// The details of a transition screen.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CreateWorkflowTransitionScreenDetails
    {

        /// <summary>
        /// The ID of the screen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

    }

    /// <summary>
    /// Details about a created issue or subtask.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CreatedIssue
    {

        /// <summary>
        /// The ID of the created issue or subtask.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The key of the created issue or subtask.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The URL of the created issue or subtask.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        /// <summary>
        /// The response code and messages related to any requested transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NestedResponse Transition { get; set; }

        /// <summary>
        /// The response code and messages related to any requested watchers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("watchers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NestedResponse Watchers { get; set; }

    }

    /// <summary>
    /// Details about the issues created and the errors for requests that failed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CreatedIssues
    {

        /// <summary>
        /// Error details for failed issue creation requests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BulkOperationErrorResult> Errors { get; set; }

        /// <summary>
        /// Details of the issues created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CreatedIssue> Issues { get; set; }

    }

    /// <summary>
    /// A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomContextVariable
    {

        /// <summary>
        /// Type of custom context variable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details of configurations for a custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldConfigurations
    {

        /// <summary>
        /// The list of custom field configuration details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configurations", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<ContextualConfiguration> Configurations { get; set; } = new System.Collections.ObjectModel.Collection<ContextualConfiguration>();

    }

    /// <summary>
    /// The details of a custom field context.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContext
    {

        /// <summary>
        /// The description of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// Whether the context apply to all issue types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAnyIssueType", Required = Newtonsoft.Json.Required.Always)]
        public bool IsAnyIssueType { get; set; }

        /// <summary>
        /// Whether the context is global.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isGlobalContext", Required = Newtonsoft.Json.Required.Always)]
        public bool IsGlobalContext { get; set; }

        /// <summary>
        /// The name of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

    }

    /// <summary>
    /// The default value for a cascading select custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContextDefaultValue
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The default value for a Date custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContextDefaultValueDate
    {

        /// <summary>
        /// The default date in ISO format. Ignored if `useCurrent` is true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

        /// <summary>
        /// Whether to use the current date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("useCurrent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UseCurrent { get; set; } = false;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The default value for a date time custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContextDefaultValueDateTime
    {

        /// <summary>
        /// The default date-time in ISO format. Ignored if `useCurrent` is true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

        /// <summary>
        /// Whether to use the current date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("useCurrent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UseCurrent { get; set; } = false;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Default value for a float (number) custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContextDefaultValueFloat
    {

        /// <summary>
        /// The default floating-point number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
        public double Number { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The default value for a Forge date time custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContextDefaultValueForgeDateTimeField
    {

        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        public string ContextId { get; set; }

        /// <summary>
        /// The default date-time in ISO format. Ignored if `useCurrent` is true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

        /// <summary>
        /// Whether to use the current date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("useCurrent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UseCurrent { get; set; } = false;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The default value for a Forge group custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContextDefaultValueForgeGroupField
    {

        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        public string ContextId { get; set; }

        /// <summary>
        /// The ID of the the default group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Always)]
        public string GroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The default value for a Forge collection of groups custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContextDefaultValueForgeMultiGroupField
    {

        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        public string ContextId { get; set; }

        /// <summary>
        /// The IDs of the default groups.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> GroupIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The default text for a Forge collection of strings custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContextDefaultValueForgeMultiStringField
    {

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

        /// <summary>
        /// List of string values. The maximum length for a value is 254 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Values { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Defaults for a Forge collection of users custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContextDefaultValueForgeMultiUserField
    {

        /// <summary>
        /// The IDs of the default users.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> AccountIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        public string ContextId { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Default value for a Forge number custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContextDefaultValueForgeNumberField
    {

        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        public string ContextId { get; set; }

        /// <summary>
        /// The default floating-point number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
        public double Number { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The default value for a Forge object custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContextDefaultValueForgeObjectField
    {

        /// <summary>
        /// The default JSON object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("object", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Object { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The default text for a Forge string custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContextDefaultValueForgeStringField
    {

        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        public string ContextId { get; set; }

        /// <summary>
        /// The default text. The maximum length is 254 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Defaults for a Forge user custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContextDefaultValueForgeUserField
    {

        /// <summary>
        /// The ID of the default user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        public string AccountId { get; set; }

        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        public string ContextId { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("userFilter", Required = Newtonsoft.Json.Required.Always)]
        public UserFilter UserFilter { get; set; } = new UserFilter();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Default value for a labels custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContextDefaultValueLabels
    {

        /// <summary>
        /// The default labels value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> Labels { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The default value for a User Picker (multiple) custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContextDefaultValueMultiUserPicker
    {

        /// <summary>
        /// The IDs of the default users.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> AccountIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        public string ContextId { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The default value for a multiple group picker custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContextDefaultValueMultipleGroupPicker
    {

        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        public string ContextId { get; set; }

        /// <summary>
        /// The IDs of the default groups.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> GroupIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The default value for a multi-select custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContextDefaultValueMultipleOption
    {

        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        public string ContextId { get; set; }

        /// <summary>
        /// The list of IDs of the default options.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("optionIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> OptionIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The default value for a multiple version picker custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContextDefaultValueMultipleVersionPicker
    {

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

        /// <summary>
        /// The IDs of the default versions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> VersionIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The order the pickable versions are displayed in. If not provided, the released-first order is used. Available version orders are `"releasedFirst"` and `"unreleasedFirst"`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionOrder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionOrder { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The default value for a project custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContextDefaultValueProject
    {

        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        public string ContextId { get; set; }

        /// <summary>
        /// The ID of the default project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.Always)]
        public string ProjectId { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The default text for a read only custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContextDefaultValueReadOnly
    {

        /// <summary>
        /// The default text. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The default value for a group picker custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContextDefaultValueSingleGroupPicker
    {

        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        public string ContextId { get; set; }

        /// <summary>
        /// The ID of the the default group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Always)]
        public string GroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The default value for a single select custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContextDefaultValueSingleOption
    {

        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        public string ContextId { get; set; }

        /// <summary>
        /// The ID of the default option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("optionId", Required = Newtonsoft.Json.Required.Always)]
        public string OptionId { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The default value for a version picker custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContextDefaultValueSingleVersionPicker
    {

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

        /// <summary>
        /// The ID of the default version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionId", Required = Newtonsoft.Json.Required.Always)]
        public string VersionId { get; set; }

        /// <summary>
        /// The order the pickable versions are displayed in. If not provided, the released-first order is used. Available version orders are `"releasedFirst"` and `"unreleasedFirst"`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionOrder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionOrder { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The default text for a text area custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContextDefaultValueTextArea
    {

        /// <summary>
        /// The default text. The maximum length is 32767 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The default text for a text custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContextDefaultValueTextField
    {

        /// <summary>
        /// The default text. The maximum length is 254 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The default value for a URL custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContextDefaultValueURL
    {

        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        public string ContextId { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

        /// <summary>
        /// The default URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        public string Url { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Default values to update.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContextDefaultValueUpdate
    {

        [Newtonsoft.Json.JsonProperty("defaultValues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DefaultValues { get; set; }

    }

    /// <summary>
    /// Details of the custom field options for a context.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContextOption
    {

        /// <summary>
        /// Whether the option is disabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disabled", Required = Newtonsoft.Json.Required.Always)]
        public bool Disabled { get; set; }

        /// <summary>
        /// The ID of the custom field option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// For cascading options, the ID of the custom field option containing the cascading option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("optionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OptionId { get; set; }

        /// <summary>
        /// The value of the custom field option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public string Value { get; set; }

    }

    /// <summary>
    /// Details of a context to project association.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContextProjectMapping
    {

        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        public string ContextId { get; set; }

        /// <summary>
        /// Whether context is global.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isGlobalContext", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsGlobalContext { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectId { get; set; }

    }

    /// <summary>
    /// Defaults for a User Picker (single) custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContextSingleUserPickerDefaults
    {

        /// <summary>
        /// The ID of the default user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        public string AccountId { get; set; }

        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        public string ContextId { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("userFilter", Required = Newtonsoft.Json.Required.Always)]
        public UserFilter UserFilter { get; set; } = new UserFilter();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details of a custom field context.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldContextUpdateDetails
    {

        /// <summary>
        /// The description of the custom field context. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the custom field context. The name must be unique. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// A list of custom field options for a context.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldCreatedContextOptionsList
    {

        /// <summary>
        /// The created custom field options.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomFieldContextOption> Options { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldDefinitionJsonBean
    {

        /// <summary>
        /// The description of the custom field, which is displayed in Jira.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the custom field, which is displayed in Jira. This is not the unique identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// The searcher defines the way the field is searched in Jira. For example, *com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher*.  
        /// <br/>The search UI (basic search and JQL search) will display different operations and values for the field, based on the field searcher. You must specify a searcher that is valid for the field type, as listed below (abbreviated values shown):
        /// <br/>
        /// <br/> *  `cascadingselect`: `cascadingselectsearcher`
        /// <br/> *  `datepicker`: `daterange`
        /// <br/> *  `datetime`: `datetimerange`
        /// <br/> *  `float`: `exactnumber` or `numberrange`
        /// <br/> *  `grouppicker`: `grouppickersearcher`
        /// <br/> *  `importid`: `exactnumber` or `numberrange`
        /// <br/> *  `labels`: `labelsearcher`
        /// <br/> *  `multicheckboxes`: `multiselectsearcher`
        /// <br/> *  `multigrouppicker`: `multiselectsearcher`
        /// <br/> *  `multiselect`: `multiselectsearcher`
        /// <br/> *  `multiuserpicker`: `userpickergroupsearcher`
        /// <br/> *  `multiversion`: `versionsearcher`
        /// <br/> *  `project`: `projectsearcher`
        /// <br/> *  `radiobuttons`: `multiselectsearcher`
        /// <br/> *  `readonlyfield`: `textsearcher`
        /// <br/> *  `select`: `multiselectsearcher`
        /// <br/> *  `textarea`: `textsearcher`
        /// <br/> *  `textfield`: `textsearcher`
        /// <br/> *  `url`: `exacttextsearcher`
        /// <br/> *  `userpicker`: `userpickergroupsearcher`
        /// <br/> *  `version`: `versionsearcher`
        /// <br/>
        /// <br/>If no searcher is provided, the field isn't searchable. However, [Forge custom fields](https://developer.atlassian.com/platform/forge/manifest-reference/modules/#jira-custom-field-type--beta-) have a searcher set automatically, so are always searchable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searcherKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomFieldDefinitionJsonBeanSearcherKey SearcherKey { get; set; }

        /// <summary>
        /// The type of the custom field. These built-in custom field types are available:
        /// <br/>
        /// <br/> *  `cascadingselect`: Enables values to be selected from two levels of select lists (value: `com.atlassian.jira.plugin.system.customfieldtypes:cascadingselect`)
        /// <br/> *  `datepicker`: Stores a date using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`)
        /// <br/> *  `datetime`: Stores a date with a time component (value: `com.atlassian.jira.plugin.system.customfieldtypes:datetime`)
        /// <br/> *  `float`: Stores and validates a numeric (floating point) input (value: `com.atlassian.jira.plugin.system.customfieldtypes:float`)
        /// <br/> *  `grouppicker`: Stores a user group using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:grouppicker`)
        /// <br/> *  `importid`: A read-only field that stores the ID the issue had in the system it was imported from (value: `com.atlassian.jira.plugin.system.customfieldtypes:importid`)
        /// <br/> *  `labels`: Stores labels (value: `com.atlassian.jira.plugin.system.customfieldtypes:labels`)
        /// <br/> *  `multicheckboxes`: Stores multiple values using checkboxes (value: ``)
        /// <br/> *  `multigrouppicker`: Stores multiple user groups using a picker control (value: ``)
        /// <br/> *  `multiselect`: Stores multiple values using a select list (value: `com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes`)
        /// <br/> *  `multiuserpicker`: Stores multiple users using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:multigrouppicker`)
        /// <br/> *  `multiversion`: Stores multiple versions from the versions available in a project using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:multiversion`)
        /// <br/> *  `project`: Stores a project from a list of projects that the user is permitted to view (value: `com.atlassian.jira.plugin.system.customfieldtypes:project`)
        /// <br/> *  `radiobuttons`: Stores a value using radio buttons (value: `com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons`)
        /// <br/> *  `readonlyfield`: Stores a read-only text value, which can only be populated via the API (value: `com.atlassian.jira.plugin.system.customfieldtypes:readonlyfield`)
        /// <br/> *  `select`: Stores a value from a configurable list of options (value: `com.atlassian.jira.plugin.system.customfieldtypes:select`)
        /// <br/> *  `textarea`: Stores a long text string using a multiline text area (value: `com.atlassian.jira.plugin.system.customfieldtypes:textarea`)
        /// <br/> *  `textfield`: Stores a text string using a single-line text box (value: `com.atlassian.jira.plugin.system.customfieldtypes:textfield`)
        /// <br/> *  `url`: Stores a URL (value: `com.atlassian.jira.plugin.system.customfieldtypes:url`)
        /// <br/> *  `userpicker`: Stores a user using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:userpicker`)
        /// <br/> *  `version`: Stores a version using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:version`)
        /// <br/>
        /// <br/>To create a field based on a [Forge custom field type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/#jira-custom-field-type--beta-), use the ID of the Forge custom field type as the value. For example, `ari:cloud:ecosystem::extension/e62f20a2-4b61-4dbe-bfb9-9a88b5e3ac84/548c5df1-24aa-4f7c-bbbb-3038d947cb05/static/my-cf-type-key`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Details of a custom option for a field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldOption
    {

        /// <summary>
        /// The URL of these custom field option details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The value of the custom field option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    /// <summary>
    /// Details of a custom field option to create.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldOptionCreate
    {

        /// <summary>
        /// Whether the option is disabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Disabled { get; set; }

        /// <summary>
        /// For cascading options, the ID of a parent option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("optionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OptionId { get; set; }

        /// <summary>
        /// The value of the custom field option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public string Value { get; set; }

    }

    /// <summary>
    /// Details of a custom field option for a context.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldOptionUpdate
    {

        /// <summary>
        /// Whether the option is disabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Disabled { get; set; }

        /// <summary>
        /// The ID of the custom field option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The value of the custom field option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    /// <summary>
    /// Defines the payload for the custom field definitions. See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issue-fields/\#api-rest-api-3-field-post
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldPayload
    {

        /// <summary>
        /// The type of the custom field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cfType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CfType { get; set; }

        /// <summary>
        /// The description of the custom field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the custom field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The strategy to use when there is a conflict with an existing custom field. FAIL - Fail execution, this always needs to be unique; USE - Use the existing entity and ignore new entity parameters
        /// </summary>
        [Newtonsoft.Json.JsonProperty("onConflict", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomFieldPayloadOnConflict OnConflict { get; set; }

        [Newtonsoft.Json.JsonProperty("pcri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier Pcri { get; set; }

        /// <summary>
        /// Allows an overwrite to declare the new Custom Field to be created as a GLOBAL-scoped field. Leave this as empty or null to use the project's default scope.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomFieldPayloadScope Scope { get; set; }

        /// <summary>
        /// The searcher key of the custom field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searcherKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearcherKey { get; set; }

    }

    /// <summary>
    /// Details about the replacement for a deleted version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldReplacement
    {

        /// <summary>
        /// The ID of the custom field in which to replace the version number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customFieldId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long CustomFieldId { get; set; }

        /// <summary>
        /// The version number to use as a replacement for the deleted version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moveTo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long MoveTo { get; set; }

    }

    /// <summary>
    /// A list of custom field options for a context.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldUpdatedContextOptionsList
    {

        /// <summary>
        /// The updated custom field options.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomFieldOptionUpdate> Options { get; set; }

    }

    /// <summary>
    /// A list of issue IDs and the value to update a custom field to.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldValueUpdate
    {

        /// <summary>
        /// The list of issue IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<long> IssueIds { get; set; } = new System.Collections.ObjectModel.Collection<long>();

        /// <summary>
        /// The value for the custom field. The value must be compatible with the [custom field type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#data-types) as follows:
        /// <br/>
        /// <br/> *  `string` the value must be a string.
        /// <br/> *  `number` the value must be a number.
        /// <br/> *  `datetime` the value must be a string that represents a date in the ISO format or the simplified extended ISO format. For example, `"2023-01-18T12:00:00-03:00"` or `"2023-01-18T12:00:00.000Z"`. However, the milliseconds part is ignored.
        /// <br/> *  `user` the value must be an object that contains the `accountId` field.
        /// <br/> *  `group` the value must be an object that contains the group `name` or `groupId` field. Because group names can change, we recommend using `groupId`.
        /// <br/>
        /// <br/>A list of appropriate values must be provided if the field is of the `list` [collection type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#collection-types).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public object Value { get; set; }

    }

    /// <summary>
    /// Details of updates for a custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomFieldValueUpdateDetails
    {

        /// <summary>
        /// The list of custom field update details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomFieldValueUpdate> Updates { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomTemplateOptions
    {

        /// <summary>
        /// Enable screen delegated admin support for the template. This means screen and associated schemes will be copied rather than referenced.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableScreenDelegatedAdminSupport", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableScreenDelegatedAdminSupport { get; set; }

        /// <summary>
        /// Enable workflow delegated admin support for the template. This means workflows and workflow schemes will be copied rather than referenced.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableWorkflowDelegatedAdminSupport", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableWorkflowDelegatedAdminSupport { get; set; }

    }

    /// <summary>
    /// The specific request object for creating a project with template.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomTemplateRequestDTO
    {

        [Newtonsoft.Json.JsonProperty("boards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BoardsPayload Boards { get; set; }

        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FieldCapabilityPayload Field { get; set; }

        [Newtonsoft.Json.JsonProperty("issueType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueTypeProjectCreatePayload IssueType { get; set; }

        [Newtonsoft.Json.JsonProperty("notification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NotificationSchemePayload Notification { get; set; }

        [Newtonsoft.Json.JsonProperty("permissionScheme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PermissionPayloadDTO PermissionScheme { get; set; }

        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectPayload Project { get; set; }

        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RolesCapabilityPayload Role { get; set; }

        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScopePayload Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("security", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SecuritySchemePayload Security { get; set; }

        [Newtonsoft.Json.JsonProperty("workflow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowCapabilityPayload Workflow { get; set; }

    }

    /// <summary>
    /// Project Details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomTemplatesProjectDetails
    {

        /// <summary>
        /// The access level of the project. Only used by team-managed project
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accessLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomTemplatesProjectDetailsAccessLevel AccessLevel { get; set; }

        /// <summary>
        /// Additional properties of the project
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalProperties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> AdditionalProperties { get; set; }

        /// <summary>
        /// The default assignee when creating issues in the project
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assigneeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomTemplatesProjectDetailsAssigneeType AssigneeType { get; set; }

        /// <summary>
        /// The ID of the project's avatar. Use the \[Get project avatars\](\#api-rest-api-3-project-projectIdOrKey-avatar-get) operation to list the available avatars in a project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long AvatarId { get; set; }

        /// <summary>
        /// The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-2-projectCategory-get) operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("categoryId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long CategoryId { get; set; }

        /// <summary>
        /// Brief description of the project
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Whether components are enabled for the project. Only used by company-managed project
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableComponents", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableComponents { get; set; } = false;

        /// <summary>
        /// Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The default language for the project
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }

        /// <summary>
        /// The account ID of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Cannot be provided with `lead`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("leadAccountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LeadAccountId { get; set; }

        /// <summary>
        /// Name of the project
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A link to information about this project, such as project documentation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

    }

    /// <summary>
    /// Details of a dashboard.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Dashboard
    {

        /// <summary>
        /// The automatic refresh interval for the dashboard in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("automaticRefreshMs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AutomaticRefreshMs { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The details of any edit share permissions for the dashboard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("editPermissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SharePermission> EditPermissions { get; set; }

        /// <summary>
        /// The ID of the dashboard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Whether the dashboard is selected as a favorite by the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isFavourite", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsFavourite { get; set; }

        /// <summary>
        /// Whether the current user has permission to edit the dashboard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isWritable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsWritable { get; set; }

        /// <summary>
        /// The name of the dashboard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The owner of the dashboard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserBean Owner { get; set; }

        /// <summary>
        /// The number of users who have this dashboard as a favorite.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("popularity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Popularity { get; set; }

        /// <summary>
        /// The rank of this dashboard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rank", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Rank { get; set; }

        /// <summary>
        /// The URL of these dashboard details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The details of any view share permissions for the dashboard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sharePermissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SharePermission> SharePermissions { get; set; }

        /// <summary>
        /// Whether the current dashboard is system dashboard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("systemDashboard", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SystemDashboard { get; set; }

        /// <summary>
        /// The URL of the dashboard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("view", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string View { get; set; }

    }

    /// <summary>
    /// Details of a dashboard.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class DashboardDetails
    {

        /// <summary>
        /// The description of the dashboard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The edit permissions for the dashboard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("editPermissions", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<SharePermission> EditPermissions { get; set; } = new System.Collections.ObjectModel.Collection<SharePermission>();

        /// <summary>
        /// The name of the dashboard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// The share permissions for the dashboard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sharePermissions", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<SharePermission> SharePermissions { get; set; } = new System.Collections.ObjectModel.Collection<SharePermission>();

    }

    /// <summary>
    /// Details of a gadget.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class DashboardGadget
    {

        /// <summary>
        /// The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DashboardGadgetColor Color { get; set; }

        /// <summary>
        /// The ID of the gadget instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        /// <summary>
        /// The module key of the gadget type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moduleKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModuleKey { get; set; }

        /// <summary>
        /// The position of the gadget.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Always)]
        public DashboardGadgetPosition Position { get; set; } = new DashboardGadgetPosition();

        /// <summary>
        /// The title of the gadget.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        public string Title { get; set; }

        /// <summary>
        /// The URI of the gadget type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

    }

    /// <summary>
    /// Details of a gadget position.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class DashboardGadgetPosition
    {

        [Newtonsoft.Json.JsonProperty("The column position of the gadget.", Required = Newtonsoft.Json.Required.Always)]
        public int The_column_position_of_the_gadget { get; set; }

        [Newtonsoft.Json.JsonProperty("The row position of the gadget.", Required = Newtonsoft.Json.Required.Always)]
        public int The_row_position_of_the_gadget { get; set; }

    }

    /// <summary>
    /// The list of gadgets on the dashboard.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class DashboardGadgetResponse
    {

        /// <summary>
        /// The list of gadgets.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gadgets", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<DashboardGadget> Gadgets { get; set; } = new System.Collections.ObjectModel.Collection<DashboardGadget>();

    }

    /// <summary>
    /// Details of the settings for a dashboard gadget.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class DashboardGadgetSettings
    {

        /// <summary>
        /// The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

        /// <summary>
        /// Whether to ignore the validation of module key and URI. For example, when a gadget is created that is a part of an application that isn't installed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ignoreUriAndModuleKeyValidation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IgnoreUriAndModuleKeyValidation { get; set; }

        /// <summary>
        /// The module key of the gadget type. Can't be provided with `uri`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moduleKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModuleKey { get; set; }

        /// <summary>
        /// The position of the gadget. When the gadget is placed into the position, other gadgets in the same column are moved down to accommodate it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DashboardGadgetPosition Position { get; set; }

        /// <summary>
        /// The title of the gadget.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// The URI of the gadget type. Can't be provided with `moduleKey`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

    }

    /// <summary>
    /// The details of the gadget to update.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class DashboardGadgetUpdateRequest
    {

        /// <summary>
        /// The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

        /// <summary>
        /// The position of the gadget.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DashboardGadgetPosition Position { get; set; }

        /// <summary>
        /// The title of the gadget.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

    }

    /// <summary>
    /// The data classification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class DataClassificationLevelsBean
    {

        /// <summary>
        /// The data classifications.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("classifications", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DataClassificationTagBean> Classifications { get; set; }

    }

    /// <summary>
    /// The data classification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class DataClassificationTagBean
    {

        /// <summary>
        /// The color of the data classification object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

        /// <summary>
        /// The description of the data classification object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The guideline of the data classification object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guideline", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Guideline { get; set; }

        /// <summary>
        /// The ID of the data classification object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the data classification object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The rank of the data classification object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rank", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Rank { get; set; }

        /// <summary>
        /// The status of the data classification object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public string Status { get; set; }

    }

    /// <summary>
    /// List issues archived within a specified date range.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class DateRangeFilterRequest
    {

        /// <summary>
        /// List issues archived after a specified date, passed in the YYYY-MM-DD format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateAfter", Required = Newtonsoft.Json.Required.Always)]
        public string DateAfter { get; set; }

        /// <summary>
        /// List issues archived before a specified date provided in the YYYY-MM-DD format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateBefore", Required = Newtonsoft.Json.Required.Always)]
        public string DateBefore { get; set; }

    }

    /// <summary>
    /// Details of scheme and new default level.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class DefaultLevelValue
    {

        /// <summary>
        /// The ID of the issue security level to set as default for the specified scheme. Providing null will reset the default level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultLevelId", Required = Newtonsoft.Json.Required.Always)]
        public string DefaultLevelId { get; set; }

        /// <summary>
        /// The ID of the issue security scheme to set default level for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueSecuritySchemeId", Required = Newtonsoft.Json.Required.Always)]
        public string IssueSecuritySchemeId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details of the scope of the default sharing for new filters and dashboards.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class DefaultShareScope
    {

        /// <summary>
        /// The scope of the default sharing for new filters and dashboards:
        /// <br/>
        /// <br/> *  `AUTHENTICATED` Shared with all logged-in users.
        /// <br/> *  `GLOBAL` Shared with all logged-in users. This shows as `AUTHENTICATED` in the response.
        /// <br/> *  `PRIVATE` Not shared with any users.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DefaultShareScopeScope Scope { get; set; }

    }

    /// <summary>
    /// Details about the default workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class DefaultWorkflow
    {

        /// <summary>
        /// Whether a draft workflow scheme is created or updated when updating an active workflow scheme. The draft is updated with the new default workflow. Defaults to `false`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updateDraftIfNeeded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UpdateDraftIfNeeded { get; set; }

        /// <summary>
        /// The name of the workflow to set as the default workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflow", Required = Newtonsoft.Json.Required.Always)]
        public string Workflow { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class DefaultWorkflowEditorResponse
    {

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DefaultWorkflowEditorResponseValue Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class DeleteAndReplaceVersionBean
    {

        /// <summary>
        /// An array of custom field IDs (`customFieldId`) and version IDs (`moveTo`) to update when the fields contain the deleted version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customFieldReplacementList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomFieldReplacement> CustomFieldReplacementList { get; set; }

        /// <summary>
        /// The ID of the version to update `affectedVersion` to when the field contains the deleted version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moveAffectedIssuesTo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long MoveAffectedIssuesTo { get; set; }

        /// <summary>
        /// The ID of the version to update `fixVersion` to when the field contains the deleted version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moveFixIssuesTo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long MoveFixIssuesTo { get; set; }

    }

    /// <summary>
    /// Details about a workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class DeprecatedWorkflow
    {

        [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Default { get; set; }

        /// <summary>
        /// The description of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The datetime the workflow was last modified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDate { get; set; }

        /// <summary>
        /// This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedUser", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedUser { get; set; }

        /// <summary>
        /// The account ID of the user that last modified the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedUserAccountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedUserAccountId { get; set; }

        /// <summary>
        /// The name of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The scope where this workflow applies
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        /// <summary>
        /// The number of steps included in the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("steps", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Steps { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class DetailedErrorCollection
    {

        /// <summary>
        /// Map of objects representing additional details for an error
        /// </summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Details { get; set; }

        /// <summary>
        /// The list of error messages produced by this operation. For example, "input parameter 'key' must be provided"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ErrorMessages { get; set; }

        /// <summary>
        /// The list of errors by parameter returned by the operation. For example,"projectKey": "Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters."
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Errors { get; set; }

    }

    /// <summary>
    /// The current version details of this workflow scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class DocumentVersion
    {

        /// <summary>
        /// The version UUID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The version number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long VersionNumber { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class DuplicatePlanRequest
    {

        /// <summary>
        /// The plan name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

    }

    /// <summary>
    /// Request to edit a custom template
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class EditTemplateRequest
    {

        /// <summary>
        /// The description of the template
        /// </summary>
        [Newtonsoft.Json.JsonProperty("templateDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TemplateDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("templateGenerationOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomTemplateOptions TemplateGenerationOptions { get; set; }

        /// <summary>
        /// The unique identifier of the template
        /// </summary>
        [Newtonsoft.Json.JsonProperty("templateKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TemplateKey { get; set; }

        /// <summary>
        /// The name of the template
        /// </summary>
        [Newtonsoft.Json.JsonProperty("templateName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TemplateName { get; set; }

    }

    /// <summary>
    /// An entity property, for more information see [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class EntityProperty
    {

        /// <summary>
        /// The key of the property. Required on create and update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The value of the property. Required on create and update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class EntityPropertyDetails
    {

        /// <summary>
        /// The entity property ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.Always)]
        public double EntityId { get; set; }

        /// <summary>
        /// The entity property key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; }

        /// <summary>
        /// The new value of the entity property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Error
    {

        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Count { get; set; }

        [Newtonsoft.Json.JsonProperty("issueIdsOrKeys", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> IssueIdsOrKeys { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

    }

    /// <summary>
    /// Error messages from an operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ErrorCollection
    {

        /// <summary>
        /// The list of error messages produced by this operation. For example, "input parameter 'key' must be provided"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ErrorMessages { get; set; }

        /// <summary>
        /// The list of errors by parameter returned by the operation. For example,"projectKey": "Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters."
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Errors { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ErrorCollections
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ErrorMessage
    {

        /// <summary>
        /// The error message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        public string Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Errors
    {

        [Newtonsoft.Json.JsonProperty("issueIsSubtask", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Error IssueIsSubtask { get; set; }

        [Newtonsoft.Json.JsonProperty("issuesInArchivedProjects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Error IssuesInArchivedProjects { get; set; }

        [Newtonsoft.Json.JsonProperty("issuesInUnlicensedProjects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Error IssuesInUnlicensedProjects { get; set; }

        [Newtonsoft.Json.JsonProperty("issuesNotFound", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Error IssuesNotFound { get; set; }

        [Newtonsoft.Json.JsonProperty("userDoesNotHavePermission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Error UserDoesNotHavePermission { get; set; }

    }

    /// <summary>
    /// Details about a notification associated with an event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class EventNotification
    {

        /// <summary>
        /// The email address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Expand options that include additional event notification details in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// The custom user or group field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FieldDetails Field { get; set; }

        /// <summary>
        /// The specified group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupName Group { get; set; }

        /// <summary>
        /// The ID of the notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// Identifies the recipients of the notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EventNotificationNotificationType NotificationType { get; set; }

        /// <summary>
        /// As a group's name can change, use of `recipient` is recommended. The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by `notificationType` value. So, when `notificationType` is:
        /// <br/>
        /// <br/> *  `User` The `parameter` is the user account ID.
        /// <br/> *  `Group` The `parameter` is the group name.
        /// <br/> *  `ProjectRole` The `parameter` is the project role ID.
        /// <br/> *  `UserCustomField` The `parameter` is the ID of the custom field.
        /// <br/> *  `GroupCustomField` The `parameter` is the ID of the custom field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parameter { get; set; }

        /// <summary>
        /// The specified project role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectRole ProjectRole { get; set; }

        /// <summary>
        /// The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by the `notificationType` value. So, when `notificationType` is:
        /// <br/>
        /// <br/> *  `User`, `recipient` is the user account ID.
        /// <br/> *  `Group`, `recipient` is the group ID.
        /// <br/> *  `ProjectRole`, `recipient` is the project role ID.
        /// <br/> *  `UserCustomField`, `recipient` is the ID of the custom field.
        /// <br/> *  `GroupCustomField`, `recipient` is the ID of the custom field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipient", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Recipient { get; set; }

        /// <summary>
        /// The specified user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDetails User { get; set; }

    }

    /// <summary>
    /// A priority scheme with less fields to be used in for an API expand response.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ExpandPrioritySchemeBean
    {

        /// <summary>
        /// The ID of the priority scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the priority scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The URL of the priority scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ExpandPrioritySchemePage
    {

        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response for status request for a running/completed export task.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ExportArchivedIssuesTaskProgressResponse
    {

        [Newtonsoft.Json.JsonProperty("fileUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("progress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Progress { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        [Newtonsoft.Json.JsonProperty("submittedTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset SubmittedTime { get; set; }

        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskId { get; set; }

    }

    /// <summary>
    /// Details about a failed webhook.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FailedWebhook
    {

        /// <summary>
        /// The webhook body.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body { get; set; }

        /// <summary>
        /// The time the webhook was added to the list of failed webhooks (that is, the time of the last failed retry).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("failureTime", Required = Newtonsoft.Json.Required.Always)]
        public long FailureTime { get; set; }

        /// <summary>
        /// The webhook ID, as sent in the `X-Atlassian-Webhook-Identifier` header with the webhook.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The original webhook destination.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        public string Url { get; set; }

    }

    /// <summary>
    /// A page of failed webhooks.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FailedWebhooks
    {

        /// <summary>
        /// The maximum number of items on the page. If the list of values is shorter than this number, then there are no more pages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.Always)]
        public int MaxResults { get; set; }

        /// <summary>
        /// The URL to the next page of results. Present only if the request returned at least one result.The next page may be empty at the time of receiving the response, but new failed webhooks may appear in time. You can save the URL to the next page and query for new results periodically (for example, every hour).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Next { get; set; }

        /// <summary>
        /// The list of webhooks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<FailedWebhook> Values { get; set; } = new System.Collections.ObjectModel.Collection<FailedWebhook>();

    }

    /// <summary>
    /// Details of a field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Field
    {

        /// <summary>
        /// Number of contexts where the field is used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextsCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ContextsCount { get; set; }

        /// <summary>
        /// The description of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// Whether the field is locked.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLocked", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLocked { get; set; }

        /// <summary>
        /// Whether the field is shown on screen or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isUnscreenable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsUnscreenable { get; set; }

        /// <summary>
        /// The key of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("lastUsed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FieldLastUsed LastUsed { get; set; }

        /// <summary>
        /// The name of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// Number of projects where the field is used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectsCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ProjectsCount { get; set; }

        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.Always)]
        public JsonTypeBean Schema { get; set; } = new JsonTypeBean();

        /// <summary>
        /// Number of screens where the field is used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("screensCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ScreensCount { get; set; }

        /// <summary>
        /// The searcher key of the field. Returned for custom fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searcherKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearcherKey { get; set; }

        /// <summary>
        /// The stable ID of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stableId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StableId { get; set; }

        /// <summary>
        /// The display name of the field type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("typeDisplayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeDisplayName { get; set; }

    }

    /// <summary>
    /// Details of field associations with projects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FieldAssociationsRequest
    {

        /// <summary>
        /// Contexts to associate/unassociate the fields with.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("associationContexts", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<AssociationContextObject> AssociationContexts { get; set; } = new System.Collections.ObjectModel.Collection<AssociationContextObject>();

        /// <summary>
        /// Fields to associate/unassociate with projects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<FieldIdentifierObject> Fields { get; set; } = new System.Collections.ObjectModel.Collection<FieldIdentifierObject>();

    }

    /// <summary>
    /// Defines the payload for the fields, screens, screen schemes, issue type screen schemes, field layouts, and field layout schemes
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FieldCapabilityPayload
    {

        /// <summary>
        /// The custom field definitions. See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issue-fields/\#api-rest-api-3-field-post
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customFieldDefinitions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomFieldPayload> CustomFieldDefinitions { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldLayoutScheme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FieldLayoutSchemePayload FieldLayoutScheme { get; set; }

        /// <summary>
        /// The field layouts configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldLayouts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldLayoutPayload> FieldLayouts { get; set; }

        /// <summary>
        /// The issue layouts configuration
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueLayouts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueLayoutPayload> IssueLayouts { get; set; }

        [Newtonsoft.Json.JsonProperty("issueTypeScreenScheme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueTypeScreenSchemePayload IssueTypeScreenScheme { get; set; }

        /// <summary>
        /// The screen schemes See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-screen-schemes/\#api-rest-api-3-screenscheme-post
        /// </summary>
        [Newtonsoft.Json.JsonProperty("screenScheme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ScreenSchemePayload> ScreenScheme { get; set; }

        /// <summary>
        /// The screens. See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-screens/\#api-rest-api-3-screens-post
        /// </summary>
        [Newtonsoft.Json.JsonProperty("screens", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ScreenPayload> Screens { get; set; }

    }

    /// <summary>
    /// A clause that asserts whether a field was changed. For example, `status CHANGED AFTER startOfMonth(-1M)`.See [CHANGED](https://confluence.atlassian.com/x/dgiiLQ#Advancedsearching-operatorsreference-CHANGEDCHANGED) for more information about the CHANGED operator.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FieldChangedClause
    {

        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        public JqlQueryField Field { get; set; } = new JqlQueryField();

        /// <summary>
        /// The operator applied to the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FieldChangedClauseOperator Operator { get; set; }

        /// <summary>
        /// The list of time predicates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("predicates", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<JqlQueryClauseTimePredicate> Predicates { get; set; } = new System.Collections.ObjectModel.Collection<JqlQueryClauseTimePredicate>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details of a field configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FieldConfiguration
    {

        /// <summary>
        /// The description of the field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        /// <summary>
        /// Whether the field configuration is the default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// The name of the field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

    }

    /// <summary>
    /// Details of a field configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FieldConfigurationDetails
    {

        /// <summary>
        /// The description of the field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the field configuration. Must be unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

    }

    /// <summary>
    /// The field configuration for an issue type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FieldConfigurationIssueTypeItem
    {

        /// <summary>
        /// The ID of the field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldConfigurationId", Required = Newtonsoft.Json.Required.Always)]
        public string FieldConfigurationId { get; set; }

        /// <summary>
        /// The ID of the field configuration scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldConfigurationSchemeId", Required = Newtonsoft.Json.Required.Always)]
        public string FieldConfigurationSchemeId { get; set; }

        /// <summary>
        /// The ID of the issue type or *default*. When set to *default* this field configuration issue type item applies to all issue types without a field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeId", Required = Newtonsoft.Json.Required.Always)]
        public string IssueTypeId { get; set; }

    }

    /// <summary>
    /// A field within a field configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FieldConfigurationItem
    {

        /// <summary>
        /// The description of the field within the field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the field within the field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// Whether the field is hidden in the field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isHidden", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsHidden { get; set; }

        /// <summary>
        /// Whether the field is required in the field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isRequired", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsRequired { get; set; }

        /// <summary>
        /// The renderer type for the field within the field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("renderer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Renderer { get; set; }

    }

    /// <summary>
    /// Details of field configuration items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FieldConfigurationItemsDetails
    {

        /// <summary>
        /// Details of fields in a field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldConfigurationItems", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<FieldConfigurationItem> FieldConfigurationItems { get; set; } = new System.Collections.ObjectModel.Collection<FieldConfigurationItem>();

    }

    /// <summary>
    /// Details of a field configuration scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FieldConfigurationScheme
    {

        /// <summary>
        /// The description of the field configuration scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the field configuration scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the field configuration scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

    }

    /// <summary>
    /// Associated field configuration scheme and project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FieldConfigurationSchemeProjectAssociation
    {

        /// <summary>
        /// The ID of the field configuration scheme. If the field configuration scheme ID is `null`, the operation assigns the default field configuration scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldConfigurationSchemeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldConfigurationSchemeId { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.Always)]
        public string ProjectId { get; set; }

    }

    /// <summary>
    /// Project list with assigned field configuration schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FieldConfigurationSchemeProjects
    {

        [Newtonsoft.Json.JsonProperty("fieldConfigurationScheme", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FieldConfigurationScheme FieldConfigurationScheme { get; set; }

        /// <summary>
        /// The IDs of projects using the field configuration scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> ProjectIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    }

    /// <summary>
    /// The field configuration to issue type mapping.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FieldConfigurationToIssueTypeMapping
    {

        /// <summary>
        /// The ID of the field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldConfigurationId", Required = Newtonsoft.Json.Required.Always)]
        public string FieldConfigurationId { get; set; }

        /// <summary>
        /// The ID of the issue type or *default*. When set to *default* this field configuration issue type item applies to all issue types without a field configuration. An issue type can be included only once in a request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeId", Required = Newtonsoft.Json.Required.Always)]
        public string IssueTypeId { get; set; }

    }

    /// <summary>
    /// The metadata describing an issue field for createmeta.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FieldCreateMetadata
    {

        /// <summary>
        /// The list of values allowed in the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowedValues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> AllowedValues { get; set; }

        /// <summary>
        /// The URL that can be used to automatically complete the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoCompleteUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AutoCompleteUrl { get; set; }

        /// <summary>
        /// The configuration properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Configuration { get; set; }

        /// <summary>
        /// The default value of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object DefaultValue { get; set; }

        /// <summary>
        /// The field id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Always)]
        public string FieldId { get; set; }

        /// <summary>
        /// Whether the field has a default value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasDefaultValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasDefaultValue { get; set; }

        /// <summary>
        /// The key of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; }

        /// <summary>
        /// The name of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// The list of operations that can be performed on the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operations", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> Operations { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// Whether the field is required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.Always)]
        public bool Required { get; set; }

        /// <summary>
        /// The data type of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.Always)]
        public JsonTypeBean Schema { get; set; } = new JsonTypeBean();

    }

    /// <summary>
    /// Details about a field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FieldDetails
    {

        /// <summary>
        /// The names that can be used to reference the field in an advanced search. For more information, see [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clauseNames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ClauseNames { get; set; }

        /// <summary>
        /// Whether the field is a custom field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("custom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Custom { get; set; }

        /// <summary>
        /// The ID of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The key of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The name of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Whether the field can be used as a column on the issue navigator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("navigable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Navigable { get; set; }

        /// <summary>
        /// Whether the content of the field can be used to order lists.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Orderable { get; set; }

        /// <summary>
        /// The data schema for the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonTypeBean Schema { get; set; }

        /// <summary>
        /// The scope of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        /// <summary>
        /// Whether the content of the field can be searched.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Searchable { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FieldIdIdentifier : FieldIdentifierObject
    {

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Identifier for a field for example FIELD\_ID.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "type")]
    [JsonInheritanceAttribute("FieldIdIdentifier", typeof(FieldIdIdentifier))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FieldIdentifierObject
    {

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Identifier { get; set; }

    }

    /// <summary>
    /// Information about the most recent use of a field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FieldLastUsed
    {

        /// <summary>
        /// Last used value type:
        /// <br/>
        /// <br/> *  *TRACKED*: field is tracked and a last used date is available.
        /// <br/> *  *NOT\_TRACKED*: field is not tracked, last used date is not available.
        /// <br/> *  *NO\_INFORMATION*: field is tracked, but no last used date is available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FieldLastUsedType Type { get; set; }

        /// <summary>
        /// The date when the value of the field last changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Value { get; set; }

    }

    /// <summary>
    /// Defines the payload for the field layout configuration. See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issue-field-configurations/\#api-rest-api-3-fieldconfiguration-post
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FieldLayoutConfiguration
    {

        /// <summary>
        /// Whether to show the field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Field { get; set; }

        [Newtonsoft.Json.JsonProperty("pcri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier Pcri { get; set; }

        /// <summary>
        /// Whether the field is required
        /// </summary>
        [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Required { get; set; }

    }

    /// <summary>
    /// Defines the payload for the field layouts. See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issue-field-configurations/\#api-group-issue-field-configurations" + fieldlayout is what users would see as "Field Configuration" in Jira's UI - https://support.atlassian.com/jira-cloud-administration/docs/manage-issue-field-configurations/
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FieldLayoutPayload
    {

        /// <summary>
        /// The field layout configuration. See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issue-field-configurations/\#api-rest-api-3-fieldconfiguration-post
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldLayoutConfiguration> Configuration { get; set; }

        /// <summary>
        /// The description of the field layout
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the field layout
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("pcri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier Pcri { get; set; }

    }

    /// <summary>
    /// Defines the payload for the field layout schemes. See "Field Configuration Scheme" - https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issue-field-configurations/\#api-rest-api-3-fieldconfigurationscheme-post https://support.atlassian.com/jira-cloud-administration/docs/configure-a-field-configuration-scheme/
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FieldLayoutSchemePayload
    {

        [Newtonsoft.Json.JsonProperty("defaultFieldLayout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier DefaultFieldLayout { get; set; }

        /// <summary>
        /// The description of the field layout scheme
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// There is a default configuration "fieldlayout" that is applied to all issue types using this scheme that don't have an explicit mapping users can create (or re-use existing) configurations for other issue types and map them to this scheme
        /// </summary>
        [Newtonsoft.Json.JsonProperty("explicitMappings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, ProjectCreateResourceIdentifier> ExplicitMappings { get; set; }

        /// <summary>
        /// The name of the field layout scheme
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("pcri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier Pcri { get; set; }

    }

    /// <summary>
    /// The metadata describing an issue field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FieldMetadata
    {

        /// <summary>
        /// The list of values allowed in the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowedValues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> AllowedValues { get; set; }

        /// <summary>
        /// The URL that can be used to automatically complete the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoCompleteUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AutoCompleteUrl { get; set; }

        /// <summary>
        /// The configuration properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Configuration { get; set; }

        /// <summary>
        /// The default value of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object DefaultValue { get; set; }

        /// <summary>
        /// Whether the field has a default value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasDefaultValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasDefaultValue { get; set; }

        /// <summary>
        /// The key of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; }

        /// <summary>
        /// The name of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// The list of operations that can be performed on the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operations", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> Operations { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// Whether the field is required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.Always)]
        public bool Required { get; set; }

        /// <summary>
        /// The data type of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.Always)]
        public JsonTypeBean Schema { get; set; } = new JsonTypeBean();

    }

    /// <summary>
    /// Details of a field that can be used in advanced searches.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FieldReferenceData
    {

        /// <summary>
        /// Whether the field provide auto-complete suggestions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FieldReferenceDataAuto Auto { get; set; }

        /// <summary>
        /// If the item is a custom field, the ID of the custom field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cfid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cfid { get; set; }

        /// <summary>
        /// Whether this field has been deprecated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deprecated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FieldReferenceDataDeprecated Deprecated { get; set; }

        /// <summary>
        /// The searcher key of the field, only passed when the field is deprecated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deprecatedSearcherKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeprecatedSearcherKey { get; set; }

        /// <summary>
        /// The display name contains the following:
        /// <br/>
        /// <br/> *  for system fields, the field name. For example, `Summary`.
        /// <br/> *  for collapsed custom fields, the field name followed by a hyphen and then the field name and field type. For example, `Component - Component[Dropdown]`.
        /// <br/> *  for other custom fields, the field name followed by a hyphen and then the custom field ID. For example, `Component - cf[10061]`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The valid search operators for the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operators", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Operators { get; set; }

        /// <summary>
        /// Whether the field can be used in a query's `ORDER BY` clause.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FieldReferenceDataOrderable Orderable { get; set; }

        /// <summary>
        /// Whether the content of this field can be searched.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FieldReferenceDataSearchable Searchable { get; set; }

        /// <summary>
        /// The data types of items in the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("types", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Types { get; set; }

        /// <summary>
        /// The field identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    /// <summary>
    /// Details of an operation to perform on a field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FieldUpdateOperation
    {

        /// <summary>
        /// The value to add to the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("add", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Add { get; set; }

        /// <summary>
        /// The field value to copy from another issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("copy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Copy { get; set; }

        /// <summary>
        /// The value to edit in the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("edit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Edit { get; set; }

        /// <summary>
        /// The value to removed from the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remove", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Remove { get; set; }

        /// <summary>
        /// The value to set in the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("set", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Set { get; set; }

    }

    /// <summary>
    /// A clause that asserts the current value of a field. For example, `summary ~ test`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FieldValueClause
    {

        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        public JqlQueryField Field { get; set; } = new JqlQueryField();

        [Newtonsoft.Json.JsonProperty("operand", Required = Newtonsoft.Json.Required.Always)]
        public JqlQueryClauseOperand Operand { get; set; } = new JqlQueryClauseOperand();

        /// <summary>
        /// The operator between the field and operand.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FieldValueClauseOperator Operator { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A clause that asserts a previous value of a field. For example, `status WAS "Resolved" BY currentUser() BEFORE "2019/02/02"`. See [WAS](https://confluence.atlassian.com/x/dgiiLQ#Advancedsearching-operatorsreference-WASWAS) for more information about the WAS operator.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FieldWasClause
    {

        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        public JqlQueryField Field { get; set; } = new JqlQueryField();

        [Newtonsoft.Json.JsonProperty("operand", Required = Newtonsoft.Json.Required.Always)]
        public JqlQueryClauseOperand Operand { get; set; } = new JqlQueryClauseOperand();

        /// <summary>
        /// The operator between the field and operand.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FieldWasClauseOperator Operator { get; set; }

        /// <summary>
        /// The list of time predicates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("predicates", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<JqlQueryClauseTimePredicate> Predicates { get; set; } = new System.Collections.ObjectModel.Collection<JqlQueryClauseTimePredicate>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Key fields from the linked issue.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Fields
    {

        /// <summary>
        /// The assignee of the linked issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDetails Assignee { get; set; }

        /// <summary>
        /// The type of the linked issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueTypeDetails IssueType { get; set; }

        /// <summary>
        /// The type of the linked issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuetype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueTypeDetails Issuetype { get; set; }

        /// <summary>
        /// The priority of the linked issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Priority Priority { get; set; }

        /// <summary>
        /// The status of the linked issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatusDetails Status { get; set; }

        /// <summary>
        /// The summary description of the linked issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Summary { get; set; }

        /// <summary>
        /// The time tracking of the linked issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timetracking", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeTrackingDetails Timetracking { get; set; }

    }

    /// <summary>
    /// Details about a filter.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Filter
    {

        /// <summary>
        /// \[Experimental\] Approximate last used time. Returns the date and time when the filter was last used. Returns `null` if the filter hasn't been used after tracking was enabled. For performance reasons, timestamps aren't updated in real time and therefore may not be exactly accurate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("approximateLastUsed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ApproximateLastUsed { get; set; }

        /// <summary>
        /// A description of the filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The groups and projects that can edit the filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("editPermissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SharePermission> EditPermissions { get; set; }

        /// <summary>
        /// Whether the filter is selected as a favorite.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("favourite", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Favourite { get; set; }

        /// <summary>
        /// The count of how many users have selected this filter as a favorite, including the filter owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("favouritedCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long FavouritedCount { get; set; }

        /// <summary>
        /// The unique identifier for the filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The JQL query for the filter. For example, *project = SSP AND issuetype = Bug*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jql", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Jql { get; set; }

        /// <summary>
        /// The name of the filter. Must be unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// The user who owns the filter. This is defaulted to the creator of the filter, however Jira administrators can change the owner of a shared filter in the admin settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User Owner { get; set; }

        /// <summary>
        /// A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-2-filter-search-get) operation with the filter's JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/2/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri SearchUrl { get; set; }

        /// <summary>
        /// The URL of the filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The groups and projects that the filter is shared with.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sharePermissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SharePermission> SharePermissions { get; set; }

        /// <summary>
        /// A paginated list of the users that the filter is shared with. This includes users that are members of the groups or can browse the projects that the filter is shared with.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sharedUsers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserList SharedUsers { get; set; }

        /// <summary>
        /// A paginated list of the users that are subscribed to the filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subscriptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterSubscriptionsList Subscriptions { get; set; }

        /// <summary>
        /// A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter=10100*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("viewUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri ViewUrl { get; set; }

    }

    /// <summary>
    /// Details of a filter.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FilterDetails
    {

        /// <summary>
        /// \[Experimental\] Approximate last used time. Returns the date and time when the filter was last used. Returns `null` if the filter hasn't been used after tracking was enabled. For performance reasons, timestamps aren't updated in real time and therefore may not be exactly accurate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("approximateLastUsed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ApproximateLastUsed { get; set; }

        /// <summary>
        /// The description of the filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The groups and projects that can edit the filter. This can be specified when updating a filter, but not when creating a filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("editPermissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SharePermission> EditPermissions { get; set; }

        /// <summary>
        /// Expand options that include additional filter details in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// Whether the filter is selected as a favorite by any users, not including the filter owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("favourite", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Favourite { get; set; }

        /// <summary>
        /// The count of how many users have selected this filter as a favorite, including the filter owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("favouritedCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long FavouritedCount { get; set; }

        /// <summary>
        /// The unique identifier for the filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The JQL query for the filter. For example, *project = SSP AND issuetype = Bug*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jql", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Jql { get; set; }

        /// <summary>
        /// The name of the filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// The user who owns the filter. Defaults to the creator of the filter, however, Jira administrators can change the owner of a shared filter in the admin settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User Owner { get; set; }

        /// <summary>
        /// A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-2-filter-search-get) operation with the filter's JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/2/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri SearchUrl { get; set; }

        /// <summary>
        /// The URL of the filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The groups and projects that the filter is shared with. This can be specified when updating a filter, but not when creating a filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sharePermissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SharePermission> SharePermissions { get; set; }

        /// <summary>
        /// The users that are subscribed to the filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subscriptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FilterSubscription> Subscriptions { get; set; }

        /// <summary>
        /// A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter=10100*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("viewUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri ViewUrl { get; set; }

    }

    /// <summary>
    /// Details of a user or group subscribing to a filter.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FilterSubscription
    {

        /// <summary>
        /// The group subscribing to filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupName Group { get; set; }

        /// <summary>
        /// The ID of the filter subscription.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The user subscribing to filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User User { get; set; }

    }

    /// <summary>
    /// A paginated list of subscriptions to a filter.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FilterSubscriptionsList
    {

        /// <summary>
        /// The index of the last item returned on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("end-index", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EndIndex { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FilterSubscription> Items { get; set; }

        /// <summary>
        /// The maximum number of results that could be on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("max-results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// The number of items on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Size { get; set; }

        /// <summary>
        /// The index of the first item returned on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start-index", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StartIndex { get; set; }

    }

    /// <summary>
    /// A group found in a search.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FoundGroup
    {

        /// <summary>
        /// Avatar url for the group/team if present.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AvatarUrl { get; set; }

        /// <summary>
        /// The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupId { get; set; }

        /// <summary>
        /// The group name with the matched query string highlighted with the HTML bold tag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("html", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html { get; set; }

        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GroupLabel> Labels { get; set; }

        /// <summary>
        /// Describes who/how the team is managed. The possible values are  
        /// <br/>\* external - when team is synced from an external directory like SCIM or HRIS, and team members cannot be modified.  
        /// <br/>\* admins - when a team is managed by an admin (team members can only be modified by admins).  
        /// <br/>\* team-members - managed by existing team members, new members need to be invited to join.  
        /// <br/>\* open - anyone can join or modify this team.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("managedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FoundGroupManagedBy ManagedBy { get; set; }

        /// <summary>
        /// The name of the group. The name of a group is mutable, to reliably identify a group use ``groupId`.`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Describes the type of group. The possible values are  
        /// <br/>\* team-collaboration - A platform team managed in people directory.  
        /// <br/>\* userbase-group - a group of users created in adminhub.  
        /// <br/>\* admin-oversight - currently unused.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usageType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FoundGroupUsageType UsageType { get; set; }

    }

    /// <summary>
    /// The list of groups found in a search, including header text (Showing X of Y matching groups) and total of matched groups.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FoundGroups
    {

        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FoundGroup> Groups { get; set; }

        /// <summary>
        /// Header text indicating the number of groups in the response and the total number of groups found in the search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Header { get; set; }

        /// <summary>
        /// The total number of groups found in the search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Total { get; set; }

    }

    /// <summary>
    /// The list of users found in a search, including header text (Showing X of Y matching users) and total of matched users.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FoundUsers
    {

        /// <summary>
        /// Header text indicating the number of users in the response and the total number of users found in the search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Header { get; set; }

        /// <summary>
        /// The total number of users found in the search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Total { get; set; }

        [Newtonsoft.Json.JsonProperty("users", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserPickerUser> Users { get; set; }

    }

    /// <summary>
    /// List of users and groups found in a search.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FoundUsersAndGroups
    {

        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FoundGroups Groups { get; set; }

        [Newtonsoft.Json.JsonProperty("users", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FoundUsers Users { get; set; }

    }

    /// <summary>
    /// The payload for the layout details for the start end of a transition
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FromLayoutPayload
    {

        /// <summary>
        /// The port that the transition can be made from
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fromPort", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FromPort { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier Status { get; set; }

        /// <summary>
        /// The port that the transition goes to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("toPortOverride", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ToPortOverride { get; set; }

    }

    /// <summary>
    /// An operand that is a function. See [Advanced searching - functions reference](https://confluence.atlassian.com/x/dwiiLQ) for more information about JQL functions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FunctionOperand
    {

        /// <summary>
        /// The list of function arguments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("arguments", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> Arguments { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// Encoded operand, which can be used directly in a JQL query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("encodedOperand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EncodedOperand { get; set; }

        /// <summary>
        /// The name of the function.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("function", Required = Newtonsoft.Json.Required.Always)]
        public string Function { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details of functions that can be used in advanced searches.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class FunctionReferenceData
    {

        /// <summary>
        /// The display name of the function.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Whether the function can take a list of arguments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FunctionReferenceDataIsList IsList { get; set; }

        /// <summary>
        /// Whether the function supports both single and list value operators.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportsListAndSingleValueOperators", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FunctionReferenceDataSupportsListAndSingleValueOperators SupportsListAndSingleValueOperators { get; set; }

        /// <summary>
        /// The data types returned by the function.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("types", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Types { get; set; }

        /// <summary>
        /// The function identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class GetAtlassianTeamResponse
    {

        /// <summary>
        /// The capacity for the Atlassian team.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("capacity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Capacity { get; set; }

        /// <summary>
        /// The Atlassian team ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The ID of the issue source for the Atlassian team.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueSourceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssueSourceId { get; set; }

        /// <summary>
        /// The planning style for the Atlassian team. This is "Scrum" or "Kanban".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("planningStyle", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GetAtlassianTeamResponsePlanningStyle PlanningStyle { get; set; }

        /// <summary>
        /// The sprint length for the Atlassian team.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sprintLength", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long SprintLength { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class GetCrossProjectReleaseResponse
    {

        /// <summary>
        /// The cross-project release name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The IDs of the releases included in the cross-project release.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("releaseIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> ReleaseIds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class GetCustomFieldResponse
    {

        /// <summary>
        /// The custom field ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customFieldId", Required = Newtonsoft.Json.Required.Always)]
        public long CustomFieldId { get; set; }

        /// <summary>
        /// Allows filtering issues based on their values for the custom field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Filter { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class GetDateFieldResponse
    {

        /// <summary>
        /// A date custom field ID. This is returned if the type is "DateCustomField".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateCustomFieldId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long DateCustomFieldId { get; set; }

        /// <summary>
        /// The date field type. This is "DueDate", "TargetStartDate", "TargetEndDate" or "DateCustomField".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GetDateFieldResponseType Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class GetExclusionRulesResponse
    {

        /// <summary>
        /// The IDs of the issues excluded from the plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> IssueIds { get; set; }

        /// <summary>
        /// The IDs of the issue types excluded from the plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> IssueTypeIds { get; set; }

        /// <summary>
        /// Issues completed this number of days ago are excluded from the plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfDaysToShowCompletedIssues", Required = Newtonsoft.Json.Required.Always)]
        public int NumberOfDaysToShowCompletedIssues { get; set; }

        /// <summary>
        /// The IDs of the releases excluded from the plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("releaseIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> ReleaseIds { get; set; }

        /// <summary>
        /// The IDs of the work status categories excluded from the plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workStatusCategoryIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> WorkStatusCategoryIds { get; set; }

        /// <summary>
        /// The IDs of the work statuses excluded from the plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workStatusIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> WorkStatusIds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class GetIssueSourceResponse
    {

        /// <summary>
        /// The issue source type. This is "Board", "Project" or "Filter".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GetIssueSourceResponseType Type { get; set; }

        /// <summary>
        /// The issue source value. This is a board ID if the type is "Board", a project ID if the type is "Project" or a filter ID if the type is "Filter".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public long Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class GetPermissionHolderResponse
    {

        /// <summary>
        /// The permission holder type. This is "Group" or "AccountId".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GetPermissionHolderResponseType Type { get; set; }

        /// <summary>
        /// The permission holder value. This is a group name if the type is "Group" or an account ID if the type is "AccountId".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class GetPermissionResponse
    {

        /// <summary>
        /// The permission holder.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holder", Required = Newtonsoft.Json.Required.Always)]
        public GetPermissionHolderResponse Holder { get; set; } = new GetPermissionHolderResponse();

        /// <summary>
        /// The permission type. This is "View" or "Edit".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GetPermissionResponseType Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class GetPlanOnlyTeamResponse
    {

        /// <summary>
        /// The capacity for the plan-only team.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("capacity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Capacity { get; set; }

        /// <summary>
        /// The plan-only team ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        /// <summary>
        /// The ID of the issue source for the plan-only team.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueSourceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssueSourceId { get; set; }

        /// <summary>
        /// The account IDs of the plan-only team members.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("memberAccountIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> MemberAccountIds { get; set; }

        /// <summary>
        /// The plan-only team name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// The planning style for the plan-only team. This is "Scrum" or "Kanban".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("planningStyle", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GetPlanOnlyTeamResponsePlanningStyle PlanningStyle { get; set; }

        /// <summary>
        /// The sprint length for the plan-only team.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sprintLength", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long SprintLength { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class GetPlanResponse
    {

        /// <summary>
        /// The cross-project releases included in the plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("crossProjectReleases", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GetCrossProjectReleaseResponse> CrossProjectReleases { get; set; }

        /// <summary>
        /// The custom fields for the plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customFields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GetCustomFieldResponse> CustomFields { get; set; }

        /// <summary>
        /// The exclusion rules for the plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exclusionRules", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetExclusionRulesResponse ExclusionRules { get; set; }

        /// <summary>
        /// The plan ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        /// <summary>
        /// The issue sources included in the plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueSources", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GetIssueSourceResponse> IssueSources { get; set; }

        /// <summary>
        /// The date when the plan was last saved in UTC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastSaved", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastSaved { get; set; }

        /// <summary>
        /// The account ID of the plan lead.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("leadAccountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LeadAccountId { get; set; }

        /// <summary>
        /// The plan name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The permissions for the plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GetPermissionResponse> Permissions { get; set; }

        /// <summary>
        /// The scheduling settings for the plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduling", Required = Newtonsoft.Json.Required.Always)]
        public GetSchedulingResponse Scheduling { get; set; } = new GetSchedulingResponse();

        /// <summary>
        /// The plan status. This is "Active", "Trashed" or "Archived".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GetPlanResponseStatus Status { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class GetPlanResponseForPage
    {

        /// <summary>
        /// The plan ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The issue sources included in the plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueSources", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GetIssueSourceResponse> IssueSources { get; set; }

        /// <summary>
        /// The plan name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// Default scenario ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scenarioId", Required = Newtonsoft.Json.Required.Always)]
        public string ScenarioId { get; set; }

        /// <summary>
        /// The plan status. This is "Active", "Trashed" or "Archived".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GetPlanResponseForPageStatus Status { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class GetSchedulingResponse
    {

        /// <summary>
        /// The dependencies for the plan. This is "Sequential" or "Concurrent".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dependencies", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GetSchedulingResponseDependencies Dependencies { get; set; }

        /// <summary>
        /// The end date field for the plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Always)]
        public GetDateFieldResponse EndDate { get; set; } = new GetDateFieldResponse();

        /// <summary>
        /// The estimation unit for the plan. This is "StoryPoints", "Days" or "Hours".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimation", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GetSchedulingResponseEstimation Estimation { get; set; }

        /// <summary>
        /// The inferred dates for the plan. This is "None", "SprintDates" or "ReleaseDates".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inferredDates", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GetSchedulingResponseInferredDates InferredDates { get; set; }

        /// <summary>
        /// The start date field for the plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Always)]
        public GetDateFieldResponse StartDate { get; set; } = new GetDateFieldResponse();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class GetTeamResponseForPage
    {

        /// <summary>
        /// The team ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The team name. This is returned if the type is "PlanOnly".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The team type. This is "PlanOnly" or "Atlassian".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GetTeamResponseForPageType Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class GlobalScopeBean
    {

        /// <summary>
        /// Defines the behavior of the option in the global context.If notSelectable is set, the option cannot be set as the field's value. This is useful for archiving an option that has previously been selected but shouldn't be used anymore.If defaultValue is set, the option is selected by default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Attributes> Attributes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Group
    {

        /// <summary>
        /// Expand options that include additional group details in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupId { get; set; }

        /// <summary>
        /// The name of group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The URL for these group details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// A paginated list of the users that are members of the group. A maximum of 50 users is returned in the list, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 50 users, use`?expand=users[51:100]`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("users", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagedListUserDetailsApplicationUser Users { get; set; }

    }

    /// <summary>
    /// Details about a group.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class GroupDetails
    {

        /// <summary>
        /// The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupId { get; set; }

        /// <summary>
        /// The name of the group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// A group label.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class GroupLabel
    {

        /// <summary>
        /// The group label name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        /// <summary>
        /// The title of the group label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// The type of the group label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GroupLabelType Type { get; set; }

    }

    /// <summary>
    /// Details about a group.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class GroupName
    {

        /// <summary>
        /// The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupId { get; set; }

        /// <summary>
        /// The name of group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The URL for these group details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

    }

    /// <summary>
    /// Jira instance health check results. Deprecated and no longer returned.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class HealthCheckResult
    {

        /// <summary>
        /// The description of the Jira health check item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the Jira health check item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Whether the Jira health check item passed or failed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("passed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Passed { get; set; }

    }

    /// <summary>
    /// The project issue type hierarchy.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Hierarchy
    {

        /// <summary>
        /// The ID of the base level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("baseLevelId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long BaseLevelId { get; set; }

        /// <summary>
        /// Details about the hierarchy level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("levels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SimplifiedHierarchyLevel> Levels { get; set; }

    }

    /// <summary>
    /// Details of issue history metadata.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class HistoryMetadata
    {

        /// <summary>
        /// The activity described in the history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("activityDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActivityDescription { get; set; }

        /// <summary>
        /// The key of the activity described in the history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("activityDescriptionKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActivityDescriptionKey { get; set; }

        /// <summary>
        /// Details of the user whose action created the history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HistoryMetadataParticipant Actor { get; set; }

        /// <summary>
        /// Details of the cause that triggered the creation the history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cause", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HistoryMetadataParticipant Cause { get; set; }

        /// <summary>
        /// The description of the history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The description key of the history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("descriptionKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescriptionKey { get; set; }

        /// <summary>
        /// The description of the email address associated the history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailDescription { get; set; }

        /// <summary>
        /// The description key of the email address associated the history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailDescriptionKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailDescriptionKey { get; set; }

        /// <summary>
        /// Additional arbitrary information about the history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extraData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> ExtraData { get; set; }

        /// <summary>
        /// Details of the system that generated the history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("generator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HistoryMetadataParticipant Generator { get; set; }

        /// <summary>
        /// The type of the history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details of user or system associated with a issue history metadata item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class HistoryMetadataParticipant
    {

        /// <summary>
        /// The URL to an avatar for the user or system associated with a history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AvatarUrl { get; set; }

        /// <summary>
        /// The display name of the user or system associated with a history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The key of the display name of the user or system associated with a history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayNameKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayNameKey { get; set; }

        /// <summary>
        /// The ID of the user or system associated with a history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The type of the user or system associated with a history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// The URL of the user or system associated with a history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An icon. If no icon is defined:
    /// <br/>
    /// <br/> *  for a status icon, no status icon displays in Jira.
    /// <br/> *  for the remote object icon, the default link icon displays in Jira.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Icon
    {

        /// <summary>
        /// The URL of the tooltip, used only for a status icon. If not set, the status icon in Jira is not clickable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Link { get; set; }

        /// <summary>
        /// The title of the icon. This is used as follows:
        /// <br/>
        /// <br/> *  For a status icon it is used as a tooltip on the icon. If not set, the status icon doesn't display a tooltip in Jira.
        /// <br/> *  For the remote object icon it is used in conjunction with the application name to display a tooltip for the link's icon. The tooltip takes the format "\[application name\] icon title". Blank itemsare excluded from the tooltip title. If both items are blank, the icon tooltop displays as "Web Link".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// The URL of an icon that displays at 16x16 pixel in Jira.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url16x16", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url16x16 { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An icon.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IconBean
    {

        /// <summary>
        /// The URL of the tooltip, used only for a status icon.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Link { get; set; }

        /// <summary>
        /// The title of the icon, for use as a tooltip on the icon.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// The URL of a 16x16 pixel icon.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url16x16", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url16x16 { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IdBean
    {

        /// <summary>
        /// The ID of the permission scheme to associate with the project. Use the [Get all permission schemes](#api-rest-api-2-permissionscheme-get) resource to get a list of permission scheme IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IdOrKeyBean
    {

        /// <summary>
        /// The ID of the referenced item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The key of the referenced item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IncludedFields
    {

        [Newtonsoft.Json.JsonProperty("actuallyIncluded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ActuallyIncluded { get; set; }

        [Newtonsoft.Json.JsonProperty("excluded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Excluded { get; set; }

        [Newtonsoft.Json.JsonProperty("included", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Included { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class InputStreamSource
    {

        [Newtonsoft.Json.JsonProperty("inputStream", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object InputStream { get; set; }

    }

    /// <summary>
    /// List of Issue Ids Or Keys that are to be archived or unarchived
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueArchivalSyncRequest
    {

        [Newtonsoft.Json.JsonProperty("issueIdsOrKeys", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> IssueIdsOrKeys { get; set; }

    }

    /// <summary>
    /// Number of archived/unarchived issues and list of errors that occurred during the action, if any.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueArchivalSyncResponse
    {

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Errors Errors { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfIssuesUpdated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long NumberOfIssuesUpdated { get; set; }

    }

    /// <summary>
    /// Details about an issue.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueBean
    {

        /// <summary>
        /// Details of changelogs associated with the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changelog", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PageOfChangelogs Changelog { get; set; }

        /// <summary>
        /// The metadata for the fields on the issue that can be amended.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("editmeta", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueUpdateMetadata Editmeta { get; set; }

        /// <summary>
        /// Expand options that include additional issue details in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Fields { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldsToInclude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IncludedFields FieldsToInclude { get; set; }

        /// <summary>
        /// The ID of the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The key of the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The ID and name of each field present on the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Names { get; set; }

        /// <summary>
        /// The operations that can be performed on the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Operations Operations { get; set; }

        /// <summary>
        /// Details of the issue properties identified in the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }

        /// <summary>
        /// The rendered value of each field present on the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("renderedFields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> RenderedFields { get; set; }

        /// <summary>
        /// The schema describing each field present on the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, JsonTypeBean> Schema { get; set; }

        /// <summary>
        /// The URL of the issue details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The transitions that can be performed on the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transitions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueTransition> Transitions { get; set; }

        /// <summary>
        /// The versions of each field on the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionedRepresentations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, object>> VersionedRepresentations { get; set; }

    }

    /// <summary>
    /// List of changelogs that belong to single issue
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueChangeLog
    {

        /// <summary>
        /// List of changelogs that belongs to given issueId.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changeHistories", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Changelog> ChangeHistories { get; set; }

        /// <summary>
        /// The ID of the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssueId { get; set; }

    }

    /// <summary>
    /// A list of changelog IDs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueChangelogIds
    {

        /// <summary>
        /// The list of changelog IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changelogIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<long> ChangelogIds { get; set; } = new System.Collections.ObjectModel.Collection<long>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueCommentListRequestBean
    {

        /// <summary>
        /// The list of comment IDs. A maximum of 1000 IDs can be specified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ids", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<long> Ids { get; set; } = new System.Collections.ObjectModel.Collection<long>();

    }

    /// <summary>
    /// An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueContextVariable
    {

        /// <summary>
        /// The issue ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The issue key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// Type of custom context variable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The wrapper for the issue creation metadata for a list of projects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueCreateMetadata
    {

        /// <summary>
        /// Expand options that include additional project details in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// List of projects and their issue creation metadata.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectIssueCreateMetadata> Projects { get; set; }

    }

    /// <summary>
    /// Lists of issues and entity properties. See [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/) for more information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueEntityProperties
    {

        /// <summary>
        /// A list of entity property IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entitiesIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> EntitiesIds { get; set; }

        /// <summary>
        /// A list of entity property keys and values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, JsonNode> Properties { get; set; }

    }

    /// <summary>
    /// An issue ID with entity property values. See [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/) for more information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueEntityPropertiesForMultiUpdate
    {

        /// <summary>
        /// The ID of the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssueID { get; set; }

        /// <summary>
        /// Entity properties to set on the issue. The maximum length of an issue property value is 32768 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, JsonNode> Properties { get; set; }

    }

    /// <summary>
    /// Describes the error that occurred when retrieving data for a particular issue.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueError
    {

        /// <summary>
        /// The error that occurred when fetching this issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// The ID of the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

    }

    /// <summary>
    /// Details about an issue event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueEvent
    {

        /// <summary>
        /// The ID of the event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The name of the event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// Details of the options for a select list issue field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueFieldOption
    {

        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueFieldOptionConfiguration Config { get; set; }

        /// <summary>
        /// The unique identifier for the option. This is only unique within the select field's set of options.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        /// <summary>
        /// The properties of the object, as arbitrary key-value pairs. These properties can be searched using JQL, if the extractions (see [Issue Field Option Property Index](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/)) are defined in the descriptor for the issue field module.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }

        /// <summary>
        /// The option's name, which is displayed in Jira.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public string Value { get; set; }

    }

    /// <summary>
    /// Details of the projects the option is available in.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueFieldOptionConfiguration
    {

        /// <summary>
        /// DEPRECATED
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Attributes2> Attributes { get; set; }

        /// <summary>
        /// Defines the projects that the option is available in. If the scope is not defined, then the option is available in all projects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueFieldOptionScopeBean Scope { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueFieldOptionCreateBean
    {

        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueFieldOptionConfiguration Config { get; set; }

        /// <summary>
        /// The properties of the option as arbitrary key-value pairs. These properties can be searched using JQL, if the extractions (see https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/) are defined in the descriptor for the issue field module.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }

        /// <summary>
        /// The option's name, which is displayed in Jira.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueFieldOptionScopeBean
    {

        /// <summary>
        /// Defines the behavior of the option within the global context. If this property is set, even if set to an empty object, then the option is available in all projects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("global", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GlobalScopeBean Global { get; set; }

        /// <summary>
        /// DEPRECATED
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> Projects { get; set; }

        /// <summary>
        /// Defines the projects in which the option is available and the behavior of the option within each project. Specify one object per project. The behavior of the option in a project context overrides the behavior in the global context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projects2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectScopeBean> Projects2 { get; set; }

    }

    /// <summary>
    /// Bulk operation filter details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueFilterForBulkPropertyDelete
    {

        /// <summary>
        /// The value of properties to perform the bulk operation on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object CurrentValue { get; set; }

        /// <summary>
        /// List of issues to perform the bulk delete operation on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> EntityIds { get; set; }

    }

    /// <summary>
    /// Bulk operation filter details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueFilterForBulkPropertySet
    {

        /// <summary>
        /// The value of properties to perform the bulk operation on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object CurrentValue { get; set; }

        /// <summary>
        /// List of issues to perform the bulk operation on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> EntityIds { get; set; }

        /// <summary>
        /// Whether the bulk operation occurs only when the property is present on or absent from an issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasProperty", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasProperty { get; set; }

    }

    /// <summary>
    /// Defines the payload to configure the issue layout item for a project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueLayoutItemPayload
    {

        [Newtonsoft.Json.JsonProperty("itemKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier ItemKey { get; set; }

        /// <summary>
        /// The item section type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sectionType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IssueLayoutItemPayloadSectionType SectionType { get; set; }

        /// <summary>
        /// The item type. Currently only support FIELD
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IssueLayoutItemPayloadType Type { get; set; }

    }

    /// <summary>
    /// Defines the payload to configure the issue layouts for a project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueLayoutPayload
    {

        [Newtonsoft.Json.JsonProperty("containerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier ContainerId { get; set; }

        /// <summary>
        /// The issue layout type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueLayoutType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IssueLayoutPayloadIssueLayoutType IssueLayoutType { get; set; }

        /// <summary>
        /// The configuration of items in the issue layout
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueLayoutItemPayload> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("pcri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier Pcri { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueLimitReportResponseBean
    {

        /// <summary>
        /// A list of ids of issues approaching the limit and their field count
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuesApproachingLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, long>> IssuesApproachingLimit { get; set; }

        /// <summary>
        /// A list of ids of issues breaching the limit and their field count
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuesBreachingLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, long>> IssuesBreachingLimit { get; set; }

        /// <summary>
        /// The fields and their defined limits
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, int> Limits { get; set; }

    }

    /// <summary>
    /// Details of a link between issues.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueLink
    {

        /// <summary>
        /// The ID of the issue link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Provides details about the linked issue. If presenting this link in a user interface, use the `inward` field of the issue link type to label the link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inwardIssue", Required = Newtonsoft.Json.Required.Always)]
        public LinkedIssue InwardIssue { get; set; } = new LinkedIssue();

        /// <summary>
        /// Provides details about the linked issue. If presenting this link in a user interface, use the `outward` field of the issue link type to label the link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outwardIssue", Required = Newtonsoft.Json.Required.Always)]
        public LinkedIssue OutwardIssue { get; set; } = new LinkedIssue();

        /// <summary>
        /// The URL of the issue link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The type of link between the issues.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public IssueLinkType Type { get; set; } = new IssueLinkType();

    }

    /// <summary>
    /// This object is used as follows:
    /// <br/>
    /// <br/> *  In the [ issueLink](#api-rest-api-2-issueLink-post) resource it defines and reports on the type of link between the issues. Find a list of issue link types with [Get issue link types](#api-rest-api-2-issueLinkType-get).
    /// <br/> *  In the [ issueLinkType](#api-rest-api-2-issueLinkType-post) resource it defines and reports on issue link types.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueLinkType
    {

        /// <summary>
        /// The ID of the issue link type and is used as follows:
        /// <br/>
        /// <br/> *  In the [ issueLink](#api-rest-api-2-issueLink-post) resource it is the type of issue link. Required on create when `name` isn't provided. Otherwise, read only.
        /// <br/> *  In the [ issueLinkType](#api-rest-api-2-issueLinkType-post) resource it is read only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The description of the issue link type inward link and is used as follows:
        /// <br/>
        /// <br/> *  In the [ issueLink](#api-rest-api-2-issueLink-post) resource it is read only.
        /// <br/> *  In the [ issueLinkType](#api-rest-api-2-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inward", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Inward { get; set; }

        /// <summary>
        /// The name of the issue link type and is used as follows:
        /// <br/>
        /// <br/> *  In the [ issueLink](#api-rest-api-2-issueLink-post) resource it is the type of issue link. Required on create when `id` isn't provided. Otherwise, read only.
        /// <br/> *  In the [ issueLinkType](#api-rest-api-2-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The description of the issue link type outward link and is used as follows:
        /// <br/>
        /// <br/> *  In the [ issueLink](#api-rest-api-2-issueLink-post) resource it is read only.
        /// <br/> *  In the [ issueLinkType](#api-rest-api-2-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outward", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Outward { get; set; }

        /// <summary>
        /// The URL of the issue link type. Read only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

    }

    /// <summary>
    /// A list of issue link type beans.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueLinkTypes
    {

        /// <summary>
        /// The issue link type bean.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueLinkTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueLinkType> IssueLinkTypes1 { get; set; }

    }

    /// <summary>
    /// A list of issue IDs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueList
    {

        /// <summary>
        /// The list of issue IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> IssueIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    }

    /// <summary>
    /// A list of matched issues or errors for each JQL query, in the order the JQL queries were passed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueMatches
    {

        [Newtonsoft.Json.JsonProperty("matches", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<IssueMatchesForJQL> Matches { get; set; } = new System.Collections.ObjectModel.Collection<IssueMatchesForJQL>();

    }

    /// <summary>
    /// A list of the issues matched to a JQL query or details of errors encountered during matching.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueMatchesForJQL
    {

        /// <summary>
        /// A list of errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> Errors { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// A list of issue IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("matchedIssues", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<long> MatchedIssues { get; set; } = new System.Collections.ObjectModel.Collection<long>();

    }

    /// <summary>
    /// A list of issues suggested for use in auto-completion.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssuePickerSuggestions
    {

        /// <summary>
        /// A list of issues for an issue type suggested for use in auto-completion.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sections", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssuePickerSuggestionsIssueType> Sections { get; set; }

    }

    /// <summary>
    /// A type of issue suggested for use in auto-completion.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssuePickerSuggestionsIssueType
    {

        /// <summary>
        /// The ID of the type of issues suggested for use in auto-completion.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// A list of issues suggested for use in auto-completion.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SuggestedIssue> Issues { get; set; }

        /// <summary>
        /// The label of the type of issues suggested for use in auto-completion.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>
        /// If no issue suggestions are found, returns a message indicating no suggestions were found,
        /// </summary>
        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        /// <summary>
        /// If issue suggestions are found, returns a message indicating the number of issues suggestions found and returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sub", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sub { get; set; }

    }

    /// <summary>
    /// Issue security level member.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueSecurityLevelMember
    {

        /// <summary>
        /// The user or group being granted the permission. It consists of a `type` and a type-dependent `parameter`. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holder", Required = Newtonsoft.Json.Required.Always)]
        public PermissionHolder Holder { get; set; } = new PermissionHolder();

        /// <summary>
        /// The ID of the issue security level member.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        /// <summary>
        /// The ID of the issue security level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueSecurityLevelId", Required = Newtonsoft.Json.Required.Always)]
        public long IssueSecurityLevelId { get; set; }

    }

    /// <summary>
    /// Details about an project using security scheme mapping.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueSecuritySchemeToProjectMapping
    {

        [Newtonsoft.Json.JsonProperty("issueSecuritySchemeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssueSecuritySchemeId { get; set; }

        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details of an issue transition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTransition
    {

        /// <summary>
        /// Expand options that include additional transition details in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// Details of the fields associated with the issue transition screen. Use this information to populate `fields` and `update` in a transition request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, FieldMetadata> Fields { get; set; }

        /// <summary>
        /// Whether there is a screen associated with the issue transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasScreen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasScreen { get; set; }

        /// <summary>
        /// The ID of the issue transition. Required when specifying a transition to undertake.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Whether the transition is available to be performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAvailable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsAvailable { get; set; }

        /// <summary>
        /// Whether the issue has to meet criteria before the issue transition is applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isConditional", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsConditional { get; set; }

        /// <summary>
        /// Whether the issue transition is global, that is, the transition is applied to issues regardless of their status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isGlobal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsGlobal { get; set; }

        /// <summary>
        /// Whether this is the initial issue transition for the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isInitial", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsInitial { get; set; }

        [Newtonsoft.Json.JsonProperty("looped", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Looped { get; set; }

        /// <summary>
        /// The name of the issue transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Details of the issue status after the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatusDetails To { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypeCreateBean
    {

        /// <summary>
        /// The description of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The hierarchy level of the issue type. Use:
        /// <br/>
        /// <br/> *  `-1` for Subtask.
        /// <br/> *  `0` for Base.
        /// <br/>
        /// <br/>Defaults to `0`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hierarchyLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int HierarchyLevel { get; set; }

        /// <summary>
        /// The unique name for the issue type. The maximum length is 60 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// Deprecated. Use `hierarchyLevel` instead. See the [deprecation notice](https://community.developer.atlassian.com/t/deprecation-of-the-epic-link-parent-link-and-other-related-fields-in-rest-apis-and-webhooks/54048) for details.
        /// <br/>
        /// <br/>Whether the issue type is `subtype` or `standard`. Defaults to `standard`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IssueTypeCreateBeanType Type { get; set; }

    }

    /// <summary>
    /// Details about an issue type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypeDetails
    {

        /// <summary>
        /// The ID of the issue type's avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long AvatarId { get; set; }

        /// <summary>
        /// The description of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Unique ID for next-gen projects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid EntityId { get; set; }

        /// <summary>
        /// Hierarchy level of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hierarchyLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int HierarchyLevel { get; set; }

        /// <summary>
        /// The URL of the issue type's avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iconUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IconUrl { get; set; }

        /// <summary>
        /// The ID of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Details of the next-gen projects the issue type is available in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        /// <summary>
        /// The URL of these issue type details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        /// <summary>
        /// Whether this issue type is used to create subtasks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subtask", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Subtask { get; set; }

    }

    /// <summary>
    /// The payload for creating an issue type hierarchy
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypeHierarchyPayload
    {

        /// <summary>
        /// The hierarchy level of the issue type. 0, 1, 2, 3 .. n; Negative values for subtasks
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hierarchyLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int HierarchyLevel { get; set; }

        /// <summary>
        /// The name of the issue type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The conflict strategy to use when the issue type already exists. FAIL - Fail execution, this always needs to be unique; USE - Use the existing entity and ignore new entity parameters
        /// </summary>
        [Newtonsoft.Json.JsonProperty("onConflict", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IssueTypeHierarchyPayloadOnConflict OnConflict { get; set; }

        [Newtonsoft.Json.JsonProperty("pcri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier Pcri { get; set; }

    }

    /// <summary>
    /// The list of issue type IDs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypeIds
    {

        /// <summary>
        /// The list of issue type IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> IssueTypeIds1 { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    }

    /// <summary>
    /// The list of issue type IDs to be removed from the field configuration scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypeIdsToRemove
    {

        /// <summary>
        /// The list of issue type IDs. Must contain unique values not longer than 255 characters and not be empty. Maximum of 100 IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> IssueTypeIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    }

    /// <summary>
    /// Details of an issue type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypeInfo
    {

        /// <summary>
        /// The avatar of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long AvatarId { get; set; }

        /// <summary>
        /// The ID of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The name of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// Details of the issue creation metadata for an issue type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypeIssueCreateMetadata
    {

        /// <summary>
        /// The ID of the issue type's avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long AvatarId { get; set; }

        /// <summary>
        /// The description of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Unique ID for next-gen projects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid EntityId { get; set; }

        /// <summary>
        /// Expand options that include additional issue type metadata details in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// List of the fields available when creating an issue for the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, FieldMetadata> Fields { get; set; }

        /// <summary>
        /// Hierarchy level of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hierarchyLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int HierarchyLevel { get; set; }

        /// <summary>
        /// The URL of the issue type's avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iconUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IconUrl { get; set; }

        /// <summary>
        /// The ID of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Details of the next-gen projects the issue type is available in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        /// <summary>
        /// The URL of these issue type details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        /// <summary>
        /// Whether this issue type is used to create subtasks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subtask", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Subtask { get; set; }

    }

    /// <summary>
    /// The payload for creating an issue type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypePayload
    {

        /// <summary>
        /// The avatar ID of the issue type. Go to https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-avatars/\#api-rest-api-3-avatar-type-system-get to choose an avatarId existing in Jira
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AvatarId { get; set; }

        /// <summary>
        /// The description of the issue type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The hierarchy level of the issue type. 0, 1, 2, 3 .. n; Negative values for subtasks
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hierarchyLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int HierarchyLevel { get; set; }

        /// <summary>
        /// The name of the issue type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The conflict strategy to use when the issue type already exists. FAIL - Fail execution, this always needs to be unique; USE - Use the existing entity and ignore new entity parameters
        /// </summary>
        [Newtonsoft.Json.JsonProperty("onConflict", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IssueTypePayloadOnConflict OnConflict { get; set; }

        [Newtonsoft.Json.JsonProperty("pcri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier Pcri { get; set; }

    }

    /// <summary>
    /// The payload for creating issue types in a project
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypeProjectCreatePayload
    {

        /// <summary>
        /// Defines the issue type hierarhy to be created and used during this project creation. This will only add new levels if there isn't an existing level
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeHierarchy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueTypeHierarchyPayload> IssueTypeHierarchy { get; set; }

        [Newtonsoft.Json.JsonProperty("issueTypeScheme", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueTypeSchemePayload IssueTypeScheme { get; set; }

        /// <summary>
        /// Only needed if you want to create issue types, you can otherwise use the ids of issue types in the scheme configuration
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueTypePayload> IssueTypes { get; set; }

    }

    /// <summary>
    /// Details of an issue type scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypeScheme
    {

        /// <summary>
        /// The ID of the default issue type of the issue type scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultIssueTypeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultIssueTypeId { get; set; }

        /// <summary>
        /// The description of the issue type scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the issue type scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// Whether the issue type scheme is the default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// The name of the issue type scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

    }

    /// <summary>
    /// Details of an issue type scheme and its associated issue types.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypeSchemeDetails
    {

        /// <summary>
        /// The ID of the default issue type of the issue type scheme. This ID must be included in `issueTypeIds`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultIssueTypeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultIssueTypeId { get; set; }

        /// <summary>
        /// The description of the issue type scheme. The maximum length is 4000 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The list of issue types IDs of the issue type scheme. At least one standard issue type ID is required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> IssueTypeIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The name of the issue type scheme. The name must be unique. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

    }

    /// <summary>
    /// The ID of an issue type scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypeSchemeID
    {

        /// <summary>
        /// The ID of the issue type scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeSchemeId", Required = Newtonsoft.Json.Required.Always)]
        public string IssueTypeSchemeId { get; set; }

    }

    /// <summary>
    /// Issue type scheme item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypeSchemeMapping
    {

        /// <summary>
        /// The ID of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeId", Required = Newtonsoft.Json.Required.Always)]
        public string IssueTypeId { get; set; }

        /// <summary>
        /// The ID of the issue type scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeSchemeId", Required = Newtonsoft.Json.Required.Always)]
        public string IssueTypeSchemeId { get; set; }

    }

    /// <summary>
    /// The payload for creating issue type schemes
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypeSchemePayload
    {

        [Newtonsoft.Json.JsonProperty("defaultIssueTypeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier DefaultIssueTypeId { get; set; }

        /// <summary>
        /// The description of the issue type scheme
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The issue type IDs for the issue type scheme
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectCreateResourceIdentifier> IssueTypeIds { get; set; }

        /// <summary>
        /// The name of the issue type scheme
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("pcri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier Pcri { get; set; }

    }

    /// <summary>
    /// Details of the association between an issue type scheme and project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypeSchemeProjectAssociation
    {

        /// <summary>
        /// The ID of the issue type scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeSchemeId", Required = Newtonsoft.Json.Required.Always)]
        public string IssueTypeSchemeId { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.Always)]
        public string ProjectId { get; set; }

    }

    /// <summary>
    /// Issue type scheme with a list of the projects that use it.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypeSchemeProjects
    {

        /// <summary>
        /// Details of an issue type scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeScheme", Required = Newtonsoft.Json.Required.Always)]
        public IssueTypeScheme IssueTypeScheme { get; set; } = new IssueTypeScheme();

        /// <summary>
        /// The IDs of the projects using the issue type scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> ProjectIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    }

    /// <summary>
    /// Details of the name, description, and default issue type for an issue type scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypeSchemeUpdateDetails
    {

        /// <summary>
        /// The ID of the default issue type of the issue type scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultIssueTypeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultIssueTypeId { get; set; }

        /// <summary>
        /// The description of the issue type scheme. The maximum length is 4000 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the issue type scheme. The name must be unique. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// Details of an issue type screen scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypeScreenScheme
    {

        /// <summary>
        /// The description of the issue type screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the issue type screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the issue type screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

    }

    /// <summary>
    /// The details of an issue type screen scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypeScreenSchemeDetails
    {

        /// <summary>
        /// The description of the issue type screen scheme. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The IDs of the screen schemes for the issue type IDs and *default*. A *default* entry is required to create an issue type screen scheme, it defines the mapping for all issue types without a screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeMappings", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<IssueTypeScreenSchemeMapping> IssueTypeMappings { get; set; } = new System.Collections.ObjectModel.Collection<IssueTypeScreenSchemeMapping>();

        /// <summary>
        /// The name of the issue type screen scheme. The name must be unique. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

    }

    /// <summary>
    /// The ID of an issue type screen scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypeScreenSchemeId
    {

        /// <summary>
        /// The ID of the issue type screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

    }

    /// <summary>
    /// The screen scheme for an issue type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypeScreenSchemeItem
    {

        /// <summary>
        /// The ID of the issue type or *default*. Only issue types used in classic projects are accepted. When creating an issue screen scheme, an entry for *default* must be provided and defines the mapping for all issue types without a screen scheme. Otherwise, a *default* entry can't be provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeId", Required = Newtonsoft.Json.Required.Always)]
        public string IssueTypeId { get; set; }

        /// <summary>
        /// The ID of the issue type screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeScreenSchemeId", Required = Newtonsoft.Json.Required.Always)]
        public string IssueTypeScreenSchemeId { get; set; }

        /// <summary>
        /// The ID of the screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("screenSchemeId", Required = Newtonsoft.Json.Required.Always)]
        public string ScreenSchemeId { get; set; }

    }

    /// <summary>
    /// The IDs of the screen schemes for the issue type IDs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypeScreenSchemeMapping
    {

        /// <summary>
        /// The ID of the issue type or *default*. Only issue types used in classic projects are accepted. An entry for *default* must be provided and defines the mapping for all issue types without a screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeId", Required = Newtonsoft.Json.Required.Always)]
        public string IssueTypeId { get; set; }

        /// <summary>
        /// The ID of the screen scheme. Only screen schemes used in classic projects are accepted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("screenSchemeId", Required = Newtonsoft.Json.Required.Always)]
        public string ScreenSchemeId { get; set; }

    }

    /// <summary>
    /// A list of issue type screen scheme mappings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypeScreenSchemeMappingDetails
    {

        /// <summary>
        /// The list of issue type to screen scheme mappings. A *default* entry cannot be specified because a default entry is added when an issue type screen scheme is created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeMappings", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<IssueTypeScreenSchemeMapping> IssueTypeMappings { get; set; } = new System.Collections.ObjectModel.Collection<IssueTypeScreenSchemeMapping>();

    }

    /// <summary>
    /// Defines the payload for the issue type screen schemes. See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issue-type-screen-schemes/\#api-rest-api-3-issuetypescreenscheme-post
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypeScreenSchemePayload
    {

        [Newtonsoft.Json.JsonProperty("defaultScreenScheme", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier DefaultScreenScheme { get; set; }

        /// <summary>
        /// The description of the issue type screen scheme
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The IDs of the screen schemes for the issue type IDs and default. A default entry is required to create an issue type screen scheme, it defines the mapping for all issue types without a screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("explicitMappings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, ProjectCreateResourceIdentifier> ExplicitMappings { get; set; }

        /// <summary>
        /// The name of the issue type screen scheme
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("pcri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier Pcri { get; set; }

    }

    /// <summary>
    /// Associated issue type screen scheme and project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypeScreenSchemeProjectAssociation
    {

        /// <summary>
        /// The ID of the issue type screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeScreenSchemeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssueTypeScreenSchemeId { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectId { get; set; }

    }

    /// <summary>
    /// Details of an issue type screen scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypeScreenSchemeUpdateDetails
    {

        /// <summary>
        /// The description of the issue type screen scheme. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the issue type screen scheme. The name must be unique. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// Issue type screen scheme with a list of the projects that use it.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypeScreenSchemesProjects
    {

        /// <summary>
        /// Details of an issue type screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeScreenScheme", Required = Newtonsoft.Json.Required.Always)]
        public IssueTypeScreenScheme IssueTypeScreenScheme { get; set; } = new IssueTypeScreenScheme();

        /// <summary>
        /// The IDs of the projects using the issue type screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> ProjectIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    }

    /// <summary>
    /// Mapping of an issue type to a context.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypeToContextMapping
    {

        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        public string ContextId { get; set; }

        /// <summary>
        /// Whether the context is mapped to any issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAnyIssueType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsAnyIssueType { get; set; }

        /// <summary>
        /// The ID of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssueTypeId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypeUpdateBean
    {

        /// <summary>
        /// The ID of an issue type avatar. This can be obtained be obtained from the following endpoints:
        /// <br/>
        /// <br/> *  [System issue type avatar IDs only](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-avatars/#api-rest-api-3-avatar-type-system-get)
        /// <br/> *  [System and custom issue type avatar IDs](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-avatars/#api-rest-api-3-universal-avatar-type-type-owner-entityid-get)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long AvatarId { get; set; }

        /// <summary>
        /// The description of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The unique name for the issue type. The maximum length is 60 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// Status details for an issue type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypeWithStatus
    {

        /// <summary>
        /// The ID of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// The URL of the issue type's status details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        public string Self { get; set; }

        /// <summary>
        /// List of status details for the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<StatusDetails> Statuses { get; set; } = new System.Collections.ObjectModel.Collection<StatusDetails>();

        /// <summary>
        /// Whether this issue type represents subtasks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subtask", Required = Newtonsoft.Json.Required.Always)]
        public bool Subtask { get; set; }

    }

    /// <summary>
    /// Details about the mapping between an issue type and a workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypeWorkflowMapping
    {

        /// <summary>
        /// The ID of the issue type. Not required if updating the issue type-workflow mapping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssueType { get; set; }

        /// <summary>
        /// Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to `false`. Only applicable when updating the workflow-issue types mapping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updateDraftIfNeeded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UpdateDraftIfNeeded { get; set; }

        /// <summary>
        /// The name of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflow", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Workflow { get; set; }

    }

    /// <summary>
    /// Details about the mapping between issue types and a workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueTypesWorkflowMapping
    {

        /// <summary>
        /// Whether the workflow is the default workflow for the workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultMapping", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DefaultMapping { get; set; }

        /// <summary>
        /// The list of issue type IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> IssueTypes { get; set; }

        /// <summary>
        /// Whether a draft workflow scheme is created or updated when updating an active workflow scheme. The draft is updated with the new workflow-issue types mapping. Defaults to `false`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updateDraftIfNeeded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UpdateDraftIfNeeded { get; set; }

        /// <summary>
        /// The name of the workflow. Optional if updating the workflow-issue types mapping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflow", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Workflow { get; set; }

    }

    /// <summary>
    /// Details of an issue update request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueUpdateDetails
    {

        /// <summary>
        /// List of issue screen fields to update, specifying the sub-field to update and its value for each field. This field provides a straightforward option when setting a sub-field. When multiple sub-fields or other operations are required, use `update`. Fields included in here cannot be included in `update`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Fields { get; set; }

        /// <summary>
        /// Additional issue history details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("historyMetadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HistoryMetadata HistoryMetadata { get; set; }

        /// <summary>
        /// Details of issue properties to be add or update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EntityProperty> Properties { get; set; }

        /// <summary>
        /// Details of a transition. Required when performing a transition, optional when creating or editing an issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueTransition Transition { get; set; }

        /// <summary>
        /// A Map containing the field field name and a list of operations to perform on the issue screen field. Note that fields included in here cannot be included in `fields`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("update", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<FieldUpdateOperation>> Update { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A list of editable field details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssueUpdateMetadata
    {

        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, FieldMetadata> Fields { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of issues and JQL queries.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssuesAndJQLQueries
    {

        /// <summary>
        /// A list of issue IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<long> IssueIds { get; set; } = new System.Collections.ObjectModel.Collection<long>();

        /// <summary>
        /// A list of JQL queries.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jqls", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> Jqls { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    }

    /// <summary>
    /// The description of the page of issues loaded by the provided JQL query.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssuesJqlMetaDataBean
    {

        /// <summary>
        /// The number of issues that were loaded in this evaluation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Always)]
        public int Count { get; set; }

        /// <summary>
        /// The maximum number of issues that could be loaded in this evaluation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.Always)]
        public int MaxResults { get; set; }

        /// <summary>
        /// The index of the first issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.Always)]
        public long StartAt { get; set; }

        /// <summary>
        /// The total number of issues the JQL returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.Always)]
        public long TotalCount { get; set; }

        /// <summary>
        /// Any warnings related to the JQL query. Present only if the validation mode was set to `warn`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validationWarnings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ValidationWarnings { get; set; }

    }

    /// <summary>
    /// Meta data describing the `issues` context variable.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssuesMetaBean
    {

        [Newtonsoft.Json.JsonProperty("jql", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssuesJqlMetaDataBean Jql { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IssuesUpdateBean
    {

        [Newtonsoft.Json.JsonProperty("issueUpdates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueUpdateDetails> IssueUpdates { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The description of the page of issues loaded by the provided JQL query.This bean will be replacing IssuesJqlMetaDataBean bean as part of new `evaluate` endpoint
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JExpEvaluateIssuesJqlMetaDataBean
    {

        /// <summary>
        /// Indicates whether this is the last page of the paginated response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// Next Page token for the next page of issues.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPageToken", Required = Newtonsoft.Json.Required.Always)]
        public string NextPageToken { get; set; }

    }

    /// <summary>
    /// Meta data describing the `issues` context variable.This bean will be replacing IssuesMetaBean bean as part of new `evaluate` endpoint
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JExpEvaluateIssuesMetaBean
    {

        [Newtonsoft.Json.JsonProperty("jql", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JExpEvaluateIssuesJqlMetaDataBean Jql { get; set; }

    }

    /// <summary>
    /// The result of evaluating a Jira expression.This bean will be replacing `JiraExpressionResultBean` bean as part of new evaluate endpoint
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JExpEvaluateJiraExpressionResultBean
    {

        /// <summary>
        /// Contains various characteristics of the performed expression evaluation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JExpEvaluateMetaDataBean Meta { get; set; }

        /// <summary>
        /// The value of the evaluated expression. It may be a primitive JSON value or a Jira REST API object. (Some expressions do not produce any meaningful results—for example, an expression that returns a lambda function—if that's the case a simple string representation is returned. These string representations should not be relied upon and may change without notice.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public object Value { get; set; }

    }

    /// <summary>
    /// Contains information about the expression evaluation. This bean will be replacing `JiraExpressionEvaluationMetaDataBean` bean as part of new `evaluate` endpoint
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JExpEvaluateMetaDataBean
    {

        /// <summary>
        /// Contains information about the expression complexity. For example, the number of steps it took to evaluate the expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("complexity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JiraExpressionsComplexityBean Complexity { get; set; }

        /// <summary>
        /// Contains information about the `issues` variable in the context. For example, is the issues were loaded with JQL, information about the page will be included here.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JExpEvaluateIssuesMetaBean Issues { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JQLCountRequestBean
    {

        /// <summary>
        /// A [JQL](https://confluence.atlassian.com/x/egORLQ) expression. For performance reasons, this parameter requires a bounded query. A bounded query is a query with a search restriction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jql", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Jql { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JQLCountResultsBean
    {

        /// <summary>
        /// Number of issues matching JQL query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Count { get; set; }

    }

    /// <summary>
    /// The JQL queries to be converted.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JQLPersonalDataMigrationRequest
    {

        /// <summary>
        /// A list of queries with user identifiers. Maximum of 100 queries.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryStrings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> QueryStrings { get; set; }

    }

    /// <summary>
    /// JQL queries that contained users that could not be found
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JQLQueryWithUnknownUsers
    {

        /// <summary>
        /// The converted query, with accountIDs instead of user identifiers, or 'unknown' for users that could not be found
        /// </summary>
        [Newtonsoft.Json.JsonProperty("convertedQuery", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConvertedQuery { get; set; }

        /// <summary>
        /// The original query, for reference
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalQuery", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalQuery { get; set; }

    }

    /// <summary>
    /// Lists of JQL reference data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JQLReferenceData
    {

        /// <summary>
        /// List of JQL query reserved words.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jqlReservedWords", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> JqlReservedWords { get; set; }

        /// <summary>
        /// List of fields usable in JQL queries.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visibleFieldNames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldReferenceData> VisibleFieldNames { get; set; }

        /// <summary>
        /// List of functions usable in JQL queries.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visibleFunctionNames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FunctionReferenceData> VisibleFunctionNames { get; set; }

    }

    /// <summary>
    /// The JQL specifying the issues available in the evaluated Jira expression under the `issues` context variable. This bean will be replacing `JexpIssues` bean as part of new `evaluate` endpoint
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JexpEvaluateCtxIssues
    {

        /// <summary>
        /// The JQL query that specifies the set of issues available in the Jira expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jql", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JexpEvaluateCtxJqlIssues Jql { get; set; }

    }

    /// <summary>
    /// The JQL specifying the issues available in the evaluated Jira expression under the `issues` context variable. Not all issues returned by the JQL query are loaded, only those described by the `nextPageToken` and `maxResults` properties. This bean will be replacing JexpJqlIssues bean as part of new `evaluate` endpoint
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JexpEvaluateCtxJqlIssues
    {

        /// <summary>
        /// The maximum number of issues to return from the JQL query. max results value considered may be lower than the number specific here.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// The token for a page to fetch that is not the first page. The first page has a `nextPageToken` of `null`. Use the `nextPageToken` to fetch the next page of issues.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPageToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageToken { get; set; }

        /// <summary>
        /// The JQL query, required to be bounded. Additionally, `orderBy` clause can contain a maximum of 7 fields
        /// </summary>
        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Query { get; set; }

    }

    /// <summary>
    /// The JQL specifying the issues available in the evaluated Jira expression under the `issues` context variable.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JexpIssues
    {

        /// <summary>
        /// The JQL query that specifies the set of issues available in the Jira expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jql", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JexpJqlIssues Jql { get; set; }

    }

    /// <summary>
    /// The JQL specifying the issues available in the evaluated Jira expression under the `issues` context variable. Not all issues returned by the JQL query are loaded, only those described by the `startAt` and `maxResults` properties. To determine whether it is necessary to iterate to ensure all the issues returned by the JQL query are evaluated, inspect `meta.issues.jql.count` in the response.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JexpJqlIssues
    {

        /// <summary>
        /// The maximum number of issues to return from the JQL query. Inspect `meta.issues.jql.maxResults` in the response to ensure the maximum value has not been exceeded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// The JQL query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Query { get; set; }

        /// <summary>
        /// The index of the first issue to return from the JQL query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// Determines how to validate the JQL query and treat the validation results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JexpJqlIssuesValidation Validation { get; set; } = Atlassian.Jira.Swagger.JexpJqlIssuesValidation.Strict;

    }

    /// <summary>
    /// Details about the analysed Jira expression.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JiraExpressionAnalysis
    {

        [Newtonsoft.Json.JsonProperty("complexity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JiraExpressionComplexity Complexity { get; set; }

        /// <summary>
        /// A list of validation errors. Not included if the expression is valid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JiraExpressionValidationError> Errors { get; set; }

        /// <summary>
        /// The analysed expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expression", Required = Newtonsoft.Json.Required.Always)]
        public string Expression { get; set; }

        /// <summary>
        /// EXPERIMENTAL. The inferred type of the expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// Whether the expression is valid and the interpreter will evaluate it. Note that the expression may fail at runtime (for example, if it executes too many expensive operations).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("valid", Required = Newtonsoft.Json.Required.Always)]
        public bool Valid { get; set; }

    }

    /// <summary>
    /// Details about the complexity of the analysed Jira expression.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JiraExpressionComplexity
    {

        /// <summary>
        /// Information that can be used to determine how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) the evaluation of the expression will perform. This information may be a formula or number. For example:
        /// <br/>
        /// <br/> *  `issues.map(i =&gt; i.comments)` performs as many expensive operations as there are issues on the issues list. So this parameter returns `N`, where `N` is the size of issue list.
        /// <br/> *  `new Issue(10010).comments` gets comments for one issue, so its complexity is `2` (`1` to retrieve issue 10010 from the database plus `1` to get its comments).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expensiveOperations", Required = Newtonsoft.Json.Required.Always)]
        public string ExpensiveOperations { get; set; }

        /// <summary>
        /// Variables used in the formula, mapped to the parts of the expression they refer to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("variables", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Variables { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JiraExpressionEvalContextBean
    {

        /// <summary>
        /// The ID of the board that is available under the `board` variable when evaluating the expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("board", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Board { get; set; }

        /// <summary>
        /// Custom context variables and their types. These variable types are available for use in a custom context:
        /// <br/>
        /// <br/> *  `user`: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.
        /// <br/> *  `issue`: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.
        /// <br/> *  `json`: A JSON object containing custom content.
        /// <br/> *  `list`: A JSON list of `user`, `issue`, or `json` variable types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("custom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Custom { get; set; }

        /// <summary>
        /// The ID of the customer request that is available under the `customerRequest` variable when evaluating the expression. This is the same as the ID of the underlying Jira issue, but the customer request context variable will have a different type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerRequest", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long CustomerRequest { get; set; }

        /// <summary>
        /// The issue that is available under the `issue` variable when evaluating the expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IdOrKeyBean Issue { get; set; }

        /// <summary>
        /// The collection of issues that is available under the `issues` variable when evaluating the expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JexpIssues Issues { get; set; }

        /// <summary>
        /// The project that is available under the `project` variable when evaluating the expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IdOrKeyBean Project { get; set; }

        /// <summary>
        /// The ID of the service desk that is available under the `serviceDesk` variable when evaluating the expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceDesk", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ServiceDesk { get; set; }

        /// <summary>
        /// The ID of the sprint that is available under the `sprint` variable when evaluating the expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sprint", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Sprint { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JiraExpressionEvalRequestBean
    {

        /// <summary>
        /// The context in which the Jira expression is evaluated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JiraExpressionEvalContextBean Context { get; set; }

        /// <summary>
        /// The Jira expression to evaluate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expression", Required = Newtonsoft.Json.Required.Always)]
        public string Expression { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JiraExpressionEvaluateContextBean
    {

        /// <summary>
        /// The ID of the board that is available under the `board` variable when evaluating the expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("board", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Board { get; set; }

        /// <summary>
        /// Custom context variables and their types. These variable types are available for use in a custom context:
        /// <br/>
        /// <br/> *  `user`: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.
        /// <br/> *  `issue`: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.
        /// <br/> *  `json`: A JSON object containing custom content.
        /// <br/> *  `list`: A JSON list of `user`, `issue`, or `json` variable types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("custom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Custom { get; set; }

        /// <summary>
        /// The ID of the customer request that is available under the `customerRequest` variable when evaluating the expression. This is the same as the ID of the underlying Jira issue, but the customer request context variable will have a different type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerRequest", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long CustomerRequest { get; set; }

        /// <summary>
        /// The issue that is available under the `issue` variable when evaluating the expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IdOrKeyBean Issue { get; set; }

        /// <summary>
        /// The collection of issues that is available under the `issues` variable when evaluating the expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JexpEvaluateCtxIssues Issues { get; set; }

        /// <summary>
        /// The project that is available under the `project` variable when evaluating the expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IdOrKeyBean Project { get; set; }

        /// <summary>
        /// The ID of the service desk that is available under the `serviceDesk` variable when evaluating the expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceDesk", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ServiceDesk { get; set; }

        /// <summary>
        /// The ID of the sprint that is available under the `sprint` variable when evaluating the expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sprint", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Sprint { get; set; }

    }

    /// <summary>
    /// The request to evaluate a Jira expression. This bean will be replacing `JiraExpressionEvaluateRequest` as part of new `evaluate` endpoint
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JiraExpressionEvaluateRequestBean
    {

        /// <summary>
        /// The context in which the Jira expression is evaluated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JiraExpressionEvaluateContextBean Context { get; set; }

        /// <summary>
        /// The Jira expression to evaluate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expression", Required = Newtonsoft.Json.Required.Always)]
        public string Expression { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JiraExpressionEvaluationMetaDataBean
    {

        /// <summary>
        /// Contains information about the expression complexity. For example, the number of steps it took to evaluate the expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("complexity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JiraExpressionsComplexityBean Complexity { get; set; }

        /// <summary>
        /// Contains information about the `issues` variable in the context. For example, is the issues were loaded with JQL, information about the page will be included here.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssuesMetaBean Issues { get; set; }

    }

    /// <summary>
    /// Details of Jira expressions for analysis.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JiraExpressionForAnalysis
    {

        /// <summary>
        /// Context variables and their types. The type checker assumes that [common context variables](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#context-variables), such as `issue` or `project`, are available in context and sets their type. Use this property to override the default types or provide details of new variables.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextVariables", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> ContextVariables { get; set; }

        /// <summary>
        /// The list of Jira expressions to analyse.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expressions", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> Expressions { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    }

    /// <summary>
    /// The result of evaluating a Jira expression.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JiraExpressionResult
    {

        /// <summary>
        /// Contains various characteristics of the performed expression evaluation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JiraExpressionEvaluationMetaDataBean Meta { get; set; }

        /// <summary>
        /// The value of the evaluated expression. It may be a primitive JSON value or a Jira REST API object. (Some expressions do not produce any meaningful results—for example, an expression that returns a lambda function—if that's the case a simple string representation is returned. These string representations should not be relied upon and may change without notice.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public object Value { get; set; }

    }

    /// <summary>
    /// Details about syntax and type errors. The error details apply to the entire expression, unless the object includes:
    /// <br/>
    /// <br/> *  `line` and `column`
    /// <br/> *  `expression`
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JiraExpressionValidationError
    {

        /// <summary>
        /// The text column in which the error occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("column", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Column { get; set; }

        /// <summary>
        /// The part of the expression in which the error occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expression", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expression { get; set; }

        /// <summary>
        /// The text line in which the error occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("line", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Line { get; set; }

        /// <summary>
        /// Details about the error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        public string Message { get; set; }

        /// <summary>
        /// The error type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JiraExpressionValidationErrorType Type { get; set; }

    }

    /// <summary>
    /// Details about the analysed Jira expression.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JiraExpressionsAnalysis
    {

        /// <summary>
        /// The results of Jira expressions analysis.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<JiraExpressionAnalysis> Results { get; set; } = new System.Collections.ObjectModel.Collection<JiraExpressionAnalysis>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JiraExpressionsComplexityBean
    {

        /// <summary>
        /// The number of Jira REST API beans returned in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("beans", Required = Newtonsoft.Json.Required.Always)]
        public JiraExpressionsComplexityValueBean Beans { get; set; } = new JiraExpressionsComplexityValueBean();

        /// <summary>
        /// The number of expensive operations executed while evaluating the expression. Expensive operations are those that load additional data, such as entity properties, comments, or custom fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expensiveOperations", Required = Newtonsoft.Json.Required.Always)]
        public JiraExpressionsComplexityValueBean ExpensiveOperations { get; set; } = new JiraExpressionsComplexityValueBean();

        /// <summary>
        /// The number of primitive values returned in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primitiveValues", Required = Newtonsoft.Json.Required.Always)]
        public JiraExpressionsComplexityValueBean PrimitiveValues { get; set; } = new JiraExpressionsComplexityValueBean();

        /// <summary>
        /// The number of steps it took to evaluate the expression, where a step is a high-level operation performed by the expression. A step is an operation such as arithmetic, accessing a property, accessing a context variable, or calling a function.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("steps", Required = Newtonsoft.Json.Required.Always)]
        public JiraExpressionsComplexityValueBean Steps { get; set; } = new JiraExpressionsComplexityValueBean();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JiraExpressionsComplexityValueBean
    {

        /// <summary>
        /// The maximum allowed complexity. The evaluation will fail if this value is exceeded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }

        /// <summary>
        /// The complexity value of the current expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public int Value { get; set; }

    }

    /// <summary>
    /// Details of a status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JiraStatus
    {

        /// <summary>
        /// The description of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatusScope Scope { get; set; }

        /// <summary>
        /// The category of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JiraStatusStatusCategory StatusCategory { get; set; }

    }

    /// <summary>
    /// Details of a workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JiraWorkflow
    {

        /// <summary>
        /// The creation date of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created { get; set; }

        /// <summary>
        /// The description of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Indicates if the workflow can be edited.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isEditable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsEditable { get; set; }

        [Newtonsoft.Json.JsonProperty("loopedTransitionContainerLayout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowLayout LoopedTransitionContainerLayout { get; set; }

        /// <summary>
        /// The name of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowScope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("startPointLayout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowLayout StartPointLayout { get; set; }

        /// <summary>
        /// The statuses referenced in this workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowReferenceStatus> Statuses { get; set; }

        /// <summary>
        /// If there is a current [asynchronous task](#async-operations) operation for this workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskId { get; set; }

        /// <summary>
        /// The transitions of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transitions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowTransitions> Transitions { get; set; }

        /// <summary>
        /// The last edited date of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocumentVersion Version { get; set; }

    }

    /// <summary>
    /// Details of a status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JiraWorkflowPreviewStatus
    {

        /// <summary>
        /// The description of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The raw name of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rawName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RawName { get; set; }

        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowPreviewScope Scope { get; set; }

        /// <summary>
        /// The category of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JiraWorkflowPreviewStatusStatusCategory StatusCategory { get; set; }

        /// <summary>
        /// The reference of the status. Unique within this response but not guaranteed to be stable across requests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusReference { get; set; }

    }

    /// <summary>
    /// Details of a status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JiraWorkflowStatus
    {

        /// <summary>
        /// The description of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowScope Scope { get; set; }

        /// <summary>
        /// The category of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JiraWorkflowStatusStatusCategory StatusCategory { get; set; }

        /// <summary>
        /// The reference of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusReference { get; set; }

    }

    /// <summary>
    /// Jql function precomputation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JqlFunctionPrecomputationBean
    {

        /// <summary>
        /// The list of arguments function was invoked with.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("arguments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Arguments { get; set; }

        /// <summary>
        /// The timestamp of the precomputation creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        /// <summary>
        /// The error message to be displayed to the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }

        /// <summary>
        /// The field the function was executed against.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }

        /// <summary>
        /// The function key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("functionKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FunctionKey { get; set; }

        /// <summary>
        /// The name of the function.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("functionName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FunctionName { get; set; }

        /// <summary>
        /// The id of the precomputation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The operator in context of which function was executed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Operator { get; set; }

        /// <summary>
        /// The timestamp of the precomputation last update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

        /// <summary>
        /// The timestamp of the precomputation last usage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("used", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Used { get; set; }

        /// <summary>
        /// The JQL fragment stored as the precomputation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    /// <summary>
    /// Request to fetch precomputations by ID.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JqlFunctionPrecomputationGetByIdRequest
    {

        [Newtonsoft.Json.JsonProperty("precomputationIDs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> PrecomputationIDs { get; set; }

    }

    /// <summary>
    /// Get precomputations by ID response.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JqlFunctionPrecomputationGetByIdResponse
    {

        /// <summary>
        /// List of precomputations that were not found.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notFoundPrecomputationIDs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> NotFoundPrecomputationIDs { get; set; }

        /// <summary>
        /// The list of precomputations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("precomputations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JqlFunctionPrecomputationBean> Precomputations { get; set; }

    }

    /// <summary>
    /// Precomputation id and its new value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JqlFunctionPrecomputationUpdateBean
    {

        /// <summary>
        /// The error message to be displayed to the user if the given function clause is no longer valid during recalculation of the precomputation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }

        /// <summary>
        /// The id of the precomputation to update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The new value of the precomputation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    /// <summary>
    /// Error response returned updating JQL Function precomputations fails.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JqlFunctionPrecomputationUpdateErrorResponse
    {

        /// <summary>
        /// The list of error messages produced by this operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ErrorMessages { get; set; }

        /// <summary>
        /// List of precomputations that were not found.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notFoundPrecomputationIDs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> NotFoundPrecomputationIDs { get; set; }

    }

    /// <summary>
    /// List of pairs (id and value) for precomputation updates.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JqlFunctionPrecomputationUpdateRequestBean
    {

        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JqlFunctionPrecomputationUpdateBean> Values { get; set; }

    }

    /// <summary>
    /// Result of updating JQL Function precomputations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JqlFunctionPrecomputationUpdateResponse
    {

        /// <summary>
        /// List of precomputations that were not found and skipped. Only returned if the request passed skipNotFoundPrecomputations=true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notFoundPrecomputationIDs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> NotFoundPrecomputationIDs { get; set; }

    }

    /// <summary>
    /// A list of JQL queries to parse.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JqlQueriesToParse
    {

        /// <summary>
        /// A list of queries to parse.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queries", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> Queries { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    }

    /// <summary>
    /// The list of JQL queries to sanitize for the given account IDs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JqlQueriesToSanitize
    {

        /// <summary>
        /// The list of JQL queries to sanitize. Must contain unique values. Maximum of 20 queries.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queries", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<JqlQueryToSanitize> Queries { get; set; } = new System.Collections.ObjectModel.Collection<JqlQueryToSanitize>();

    }

    /// <summary>
    /// A parsed JQL query.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JqlQuery
    {

        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JqlQueryOrderByClause OrderBy { get; set; }

        [Newtonsoft.Json.JsonProperty("where", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JqlQueryClause Where { get; set; }

    }

    /// <summary>
    /// A JQL query clause.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JqlQueryClause
    {

    }

    /// <summary>
    /// Details of an operand in a JQL clause.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JqlQueryClauseOperand
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A time predicate for a temporal JQL clause.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JqlQueryClauseTimePredicate
    {

        [Newtonsoft.Json.JsonProperty("operand", Required = Newtonsoft.Json.Required.Always)]
        public JqlQueryClauseOperand Operand { get; set; } = new JqlQueryClauseOperand();

        /// <summary>
        /// The operator between the field and the operand.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JqlQueryClauseTimePredicateOperator Operator { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A field used in a JQL query. See [Advanced searching - fields reference](https://confluence.atlassian.com/x/dAiiLQ) for more information about fields in JQL queries.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JqlQueryField
    {

        /// <summary>
        /// The encoded name of the field, which can be used directly in a JQL query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("encodedName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EncodedName { get; set; }

        /// <summary>
        /// The name of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// When the field refers to a value in an entity property, details of the entity property value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("property", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JqlQueryFieldEntityProperty> Property { get; set; }

    }

    /// <summary>
    /// Details of an entity property.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JqlQueryFieldEntityProperty
    {

        /// <summary>
        /// The object on which the property is set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entity", Required = Newtonsoft.Json.Required.Always)]
        public string Entity { get; set; }

        /// <summary>
        /// The key of the property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; }

        /// <summary>
        /// The path in the property value to query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Always)]
        public string Path { get; set; }

        /// <summary>
        /// The type of the property value extraction. Not available if the extraction for the property is not registered on the instance with the [Entity property](https://developer.atlassian.com/cloud/jira/platform/modules/entity-property/) module.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JqlQueryFieldEntityPropertyType Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details of the order-by JQL clause.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JqlQueryOrderByClause
    {

        /// <summary>
        /// The list of order-by clause fields and their ordering directives.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<JqlQueryOrderByClauseElement> Fields { get; set; } = new System.Collections.ObjectModel.Collection<JqlQueryOrderByClauseElement>();

    }

    /// <summary>
    /// An element of the order-by JQL clause.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JqlQueryOrderByClauseElement
    {

        /// <summary>
        /// The direction in which to order the results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("direction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JqlQueryOrderByClauseElementDirection Direction { get; set; }

        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        public JqlQueryField Field { get; set; } = new JqlQueryField();

    }

    /// <summary>
    /// The JQL query to sanitize for the account ID. If the account ID is null, sanitizing is performed for an anonymous user.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JqlQueryToSanitize
    {

        /// <summary>
        /// The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountId { get; set; }

        /// <summary>
        /// The query to sanitize.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Always)]
        public string Query { get; set; }

    }

    /// <summary>
    /// An operand that can be part of a list operand.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JqlQueryUnitaryOperand
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A JSON object with custom content.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JsonContextVariable
    {

        /// <summary>
        /// Type of custom context variable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

        /// <summary>
        /// A JSON object containing custom content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JsonNode
    {

        [Newtonsoft.Json.JsonProperty("array", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Array { get; set; }

        [Newtonsoft.Json.JsonProperty("bigDecimal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool BigDecimal { get; set; }

        [Newtonsoft.Json.JsonProperty("bigInteger", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool BigInteger { get; set; }

        [Newtonsoft.Json.JsonProperty("bigIntegerValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int BigIntegerValue { get; set; }

        [Newtonsoft.Json.JsonProperty("binary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Binary { get; set; }

        [Newtonsoft.Json.JsonProperty("binaryValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<byte[]> BinaryValue { get; set; }

        [Newtonsoft.Json.JsonProperty("boolean", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Boolean { get; set; }

        [Newtonsoft.Json.JsonProperty("booleanValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool BooleanValue { get; set; }

        [Newtonsoft.Json.JsonProperty("containerNode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ContainerNode { get; set; }

        [Newtonsoft.Json.JsonProperty("decimalValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double DecimalValue { get; set; }

        [Newtonsoft.Json.JsonProperty("double", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Double { get; set; }

        [Newtonsoft.Json.JsonProperty("doubleValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double DoubleValue { get; set; }

        [Newtonsoft.Json.JsonProperty("elements", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Elements { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldNames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object FieldNames { get; set; }

        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Fields { get; set; }

        [Newtonsoft.Json.JsonProperty("floatingPointNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool FloatingPointNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("int", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Int { get; set; }

        [Newtonsoft.Json.JsonProperty("intValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IntValue { get; set; }

        [Newtonsoft.Json.JsonProperty("integralNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IntegralNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("long", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Long { get; set; }

        [Newtonsoft.Json.JsonProperty("longValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long LongValue { get; set; }

        [Newtonsoft.Json.JsonProperty("missingNode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool MissingNode { get; set; }

        [Newtonsoft.Json.JsonProperty("null", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Null { get; set; }

        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Number { get; set; }

        [Newtonsoft.Json.JsonProperty("numberType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JsonNodeNumberType NumberType { get; set; }

        [Newtonsoft.Json.JsonProperty("numberValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double NumberValue { get; set; }

        [Newtonsoft.Json.JsonProperty("object", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Object { get; set; }

        [Newtonsoft.Json.JsonProperty("pojo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Pojo { get; set; }

        [Newtonsoft.Json.JsonProperty("textValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TextValue { get; set; }

        [Newtonsoft.Json.JsonProperty("textual", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Textual { get; set; }

        [Newtonsoft.Json.JsonProperty("valueAsBoolean", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ValueAsBoolean { get; set; }

        [Newtonsoft.Json.JsonProperty("valueAsDouble", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ValueAsDouble { get; set; }

        [Newtonsoft.Json.JsonProperty("valueAsInt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ValueAsInt { get; set; }

        [Newtonsoft.Json.JsonProperty("valueAsLong", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ValueAsLong { get; set; }

        [Newtonsoft.Json.JsonProperty("valueAsText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ValueAsText { get; set; }

        [Newtonsoft.Json.JsonProperty("valueNode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ValueNode { get; set; }

    }

    /// <summary>
    /// The schema of a field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class JsonTypeBean
    {

        /// <summary>
        /// If the field is a custom field, the configuration of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Configuration { get; set; }

        /// <summary>
        /// If the field is a custom field, the URI of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("custom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Custom { get; set; }

        /// <summary>
        /// If the field is a custom field, the custom ID of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long CustomId { get; set; }

        /// <summary>
        /// When the data type is an array, the name of the field items within the array.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Items { get; set; }

        /// <summary>
        /// If the field is a system field, the name of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("system", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string System { get; set; }

        /// <summary>
        /// The data type of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

    }

    /// <summary>
    /// An operand that is a JQL keyword. See [Advanced searching - keywords reference](https://confluence.atlassian.com/jiracorecloud/advanced-searching-keywords-reference-765593717.html#Advancedsearching-keywordsreference-EMPTYEMPTY) for more information about operand keywords.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class KeywordOperand
    {

        /// <summary>
        /// The keyword that is the operand value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyword", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public KeywordOperandKeyword Keyword { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class LegacyJackson1ListAttachment : System.Collections.ObjectModel.Collection<Attachment>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class LegacyJackson1ListColumnItem : System.Collections.ObjectModel.Collection<ColumnItem>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class LegacyJackson1ListIssueEvent : System.Collections.ObjectModel.Collection<IssueEvent>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class LegacyJackson1ListIssueTypeWithStatus : System.Collections.ObjectModel.Collection<IssueTypeWithStatus>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class LegacyJackson1ListProject : System.Collections.ObjectModel.Collection<Project>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class LegacyJackson1ListProjectComponent : System.Collections.ObjectModel.Collection<ProjectComponent>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class LegacyJackson1ListProjectRoleDetails : System.Collections.ObjectModel.Collection<ProjectRoleDetails>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class LegacyJackson1ListProjectType : System.Collections.ObjectModel.Collection<ProjectType>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class LegacyJackson1ListUserMigrationBean : System.Collections.ObjectModel.Collection<UserMigrationBean>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class LegacyJackson1ListVersion : System.Collections.ObjectModel.Collection<Version>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class LegacyJackson1ListWorklog : System.Collections.ObjectModel.Collection<Worklog>
    {

    }

    /// <summary>
    /// Details about a license for the Jira instance.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class License
    {

        /// <summary>
        /// The applications under this license.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("applications", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<LicensedApplication> Applications { get; set; } = new System.Collections.ObjectModel.Collection<LicensedApplication>();

    }

    /// <summary>
    /// A metric that provides insight into the active licence details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class LicenseMetric
    {

        /// <summary>
        /// The key of a specific license metric.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The calculated value of a licence metric linked to the key. An example licence metric is the approximate number of user accounts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    /// <summary>
    /// Details about a licensed Jira application.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class LicensedApplication
    {

        /// <summary>
        /// The ID of the application.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The licensing plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("plan", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LicensedApplicationPlan Plan { get; set; }

    }

    /// <summary>
    /// Details a link group, which defines issue operations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class LinkGroup
    {

        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LinkGroup> Groups { get; set; }

        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SimpleLink Header { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SimpleLink> Links { get; set; }

        [Newtonsoft.Json.JsonProperty("styleClass", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StyleClass { get; set; }

        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Weight { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class LinkIssueRequestJsonBean
    {

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comment Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("inwardIssue", Required = Newtonsoft.Json.Required.Always)]
        public LinkedIssue InwardIssue { get; set; } = new LinkedIssue();

        [Newtonsoft.Json.JsonProperty("outwardIssue", Required = Newtonsoft.Json.Required.Always)]
        public LinkedIssue OutwardIssue { get; set; } = new LinkedIssue();

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public IssueLinkType Type { get; set; } = new IssueLinkType();

    }

    /// <summary>
    /// The ID or key of a linked issue.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class LinkedIssue
    {

        /// <summary>
        /// The fields associated with the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Fields Fields { get; set; }

        /// <summary>
        /// The ID of an issue. Required if `key` isn't provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The key of an issue. Required if `id` isn't provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The URL of the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

    }

    /// <summary>
    /// An operand that is a list of values.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ListOperand
    {

        /// <summary>
        /// Encoded operand, which can be used directly in a JQL query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("encodedOperand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EncodedOperand { get; set; }

        /// <summary>
        /// The list of operand values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<JqlQueryUnitaryOperand> Values { get; set; } = new System.Collections.ObjectModel.Collection<JqlQueryUnitaryOperand>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ListWrapperCallbackApplicationRole
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ListWrapperCallbackGroupName
    {

    }

    /// <summary>
    /// Details of a locale.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Locale
    {

        /// <summary>
        /// The locale code. The Java the locale format is used: a two character language code (ISO 639), an underscore, and two letter country code (ISO 3166). For example, en\_US represents a locale of English (United States). Required on create.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locale1 { get; set; }

    }

    /// <summary>
    /// Overrides, for the selected issue types, any status mappings provided in `statusMappingsByWorkflows`. Status mappings are required when the new workflow for an issue type doesn't contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class MappingsByIssueTypeOverride
    {

        /// <summary>
        /// The ID of the issue type for this mapping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeId", Required = Newtonsoft.Json.Required.Always)]
        public string IssueTypeId { get; set; }

        /// <summary>
        /// The list of status mappings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusMappings", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<WorkflowAssociationStatusMapping> StatusMappings { get; set; } = new System.Collections.ObjectModel.Collection<WorkflowAssociationStatusMapping>();

    }

    /// <summary>
    /// The status mappings by workflows. Status mappings are required when the new workflow for an issue type doesn't contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class MappingsByWorkflow
    {

        /// <summary>
        /// The ID of the new workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newWorkflowId", Required = Newtonsoft.Json.Required.Always)]
        public string NewWorkflowId { get; set; }

        /// <summary>
        /// The ID of the old workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oldWorkflowId", Required = Newtonsoft.Json.Required.Always)]
        public string OldWorkflowId { get; set; }

        /// <summary>
        /// The list of status mappings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusMappings", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<WorkflowAssociationStatusMapping> StatusMappings { get; set; } = new System.Collections.ObjectModel.Collection<WorkflowAssociationStatusMapping>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class MoveFieldBean
    {

        /// <summary>
        /// The ID of the screen tab field after which to place the moved screen tab field. Required if `position` isn't provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("after", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri After { get; set; }

        /// <summary>
        /// The named position to which the screen tab field should be moved. Required if `after` isn't provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MoveFieldBeanPosition Position { get; set; }

    }

    /// <summary>
    /// A list of issues and their respective properties to set or update. See [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/) for more information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class MultiIssueEntityProperties
    {

        /// <summary>
        /// A list of issue IDs and their respective properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueEntityPropertiesForMultiUpdate> Issues { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class MultipartFile
    {

        [Newtonsoft.Json.JsonProperty("bytes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<byte[]> Bytes { get; set; }

        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentType { get; set; }

        [Newtonsoft.Json.JsonProperty("empty", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Empty { get; set; }

        [Newtonsoft.Json.JsonProperty("inputStream", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object InputStream { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("originalFilename", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalFilename { get; set; }

        [Newtonsoft.Json.JsonProperty("resource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Resource Resource { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Size { get; set; }

    }

    /// <summary>
    /// A custom field and its new value with a list of issue to update.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class MultipleCustomFieldValuesUpdate
    {

        /// <summary>
        /// The ID or key of the custom field. For example, `customfield_10010`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customField", Required = Newtonsoft.Json.Required.Always)]
        public string CustomField { get; set; }

        /// <summary>
        /// The list of issue IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<long> IssueIds { get; set; } = new System.Collections.ObjectModel.Collection<long>();

        /// <summary>
        /// The value for the custom field. The value must be compatible with the [custom field type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#data-types) as follows:
        /// <br/>
        /// <br/> *  `string` the value must be a string.
        /// <br/> *  `number` the value must be a number.
        /// <br/> *  `datetime` the value must be a string that represents a date in the ISO format or the simplified extended ISO format. For example, `"2023-01-18T12:00:00-03:00"` or `"2023-01-18T12:00:00.000Z"`. However, the milliseconds part is ignored.
        /// <br/> *  `user` the value must be an object that contains the `accountId` field.
        /// <br/> *  `group` the value must be an object that contains the group `name` or `groupId` field. Because group names can change, we recommend using `groupId`.
        /// <br/>
        /// <br/>A list of appropriate values must be provided if the field is of the `list` [collection type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#collection-types).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public object Value { get; set; }

    }

    /// <summary>
    /// List of updates for a custom fields.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class MultipleCustomFieldValuesUpdateDetails
    {

        [Newtonsoft.Json.JsonProperty("updates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MultipleCustomFieldValuesUpdate> Updates { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class NestedResponse
    {

        [Newtonsoft.Json.JsonProperty("errorCollection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorCollection ErrorCollection { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }

        [Newtonsoft.Json.JsonProperty("warningCollection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarningCollection WarningCollection { get; set; }

    }

    /// <summary>
    /// The user details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class NewUserDetails
    {

        /// <summary>
        /// Deprecated, do not use.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("applicationKeys", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ApplicationKeys { get; set; }

        /// <summary>
        /// This property is no longer available. If the user has an Atlassian account, their display name is not changed. If the user does not have an Atlassian account, they are sent an email asking them set up an account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The email address for the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Always)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// This property is no longer available. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// This property is no longer available. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// This property is no longer available. If the user has an Atlassian account, their password is not changed. If the user does not have an Atlassian account, they are sent an email asking them set up an account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        /// <summary>
        /// Products the new user has access to. Valid products are: jira-core, jira-servicedesk, jira-product-discovery, jira-software. To create a user without product access, set this field to be an empty array.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("products", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> Products { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The URL of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class NonWorkingDay
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("iso8601Date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Iso8601Date { get; set; }

    }

    /// <summary>
    /// Details about a notification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Notification
    {

        /// <summary>
        /// The HTML body of the email notification for the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("htmlBody", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HtmlBody { get; set; }

        /// <summary>
        /// Restricts the notifications to users with the specified permissions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restrict", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NotificationRecipientsRestrictions Restrict { get; set; }

        /// <summary>
        /// The subject of the email notification for the issue. If this is not specified, then the subject is set to the issue key and summary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subject { get; set; }

        /// <summary>
        /// The plain text body of the email notification for the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("textBody", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TextBody { get; set; }

        /// <summary>
        /// The recipients of the email notification for the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NotificationRecipients To { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about a notification event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class NotificationEvent
    {

        /// <summary>
        /// The description of the event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the event. The event can be a [Jira system event](https://confluence.atlassian.com/x/8YdKLg#Creatinganotificationscheme-eventsEvents) or a [custom event](https://confluence.atlassian.com/x/AIlKLg).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The name of the event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The template of the event. Only custom events configured by Jira administrators have template.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("templateEvent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NotificationEvent TemplateEvent { get; set; }

    }

    /// <summary>
    /// Details of the users and groups to receive the notification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class NotificationRecipients
    {

        /// <summary>
        /// Whether the notification should be sent to the issue's assignees.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Assignee { get; set; }

        /// <summary>
        /// List of groupIds to receive the notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> GroupIds { get; set; }

        /// <summary>
        /// List of groups to receive the notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GroupName> Groups { get; set; }

        /// <summary>
        /// Whether the notification should be sent to the issue's reporter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reporter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Reporter { get; set; }

        /// <summary>
        /// List of users to receive the notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("users", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserDetails> Users { get; set; }

        /// <summary>
        /// Whether the notification should be sent to the issue's voters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("voters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Voters { get; set; }

        /// <summary>
        /// Whether the notification should be sent to the issue's watchers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("watchers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Watchers { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details of the group membership or permissions needed to receive the notification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class NotificationRecipientsRestrictions
    {

        /// <summary>
        /// List of groupId memberships required to receive the notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> GroupIds { get; set; }

        /// <summary>
        /// List of group memberships required to receive the notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GroupName> Groups { get; set; }

        /// <summary>
        /// List of permissions required to receive the notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RestrictedPermission> Permissions { get; set; }

    }

    /// <summary>
    /// Details about a notification scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class NotificationScheme
    {

        /// <summary>
        /// The description of the notification scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Expand options that include additional notification scheme details in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// The ID of the notification scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The name of the notification scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The notification events and associated recipients.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationSchemeEvents", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NotificationSchemeEvent> NotificationSchemeEvents { get; set; }

        /// <summary>
        /// The list of project IDs associated with the notification scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> Projects { get; set; }

        /// <summary>
        /// The scope of the notification scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class NotificationSchemeAndProjectMappingJsonBean
    {

        [Newtonsoft.Json.JsonProperty("notificationSchemeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotificationSchemeId { get; set; }

        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectId { get; set; }

    }

    /// <summary>
    /// Details about a notification scheme event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class NotificationSchemeEvent
    {

        [Newtonsoft.Json.JsonProperty("event", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NotificationEvent Event { get; set; }

        [Newtonsoft.Json.JsonProperty("notifications", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EventNotification> Notifications { get; set; }

    }

    /// <summary>
    /// Details of a notification scheme event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class NotificationSchemeEventDetails
    {

        /// <summary>
        /// The ID of the event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("event", Required = Newtonsoft.Json.Required.Always)]
        public NotificationSchemeEventTypeId Event { get; set; } = new NotificationSchemeEventTypeId();

        /// <summary>
        /// The list of notifications mapped to a specified event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notifications", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<NotificationSchemeNotificationDetails> Notifications { get; set; } = new System.Collections.ObjectModel.Collection<NotificationSchemeNotificationDetails>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The event ID to use for reference in the payload
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class NotificationSchemeEventIDPayload
    {

        /// <summary>
        /// The event ID to use for reference in the payload
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

    }

    /// <summary>
    /// The payload for creating a notification scheme event. Defines which notifications should be sent for a specific event
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class NotificationSchemeEventPayload
    {

        [Newtonsoft.Json.JsonProperty("event", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NotificationSchemeEventIDPayload Event { get; set; }

        /// <summary>
        /// The configuration for notification recipents
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notifications", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NotificationSchemeNotificationDetailsPayload> Notifications { get; set; }

    }

    /// <summary>
    /// The ID of an event that is being mapped to notifications.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class NotificationSchemeEventTypeId
    {

        /// <summary>
        /// The ID of the notification scheme event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The ID of a notification scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class NotificationSchemeId
    {

        /// <summary>
        /// The ID of a notification scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details of a notification within a notification scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class NotificationSchemeNotificationDetails
    {

        /// <summary>
        /// The notification type, e.g `CurrentAssignee`, `Group`, `EmailAddress`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationType", Required = Newtonsoft.Json.Required.Always)]
        public string NotificationType { get; set; }

        /// <summary>
        /// The value corresponding to the specified notification type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parameter { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The configuration for notification recipents
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class NotificationSchemeNotificationDetailsPayload
    {

        /// <summary>
        /// The type of notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotificationType { get; set; }

        /// <summary>
        /// The parameter of the notification, should be eiither null if not required, or PCRI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parameter { get; set; }

    }

    /// <summary>
    /// The payload for creating a notification scheme. The user has to supply the ID for the default notification scheme. For CMP this is provided in the project payload and should be left empty, for TMP it's provided using this payload
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class NotificationSchemePayload
    {

        /// <summary>
        /// The description of the notification scheme
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the notification scheme
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The events and notifications for the notification scheme
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationSchemeEvents", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NotificationSchemeEventPayload> NotificationSchemeEvents { get; set; }

        /// <summary>
        /// The strategy to use when there is a conflict with an existing entity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("onConflict", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NotificationSchemePayloadOnConflict OnConflict { get; set; }

        [Newtonsoft.Json.JsonProperty("pcri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier Pcri { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class OldToNewSecurityLevelMappingsBean
    {

        /// <summary>
        /// The new issue security level ID. Providing null will clear the assigned old level from issues.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newLevelId", Required = Newtonsoft.Json.Required.Always)]
        public string NewLevelId { get; set; }

        /// <summary>
        /// The old issue security level ID. Providing null will remap all issues without any assigned levels.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oldLevelId", Required = Newtonsoft.Json.Required.Always)]
        public string OldLevelId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class OperationMessage
    {

        /// <summary>
        /// The human-readable message that describes the result.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        public string Message { get; set; }

        /// <summary>
        /// The status code of the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.Always)]
        public int StatusCode { get; set; }

    }

    /// <summary>
    /// Details of the operations that can be performed on the issue.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Operations
    {

        /// <summary>
        /// Details of the link groups defining issue operations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkGroups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LinkGroup> LinkGroups { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An ordered list of custom field option IDs and information on where to move them.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class OrderOfCustomFieldOptions
    {

        /// <summary>
        /// The ID of the custom field option or cascading option to place the moved options after. Required if `position` isn't provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("after", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string After { get; set; }

        /// <summary>
        /// A list of IDs of custom field options to move. The order of the custom field option IDs in the list is the order they are given after the move. The list must contain custom field options or cascading options, but not both.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customFieldOptionIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> CustomFieldOptionIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The position the custom field options should be moved to. Required if `after` isn't provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderOfCustomFieldOptionsPosition Position { get; set; }

    }

    /// <summary>
    /// An ordered list of issue type IDs and information about where to move them.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class OrderOfIssueTypes
    {

        /// <summary>
        /// The ID of the issue type to place the moved issue types after. Required if `position` isn't provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("after", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string After { get; set; }

        /// <summary>
        /// A list of the issue type IDs to move. The order of the issue type IDs in the list is the order they are given after the move.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> IssueTypeIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The position the issue types should be moved to. Required if `after` isn't provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderOfIssueTypesPosition Position { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBean2ComponentJsonBean
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ComponentJsonBean> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBean2JqlFunctionPrecomputationBean
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JqlFunctionPrecomputationBean> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanBulkContextualConfiguration
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BulkContextualConfiguration> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanChangelog
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Changelog> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanComment
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Comment> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanComponentWithIssueCount
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ComponentWithIssueCount> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanContext
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Context> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanContextForProjectAndIssueType
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContextForProjectAndIssueType> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanContextualConfiguration
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContextualConfiguration> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanCustomFieldContext
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomFieldContext> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanCustomFieldContextDefaultValue
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomFieldContextDefaultValue> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanCustomFieldContextOption
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomFieldContextOption> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanCustomFieldContextProjectMapping
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomFieldContextProjectMapping> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanDashboard
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Dashboard> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanField
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Field> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanFieldConfigurationDetails
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldConfigurationDetails> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanFieldConfigurationIssueTypeItem
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldConfigurationIssueTypeItem> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanFieldConfigurationItem
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldConfigurationItem> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanFieldConfigurationScheme
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldConfigurationScheme> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanFieldConfigurationSchemeProjects
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldConfigurationSchemeProjects> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanFilterDetails
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FilterDetails> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanGroupDetails
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GroupDetails> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanIssueFieldOption
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueFieldOption> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanIssueSecurityLevelMember
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueSecurityLevelMember> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanIssueSecuritySchemeToProjectMapping
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueSecuritySchemeToProjectMapping> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanIssueTypeScheme
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueTypeScheme> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanIssueTypeSchemeMapping
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueTypeSchemeMapping> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanIssueTypeSchemeProjects
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueTypeSchemeProjects> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanIssueTypeScreenScheme
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueTypeScreenScheme> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanIssueTypeScreenSchemeItem
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueTypeScreenSchemeItem> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanIssueTypeScreenSchemesProjects
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueTypeScreenSchemesProjects> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanIssueTypeToContextMapping
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueTypeToContextMapping> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanNotificationScheme
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NotificationScheme> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanNotificationSchemeAndProjectMappingJsonBean
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NotificationSchemeAndProjectMappingJsonBean> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanPriority
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Priority> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanPrioritySchemeWithPaginatedPrioritiesAndProjects
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PrioritySchemeWithPaginatedPrioritiesAndProjects> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanPriorityWithSequence
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PriorityWithSequence> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanProject
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Project> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanProjectDetails
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectDetails> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanResolutionJsonBean
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ResolutionJsonBean> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanScreen
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Screen> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanScreenScheme
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ScreenScheme> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanScreenWithTab
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ScreenWithTab> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanSecurityLevel
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SecurityLevel> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanSecurityLevelMember
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SecurityLevelMember> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanSecuritySchemeWithProjects
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SecuritySchemeWithProjects> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanString
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanUiModificationDetails
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UiModificationDetails> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanUser
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<User> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanUserDetails
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserDetails> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanUserKey
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserKey> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanVersion
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Version> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanWebhook
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Webhook> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanWorkflow
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Workflow> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanWorkflowScheme
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowScheme> Values { get; set; }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageBeanWorkflowTransitionRules
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowTransitionRules> Values { get; set; }

    }

    /// <summary>
    /// A page of changelogs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageOfChangelogs
    {

        /// <summary>
        /// The list of changelogs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("histories", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Changelog> Histories { get; set; }

        /// <summary>
        /// The maximum number of results that could be on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// The index of the first item returned on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StartAt { get; set; }

        /// <summary>
        /// The number of results on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Total { get; set; }

    }

    /// <summary>
    /// A page of comments.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageOfComments
    {

        /// <summary>
        /// The list of comments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Comment> Comments { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A page of CreateMetaIssueType with Field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageOfCreateMetaIssueTypeWithField
    {

        /// <summary>
        /// The collection of FieldCreateMetaBeans.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldCreateMetadata> Fields { get; set; }

        /// <summary>
        /// The maximum number of items to return per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldCreateMetadata> Results { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The total number of items in all pages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A page of CreateMetaIssueTypes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageOfCreateMetaIssueTypes
    {

        [Newtonsoft.Json.JsonProperty("createMetaIssueType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueTypeIssueCreateMetadata> CreateMetaIssueType { get; set; }

        /// <summary>
        /// The list of CreateMetaIssueType.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueTypeIssueCreateMetadata> IssueTypes { get; set; }

        /// <summary>
        /// The maximum number of items to return per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The total number of items in all pages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A page containing dashboard details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageOfDashboards
    {

        /// <summary>
        /// List of dashboards.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dashboards", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Dashboard> Dashboards { get; set; }

        /// <summary>
        /// The maximum number of results that could be on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// The URL of the next page of results, if any.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next { get; set; }

        /// <summary>
        /// The URL of the previous page of results, if any.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prev", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prev { get; set; }

        /// <summary>
        /// The index of the first item returned on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StartAt { get; set; }

        /// <summary>
        /// The number of results on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Total { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageOfStatuses
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// The URL of the next page of results, if any.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPage { get; set; }

        /// <summary>
        /// The URL of this page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        /// <summary>
        /// The index of the first item returned on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// Number of items that satisfy the search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JiraStatus> Values { get; set; }

    }

    /// <summary>
    /// Paginated list of worklog details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageOfWorklogs
    {

        /// <summary>
        /// The maximum number of results that could be on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// The index of the first item returned on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StartAt { get; set; }

        /// <summary>
        /// The number of results on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Total { get; set; }

        /// <summary>
        /// List of worklogs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("worklogs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Worklog> Worklogs { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageWithCursorGetPlanResponseForPage
    {

        [Newtonsoft.Json.JsonProperty("cursor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cursor { get; set; }

        [Newtonsoft.Json.JsonProperty("last", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Last { get; set; }

        [Newtonsoft.Json.JsonProperty("nextPageCursor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageCursor { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Size { get; set; }

        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GetPlanResponseForPage> Values { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PageWithCursorGetTeamResponseForPage
    {

        [Newtonsoft.Json.JsonProperty("cursor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cursor { get; set; }

        [Newtonsoft.Json.JsonProperty("last", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Last { get; set; }

        [Newtonsoft.Json.JsonProperty("nextPageCursor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageCursor { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Size { get; set; }

        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GetTeamResponseForPage> Values { get; set; }

    }

    /// <summary>
    /// A paged list. To access additional details append `[start-index:end-index]` to the expand request. For example, `?expand=sharedUsers[10:40]` returns a list starting at item 10 and finishing at item 40.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PagedListUserDetailsApplicationUser
    {

        /// <summary>
        /// The index of the last item returned on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("end-index", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EndIndex { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserDetails> Items { get; set; }

        /// <summary>
        /// The maximum number of results that could be on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("max-results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// The number of items on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Size { get; set; }

        /// <summary>
        /// The index of the first item returned on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start-index", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StartIndex { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PaginatedResponseComment
    {

        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Comment> Results { get; set; }

        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PaginatedResponseFieldCreateMetadata
    {

        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldCreateMetadata> Results { get; set; }

        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PaginatedResponseIssueTypeIssueCreateMetadata
    {

        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueTypeIssueCreateMetadata> Results { get; set; }

        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

    }

    /// <summary>
    /// A list of parsed JQL queries.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ParsedJqlQueries
    {

        /// <summary>
        /// A list of parsed JQL queries.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queries", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<ParsedJqlQuery> Queries { get; set; } = new System.Collections.ObjectModel.Collection<ParsedJqlQuery>();

    }

    /// <summary>
    /// Details of a parsed JQL query.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ParsedJqlQuery
    {

        /// <summary>
        /// The list of syntax or validation errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Errors { get; set; }

        /// <summary>
        /// The JQL query that was parsed and validated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Always)]
        public string Query { get; set; }

        /// <summary>
        /// The syntax tree of the query. Empty if the query was invalid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("structure", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JqlQuery Structure { get; set; }

        /// <summary>
        /// The list of warning messages
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Warnings { get; set; }

    }

    /// <summary>
    /// Details for permissions of shareable entities
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PermissionDetails
    {

        /// <summary>
        /// The edit permissions for the shareable entities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("editPermissions", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<SharePermission> EditPermissions { get; set; } = new System.Collections.ObjectModel.Collection<SharePermission>();

        /// <summary>
        /// The share permissions for the shareable entities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sharePermissions", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<SharePermission> SharePermissions { get; set; } = new System.Collections.ObjectModel.Collection<SharePermission>();

    }

    /// <summary>
    /// Details about a permission granted to a user or group.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PermissionGrant
    {

        /// <summary>
        /// The user or group being granted the permission. It consists of a `type`, a type-dependent `parameter` and a type-dependent `value`. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PermissionHolder Holder { get; set; }

        /// <summary>
        /// The ID of the permission granted details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The permission to grant. This permission can be one of the built-in permissions or a custom permission added by an app. See [Built-in permissions](../api-group-permission-schemes/#built-in-permissions) in *Get all permission schemes* for more information about the built-in permissions. See the [project permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/) and [global permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/) module documentation for more information about custom permissions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Permission { get; set; }

        /// <summary>
        /// The URL of the permission granted details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of permission grants
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PermissionGrantDTO
    {

        [Newtonsoft.Json.JsonProperty("applicationAccess", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ApplicationAccess { get; set; }

        [Newtonsoft.Json.JsonProperty("groupCustomFields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectCreateResourceIdentifier> GroupCustomFields { get; set; }

        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectCreateResourceIdentifier> Groups { get; set; }

        [Newtonsoft.Json.JsonProperty("permissionKeys", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> PermissionKeys { get; set; }

        [Newtonsoft.Json.JsonProperty("projectRoles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectCreateResourceIdentifier> ProjectRoles { get; set; }

        [Newtonsoft.Json.JsonProperty("specialGrants", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SpecialGrants { get; set; }

        [Newtonsoft.Json.JsonProperty("userCustomFields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectCreateResourceIdentifier> UserCustomFields { get; set; }

        [Newtonsoft.Json.JsonProperty("users", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectCreateResourceIdentifier> Users { get; set; }

    }

    /// <summary>
    /// List of permission grants.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PermissionGrants
    {

        /// <summary>
        /// Expand options that include additional permission grant details in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// Permission grants list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PermissionGrant> Permissions { get; set; }

    }

    /// <summary>
    /// Details of a user, group, field, or project role that holds a permission. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PermissionHolder
    {

        /// <summary>
        /// Expand options that include additional permission holder details in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// As a group's name can change, use of `value` is recommended. The identifier associated withthe `type` value that defines the holder of the permission.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parameter { get; set; }

        /// <summary>
        /// The type of permission holder.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

        /// <summary>
        /// The identifier associated with the `type` value that defines the holder of the permission.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    /// <summary>
    /// The payload to create a permission scheme
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PermissionPayloadDTO
    {

        /// <summary>
        /// Configuration to generate addon role. Default is false if null. Only applies to GLOBAL-scoped permission scheme
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addAddonRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AddAddonRole { get; set; }

        /// <summary>
        /// The description of the permission scheme
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// List of permission grants
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grants", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PermissionGrantDTO> Grants { get; set; }

        /// <summary>
        /// The name of the permission scheme
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The strategy to use when there is a conflict with an existing permission scheme. FAIL - Fail execution, this always needs to be unique; USE - Use the existing entity and ignore new entity parameters; NEW - If the entity exist, try and create a new one with a different name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("onConflict", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PermissionPayloadDTOOnConflict OnConflict { get; set; } = Atlassian.Jira.Swagger.PermissionPayloadDTOOnConflict.FAIL;

        [Newtonsoft.Json.JsonProperty("pcri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier Pcri { get; set; }

    }

    /// <summary>
    /// Details of a permission scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PermissionScheme
    {

        /// <summary>
        /// A description for the permission scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The expand options available for the permission scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// The ID of the permission scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The name of the permission scheme. Must be unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// The permission scheme to create or update. See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PermissionGrant> Permissions { get; set; }

        /// <summary>
        /// The scope of the permission scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        /// <summary>
        /// The URL of the permission scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of all permission schemes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PermissionSchemes
    {

        /// <summary>
        /// Permission schemes list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionSchemes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PermissionScheme> PermissionSchemes1 { get; set; }

    }

    /// <summary>
    /// Details about permissions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Permissions
    {

        /// <summary>
        /// List of permissions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, UserPermission> Permissions1 { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PermissionsKeysBean
    {

        /// <summary>
        /// A list of permission keys.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> Permissions { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    }

    /// <summary>
    /// A list of projects in which a user is granted permissions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PermittedProjects
    {

        /// <summary>
        /// A list of projects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectIdentifierBean> Projects { get; set; }

    }

    /// <summary>
    /// Condition group configuration for workflow transitions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PreviewConditionGroupConfiguration
    {

        /// <summary>
        /// The nested conditions of the condition group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditionGroups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PreviewConditionGroupConfiguration> ConditionGroups { get; set; }

        /// <summary>
        /// The rules for this condition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PreviewRuleConfiguration> Conditions { get; set; }

        /// <summary>
        /// Determines how the conditions in the group are evaluated. Accepts either `ANY` or `ALL`. If `ANY` is used, at least one condition in the group must be true for the group to evaluate to true. If `ALL` is used, all conditions in the group must be true for the group to evaluate to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PreviewConditionGroupConfigurationOperation Operation { get; set; }

    }

    /// <summary>
    /// Rule configuration for workflow transitions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PreviewRuleConfiguration
    {

        /// <summary>
        /// A transient identifier for this element, unique within this response but not guaranteed to stable across requests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The parameters of the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Parameters { get; set; }

        /// <summary>
        /// The rule key of the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RuleKey { get; set; }

    }

    /// <summary>
    /// Trigger configuration for workflow transitions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PreviewTrigger
    {

        /// <summary>
        /// The ID of the trigger.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The key of the trigger rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RuleKey { get; set; }

    }

    /// <summary>
    /// An issue priority.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Priority
    {

        /// <summary>
        /// The avatarId of the avatar for the issue priority. This parameter is nullable and when set, this avatar references the universal avatar APIs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long AvatarId { get; set; }

        /// <summary>
        /// The description of the issue priority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The URL of the icon for the issue priority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iconUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IconUrl { get; set; }

        /// <summary>
        /// The ID of the issue priority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Whether this priority is the default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// The name of the issue priority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Priority schemes associated with the issue priority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExpandPrioritySchemePage Schemes { get; set; }

        /// <summary>
        /// The URL of the issue priority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        /// <summary>
        /// The color used to indicate the issue priority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusColor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusColor { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The ID of an issue priority.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PriorityId
    {

        /// <summary>
        /// The ID of the issue priority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Mapping of issue priorities for changes in priority schemes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PriorityMapping
    {

        /// <summary>
        /// The mapping of priorities for issues being migrated **into** this priority scheme. Key is the old priority ID, value is the new priority ID (must exist in this priority scheme).
        /// <br/>
        /// <br/>E.g. The current priority scheme has priority ID `10001`. Issues with priority ID `10000` are being migrated into this priority scheme will need mapping to new priorities. The `in` mapping would be `{"10000": 10001}`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("in", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, long> In { get; set; }

        /// <summary>
        /// The mapping of priorities for issues being migrated **out of** this priority scheme. Key is the old priority ID (must exist in this priority scheme), value is the new priority ID (must exist in the default priority scheme). Required for updating an existing priority scheme. Not used when creating a new priority scheme.
        /// <br/>
        /// <br/>E.g. The current priority scheme has priority ID `10001`. Issues with priority ID `10001` are being migrated out of this priority scheme will need mapping to new priorities. The `out` mapping would be `{"10001": 10000}`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("out", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, long> Out { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PrioritySchemeChangesWithoutMappings
    {

        /// <summary>
        /// Affected entity ids.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ids", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<long> Ids { get; set; } = new System.Collections.ObjectModel.Collection<long>();

    }

    /// <summary>
    /// The ID of a priority scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PrioritySchemeId
    {

        /// <summary>
        /// The ID of the priority scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The in-progress issue migration task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("task", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskProgressBeanJsonNode Task { get; set; }

    }

    /// <summary>
    /// A priority scheme with paginated priorities and projects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PrioritySchemeWithPaginatedPrioritiesAndProjects
    {

        [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Default { get; set; }

        /// <summary>
        /// The ID of the default issue priority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultPriorityId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultPriorityId { get; set; }

        /// <summary>
        /// The description of the priority scheme
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the priority scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// The name of the priority scheme
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// The paginated list of priorities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priorities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PageBeanPriorityWithSequence Priorities { get; set; }

        /// <summary>
        /// The paginated list of projects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PageBeanProjectDetails Projects { get; set; }

        /// <summary>
        /// The URL of the priority scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An issue priority with sequence information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PriorityWithSequence
    {

        /// <summary>
        /// The description of the issue priority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The URL of the icon for the issue priority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iconUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IconUrl { get; set; }

        /// <summary>
        /// The ID of the issue priority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Whether this priority is the default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// The name of the issue priority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The URL of the issue priority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        /// <summary>
        /// The sequence of the issue priority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sequence { get; set; }

        /// <summary>
        /// The color used to indicate the issue priority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusColor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusColor { get; set; }

    }

    /// <summary>
    /// Details about a project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Project
    {

        /// <summary>
        /// Whether the project is archived.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("archived", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Archived { get; set; }

        /// <summary>
        /// The user who archived the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("archivedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User ArchivedBy { get; set; }

        /// <summary>
        /// The date when the project was archived.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("archivedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ArchivedDate { get; set; }

        /// <summary>
        /// The default assignee when creating issues for this project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assigneeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProjectAssigneeType AssigneeType { get; set; }

        /// <summary>
        /// The URLs of the project's avatars.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarUrls", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AvatarUrlsBean AvatarUrls { get; set; }

        /// <summary>
        /// List of the components contained in the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("components", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectComponent> Components { get; set; }

        /// <summary>
        /// Whether the project is marked as deleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deleted", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Deleted { get; set; }

        /// <summary>
        /// The user who marked the project as deleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deletedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User DeletedBy { get; set; }

        /// <summary>
        /// The date when the project was marked as deleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deletedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset DeletedDate { get; set; }

        /// <summary>
        /// A brief description of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// An email address associated with the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// Expand options that include additional project details in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// Whether the project is selected as a favorite.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("favourite", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Favourite { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Insights about the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectInsight Insight { get; set; }

        /// <summary>
        /// Whether the project is private from the user's perspective. This means the user can't see the project or any associated issues.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isPrivate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsPrivate { get; set; }

        /// <summary>
        /// The issue type hierarchy for the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeHierarchy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Hierarchy IssueTypeHierarchy { get; set; }

        /// <summary>
        /// List of the issue types available in the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueTypeDetails> IssueTypes { get; set; }

        /// <summary>
        /// The key of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The project landing page info.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("landingPageInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectLandingPageInfo LandingPageInfo { get; set; }

        /// <summary>
        /// The username of the project lead.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lead", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User Lead { get; set; }

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// User permissions on the project
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectPermissions Permissions { get; set; }

        /// <summary>
        /// The category the project belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCategory ProjectCategory { get; set; }

        /// <summary>
        /// The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectTypeKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProjectTypeKey3 ProjectTypeKey { get; set; }

        /// <summary>
        /// Map of project properties
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }

        /// <summary>
        /// The date when the project is deleted permanently.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("retentionTillDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset RetentionTillDate { get; set; }

        /// <summary>
        /// The name and self URL for each role defined in the project. For more information, see [Create project role](#api-rest-api-2-role-post).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Uri> Roles { get; set; }

        /// <summary>
        /// The URL of the project details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// Whether the project is simplified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("simplified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Simplified { get; set; }

        /// <summary>
        /// The type of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("style", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProjectStyle Style { get; set; }

        /// <summary>
        /// A link to information about this project, such as project documentation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        /// <summary>
        /// Unique ID for next-gen projects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uuid { get; set; }

        /// <summary>
        /// The versions defined in the project. For more information, see [Create version](#api-rest-api-2-version-post).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Version> Versions { get; set; }

    }

    /// <summary>
    /// A project and issueType ID pair that identifies a status mapping.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectAndIssueTypePair
    {

        /// <summary>
        /// The ID of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeId", Required = Newtonsoft.Json.Required.Always)]
        public string IssueTypeId { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.Always)]
        public string ProjectId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectArchetype
    {

        [Newtonsoft.Json.JsonProperty("realType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProjectArchetypeRealType RealType { get; set; }

        [Newtonsoft.Json.JsonProperty("style", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProjectArchetypeStyle Style { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProjectArchetypeType Type { get; set; }

    }

    /// <summary>
    /// List of project avatars.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectAvatars
    {

        /// <summary>
        /// List of avatars added to Jira. These avatars may be deleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("custom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Avatar> Custom { get; set; }

        /// <summary>
        /// List of avatars included with Jira. These avatars cannot be deleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("system", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Avatar> System { get; set; }

    }

    /// <summary>
    /// A project category.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectCategory
    {

        /// <summary>
        /// The description of the project category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the project category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the project category. Required on create, optional on update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The URL of the project category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

    }

    /// <summary>
    /// Details about a project component.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectComponent
    {

        /// <summary>
        /// Compass component's ID. Can't be updated. Not required for creating a Project Component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ari", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ari { get; set; }

        /// <summary>
        /// The details of the user associated with `assigneeType`, if any. See `realAssignee` for details of the user assigned to issues created with this component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User Assignee { get; set; }

        /// <summary>
        /// The nominal user type used to determine the assignee for issues created with this component. See `realAssigneeType` for details on how the type of the user, and hence the user, assigned to issues is determined. Can take the following values:
        /// <br/>
        /// <br/> *  `PROJECT_LEAD` the assignee to any issues created with this component is nominally the lead for the project the component is in.
        /// <br/> *  `COMPONENT_LEAD` the assignee to any issues created with this component is nominally the lead for the component.
        /// <br/> *  `UNASSIGNED` an assignee is not set for issues created with this component.
        /// <br/> *  `PROJECT_DEFAULT` the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.
        /// <br/>
        /// <br/>Default value: `PROJECT_DEFAULT`.  
        /// <br/>Optional when creating or updating a component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assigneeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProjectComponentAssigneeType AssigneeType { get; set; }

        /// <summary>
        /// The description for the component. Optional when creating or updating a component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The unique identifier for the component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Whether a user is associated with `assigneeType`. For example, if the `assigneeType` is set to `COMPONENT_LEAD` but the component lead is not set, then `false` is returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAssigneeTypeValid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsAssigneeTypeValid { get; set; }

        /// <summary>
        /// The user details for the component's lead user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lead", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User Lead { get; set; }

        /// <summary>
        /// The accountId of the component's lead user. The accountId uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("leadAccountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LeadAccountId { get; set; }

        /// <summary>
        /// This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("leadUserName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LeadUserName { get; set; }

        /// <summary>
        /// Compass component's metadata. Can't be updated. Not required for creating a Project Component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// The unique name for the component in the project. Required when creating a component. Optional when updating a component. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The key of the project the component is assigned to. Required when creating a component. Can't be updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project { get; set; }

        /// <summary>
        /// The ID of the project the component is assigned to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ProjectId { get; set; }

        /// <summary>
        /// The user assigned to issues created with this component, when `assigneeType` does not identify a valid assignee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("realAssignee", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User RealAssignee { get; set; }

        /// <summary>
        /// The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the `assigneeType`. For example, `assigneeType` is set to `COMPONENT_LEAD` but no component lead is set. This property is set to one of the following values:
        /// <br/>
        /// <br/> *  `PROJECT_LEAD` when `assigneeType` is `PROJECT_LEAD` and the project lead has permission to be assigned issues in the project that the component is in.
        /// <br/> *  `COMPONENT_LEAD` when `assignee`Type is `COMPONENT_LEAD` and the component lead has permission to be assigned issues in the project that the component is in.
        /// <br/> *  `UNASSIGNED` when `assigneeType` is `UNASSIGNED` and Jira is configured to allow unassigned issues.
        /// <br/> *  `PROJECT_DEFAULT` when none of the preceding cases are true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("realAssigneeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProjectComponentRealAssigneeType RealAssigneeType { get; set; }

        /// <summary>
        /// The URL of the component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

    }

    /// <summary>
    /// Every project-created entity has an ID that must be unique within the scope of the project creation. PCRI (Project Create Resource Identifier) is a standard format for creating IDs and references to other project entities. PCRI format is defined as follows: pcri:\[entityType\]:\[type\]:\[entityId\] entityType - the type of an entity, e.g. status, role, workflow type - PCRI type, either `id` - The ID of an entity that already exists in the target site, or `ref` - A unique reference to an entity that is being created entityId - entity identifier, if type is `id` - must be an existing entity ID that exists in the Jira site, if `ref` - must be unique across all entities in the scope of this project template creation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectCreateResourceIdentifier
    {

        [Newtonsoft.Json.JsonProperty("anID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AnID { get; set; }

        [Newtonsoft.Json.JsonProperty("areference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Areference { get; set; }

        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityId { get; set; }

        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityType { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProjectCreateResourceIdentifierType Type { get; set; }

    }

    /// <summary>
    /// Request to create a project using a custom template
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectCustomTemplateCreateRequestDTO
    {

        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomTemplatesProjectDetails Details { get; set; }

        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomTemplateRequestDTO Template { get; set; }

    }

    /// <summary>
    /// Details about data policies for a list of projects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectDataPolicies
    {

        /// <summary>
        /// List of projects with data policies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectDataPolicies", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectWithDataPolicy> ProjectDataPolicies1 { get; set; }

    }

    /// <summary>
    /// Details about data policy.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectDataPolicy
    {

        /// <summary>
        /// Whether the project contains any content inaccessible to the requesting application.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("anyContentBlocked", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AnyContentBlocked { get; set; }

    }

    /// <summary>
    /// Details about a project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectDetails
    {

        /// <summary>
        /// The URLs of the project's avatars.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarUrls", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AvatarUrlsBean AvatarUrls { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The key of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The category the project belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UpdatedProjectCategory ProjectCategory { get; set; }

        /// <summary>
        /// The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectTypeKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProjectDetailsProjectTypeKey ProjectTypeKey { get; set; }

        /// <summary>
        /// The URL of the project details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        /// <summary>
        /// Whether or not the project is simplified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("simplified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Simplified { get; set; }

    }

    /// <summary>
    /// A project's sender email address.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectEmailAddress
    {

        /// <summary>
        /// The email address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// When using a custom domain, the status of the email address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddressStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> EmailAddressStatus { get; set; }

    }

    /// <summary>
    /// Details of a project feature.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectFeature
    {

        /// <summary>
        /// The key of the feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("feature", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Feature { get; set; }

        /// <summary>
        /// URI for the image representing the feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("imageUri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageUri { get; set; }

        /// <summary>
        /// Localized display description for the feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("localisedDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocalisedDescription { get; set; }

        /// <summary>
        /// Localized display name for the feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("localisedName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocalisedName { get; set; }

        /// <summary>
        /// List of keys of the features required to enable the feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prerequisites", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Prerequisites { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ProjectId { get; set; }

        /// <summary>
        /// The state of the feature. When updating the state of a feature, only ENABLED and DISABLED are supported. Responses can contain all values
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProjectFeatureState2 State { get; set; }

        /// <summary>
        /// Whether the state of the feature can be updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("toggleLocked", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ToggleLocked { get; set; }

    }

    /// <summary>
    /// Details of the feature state.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectFeatureState
    {

        /// <summary>
        /// The feature state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProjectFeatureStateState State { get; set; }

    }

    /// <summary>
    /// Project ID details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectId
    {

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectIdAssociationContext : AssociationContextObject
    {

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Identifier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The identifiers for a project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectIdentifierBean
    {

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The key of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

    }

    /// <summary>
    /// Identifiers for a project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectIdentifiers
    {

        /// <summary>
        /// The ID of the created project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        /// <summary>
        /// The key of the created project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; }

        /// <summary>
        /// The URL of the created project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        public System.Uri Self { get; set; }

    }

    /// <summary>
    /// A list of project IDs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectIds
    {

        /// <summary>
        /// The IDs of projects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> ProjectIds1 { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    }

    /// <summary>
    /// Additional details about a project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectInsight
    {

        /// <summary>
        /// The last issue update time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastIssueUpdateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset LastIssueUpdateTime { get; set; }

        /// <summary>
        /// Total issue count.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalIssueCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long TotalIssueCount { get; set; }

    }

    /// <summary>
    /// Details of the issue creation metadata for a project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectIssueCreateMetadata
    {

        /// <summary>
        /// List of the project's avatars, returning the avatar size and associated URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarUrls", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AvatarUrlsBean AvatarUrls { get; set; }

        /// <summary>
        /// Expand options that include additional project issue create metadata details in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// List of the issue types supported by the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuetypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueTypeIssueCreateMetadata> Issuetypes { get; set; }

        /// <summary>
        /// The key of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The URL of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

    }

    /// <summary>
    /// List of issue level security items in a project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectIssueSecurityLevels
    {

        /// <summary>
        /// Issue level security items list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("levels", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<SecurityLevel> Levels { get; set; } = new System.Collections.ObjectModel.Collection<SecurityLevel>();

    }

    /// <summary>
    /// The hierarchy of issue types within a project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectIssueTypeHierarchy
    {

        /// <summary>
        /// Details of an issue type hierarchy level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hierarchy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectIssueTypesHierarchyLevel> Hierarchy { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ProjectId { get; set; }

    }

    /// <summary>
    /// The project and issue type mapping.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectIssueTypeMapping
    {

        /// <summary>
        /// The ID of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeId", Required = Newtonsoft.Json.Required.Always)]
        public string IssueTypeId { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.Always)]
        public string ProjectId { get; set; }

    }

    /// <summary>
    /// The project and issue type mappings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectIssueTypeMappings
    {

        /// <summary>
        /// The project and issue type mappings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mappings", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<ProjectIssueTypeMapping> Mappings { get; set; } = new System.Collections.ObjectModel.Collection<ProjectIssueTypeMapping>();

    }

    /// <summary>
    /// Project and issue type context for workflow queries made using issue types.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectIssueTypeQueryContext
    {

        /// <summary>
        /// The set of issue type IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> IssueTypes { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project { get; set; }

    }

    /// <summary>
    /// Details of an issue type hierarchy level.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectIssueTypesHierarchyLevel
    {

        /// <summary>
        /// The ID of the issue type hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid EntityId { get; set; }

        /// <summary>
        /// The list of issue types in the hierarchy level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueTypeInfo> IssueTypes { get; set; }

        /// <summary>
        /// The level of the issue type hierarchy level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Level { get; set; }

        /// <summary>
        /// The name of the issue type hierarchy level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectLandingPageInfo
    {

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("boardId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long BoardId { get; set; }

        [Newtonsoft.Json.JsonProperty("boardName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BoardName { get; set; }

        [Newtonsoft.Json.JsonProperty("projectKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectKey { get; set; }

        [Newtonsoft.Json.JsonProperty("projectType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectType { get; set; }

        [Newtonsoft.Json.JsonProperty("queueCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QueueCategory { get; set; }

        [Newtonsoft.Json.JsonProperty("queueId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long QueueId { get; set; }

        [Newtonsoft.Json.JsonProperty("queueName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QueueName { get; set; }

        [Newtonsoft.Json.JsonProperty("simpleBoard", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SimpleBoard { get; set; }

        [Newtonsoft.Json.JsonProperty("simplified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Simplified { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

    }

    /// <summary>
    /// The payload for creating a project
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectPayload
    {

        [Newtonsoft.Json.JsonProperty("fieldLayoutSchemeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier FieldLayoutSchemeId { get; set; }

        [Newtonsoft.Json.JsonProperty("issueSecuritySchemeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier IssueSecuritySchemeId { get; set; }

        [Newtonsoft.Json.JsonProperty("issueTypeSchemeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier IssueTypeSchemeId { get; set; }

        [Newtonsoft.Json.JsonProperty("issueTypeScreenSchemeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier IssueTypeScreenSchemeId { get; set; }

        [Newtonsoft.Json.JsonProperty("notificationSchemeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier NotificationSchemeId { get; set; }

        [Newtonsoft.Json.JsonProperty("pcri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier Pcri { get; set; }

        [Newtonsoft.Json.JsonProperty("permissionSchemeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier PermissionSchemeId { get; set; }

        /// <summary>
        /// The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes), which defines the application-specific feature set. If you don't specify the project template you have to specify the project type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectTypeKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProjectPayloadProjectTypeKey ProjectTypeKey { get; set; }

        [Newtonsoft.Json.JsonProperty("workflowSchemeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier WorkflowSchemeId { get; set; }

    }

    /// <summary>
    /// Permissions which a user has on a project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectPermissions
    {

        /// <summary>
        /// Whether the logged user can edit the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("canEdit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CanEdit { get; set; }

    }

    /// <summary>
    /// Details about the roles in a project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectRole
    {

        /// <summary>
        /// The list of users who act in this role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RoleActor> Actors { get; set; }

        /// <summary>
        /// Whether this role is the admin role for the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("admin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Admin { get; set; }

        /// <summary>
        /// Whether the calling user is part of this role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentUserRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CurrentUserRole { get; set; }

        /// <summary>
        /// Whether this role is the default role for the project
        /// </summary>
        [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Default { get; set; }

        /// <summary>
        /// The description of the project role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the project role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The name of the project role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Whether the roles are configurable for this project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roleConfigurable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool RoleConfigurable { get; set; }

        /// <summary>
        /// The scope of the role. Indicated for roles associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        /// <summary>
        /// The URL the project role details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The translated name of the project role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("translatedName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TranslatedName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectRoleActorsUpdateBean
    {

        /// <summary>
        /// The actors to add to the project role.
        /// <br/>
        /// <br/>Add groups using:
        /// <br/>
        /// <br/> *  `atlassian-group-role-actor` and a list of group names.
        /// <br/> *  `atlassian-group-role-actor-id` and a list of group IDs.
        /// <br/>
        /// <br/>As a group's name can change, use of `atlassian-group-role-actor-id` is recommended. For example, `"atlassian-group-role-actor-id":["eef79f81-0b89-4fca-a736-4be531a10869","77f6ab39-e755-4570-a6ae-2d7a8df0bcb8"]`.
        /// <br/>
        /// <br/>Add users using `atlassian-user-role-actor` and a list of account IDs. For example, `"atlassian-user-role-actor":["12345678-9abc-def1-2345-6789abcdef12", "abcdef12-3456-789a-bcde-f123456789ab"]`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("categorisedActors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> CategorisedActors { get; set; }

        /// <summary>
        /// The ID of the project role. Use [Get all project roles](#api-rest-api-2-role-get) to get a list of project role IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    /// <summary>
    /// Details about a project role.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectRoleDetails
    {

        /// <summary>
        /// Whether this role is the admin role for the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("admin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Admin { get; set; }

        /// <summary>
        /// Whether this role is the default role for the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Default { get; set; }

        /// <summary>
        /// The description of the project role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the project role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The name of the project role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Whether the roles are configurable for this project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roleConfigurable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool RoleConfigurable { get; set; }

        /// <summary>
        /// The scope of the role. Indicated for roles associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        /// <summary>
        /// The URL the project role details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The translated name of the project role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("translatedName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TranslatedName { get; set; }

    }

    /// <summary>
    /// Details of the group associated with the role.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectRoleGroup
    {

        /// <summary>
        /// The display name of the group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The ID of the group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupId { get; set; }

        /// <summary>
        /// The name of the group. As a group's name can change, use of `groupId` is recommended to identify the group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// Details of the user associated with the role.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectRoleUser
    {

        /// <summary>
        /// The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Returns *unknown* if the record is deleted and corrupted, for example, as the result of a server import.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectScopeBean
    {

        /// <summary>
        /// Defines the behavior of the option in the project.If notSelectable is set, the option cannot be set as the field's value. This is useful for archiving an option that has previously been selected but shouldn't be used anymore.If defaultValue is set, the option is selected by default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Attributes3> Attributes { get; set; }

        /// <summary>
        /// The ID of the project that the option's behavior applies to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectTemplateKey
    {

        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uuid { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectTemplateModel
    {

        [Newtonsoft.Json.JsonProperty("archetype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectArchetype Archetype { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultBoardView", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultBoardView { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("liveTemplateProjectIdReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long LiveTemplateProjectIdReference { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("projectTemplateKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectTemplateKey ProjectTemplateKey { get; set; }

        [Newtonsoft.Json.JsonProperty("snapshotTemplate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> SnapshotTemplate { get; set; }

        [Newtonsoft.Json.JsonProperty("templateGenerationOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomTemplateOptions TemplateGenerationOptions { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProjectTemplateModelType Type { get; set; }

    }

    /// <summary>
    /// Details about a project type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectType
    {

        /// <summary>
        /// The color of the project type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

        /// <summary>
        /// The key of the project type's description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("descriptionI18nKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescriptionI18nKey { get; set; }

        /// <summary>
        /// The formatted key of the project type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("formattedKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormattedKey { get; set; }

        /// <summary>
        /// The icon of the project type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Icon { get; set; }

        /// <summary>
        /// The key of the project type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

    }

    /// <summary>
    /// The project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectUsage
    {

        /// <summary>
        /// The project ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

    }

    /// <summary>
    /// A page of projects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectUsagePage
    {

        /// <summary>
        /// Page token for the next page of project usages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPageToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageToken { get; set; }

        /// <summary>
        /// The list of projects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectUsage> Values { get; set; }

    }

    /// <summary>
    /// Details about data policies for a project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProjectWithDataPolicy
    {

        /// <summary>
        /// Data policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dataPolicy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectDataPolicy DataPolicy { get; set; }

        /// <summary>
        /// The project ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    /// <summary>
    /// Property key details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PropertyKey
    {

        /// <summary>
        /// The key of the property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The URL of the property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

    }

    /// <summary>
    /// List of property keys.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PropertyKeys
    {

        /// <summary>
        /// Property key details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keys", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PropertyKey> Keys { get; set; }

    }

    /// <summary>
    /// Details about the status mappings for publishing a draft workflow scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PublishDraftWorkflowScheme
    {

        /// <summary>
        /// Mappings of statuses to new statuses for issue types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusMappings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatusMapping> StatusMappings { get; set; }

    }

    /// <summary>
    /// Properties that identify a published workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PublishedWorkflowId
    {

        /// <summary>
        /// The entity ID of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityId { get; set; }

        /// <summary>
        /// The name of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

    }

    /// <summary>
    /// The payload for defining quick filters
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class QuickFilterPayload
    {

        /// <summary>
        /// The description of the quick filter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The jql query for the quick filter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jqlQuery", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string JqlQuery { get; set; }

        /// <summary>
        /// The name of the quick filter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class RedactionJobStatusResponse
    {

        [Newtonsoft.Json.JsonProperty("bulkRedactionResponse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BulkRedactionResponse BulkRedactionResponse { get; set; }

        [Newtonsoft.Json.JsonProperty("jobStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RedactionJobStatusResponseJobStatus JobStatus { get; set; }

    }

    /// <summary>
    /// Represents the position of the redaction
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class RedactionPosition
    {

        /// <summary>
        /// The ADF pointer indicating the position of the text to be redacted. This is only required when redacting from rich text(ADF) fields. For plain text fields, this field can be omitted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("adfPointer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdfPointer { get; set; }

        /// <summary>
        /// The text which will be redacted, encoded using SHA256 hash and Base64 digest
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expectedText", Required = Newtonsoft.Json.Required.Always)]
        public string ExpectedText { get; set; }

        /// <summary>
        /// The start index(inclusive) for the redaction in specified content
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Always)]
        public int From { get; set; }

        /// <summary>
        /// The ending index(exclusive) for the redaction in specified content
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Always)]
        public int To { get; set; }

    }

    /// <summary>
    /// ID of a registered webhook or error messages explaining why a webhook wasn't registered.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class RegisteredWebhook
    {

        /// <summary>
        /// The ID of the webhook. Returned if the webhook is created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdWebhookId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long CreatedWebhookId { get; set; }

        /// <summary>
        /// Error messages specifying why the webhook creation failed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Errors { get; set; }

    }

    /// <summary>
    /// Details of an issue remote link.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class RemoteIssueLink
    {

        /// <summary>
        /// Details of the remote application the linked item is in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("application", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Application Application { get; set; }

        /// <summary>
        /// The global ID of the link, such as the ID of the item on the remote system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("globalId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GlobalId { get; set; }

        /// <summary>
        /// The ID of the link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// Details of the item linked to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("object", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RemoteObject Object { get; set; }

        /// <summary>
        /// Description of the relationship between the issue and the linked item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationship", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Relationship { get; set; }

        /// <summary>
        /// The URL of the link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

    }

    /// <summary>
    /// Details of the identifiers for a created or updated remote issue link.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class RemoteIssueLinkIdentifies
    {

        /// <summary>
        /// The ID of the remote issue link, such as the ID of the item on the remote system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The URL of the remote issue link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

    }

    /// <summary>
    /// Details of a remote issue link.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class RemoteIssueLinkRequest
    {

        /// <summary>
        /// Details of the remote application the linked item is in. For example, trello.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("application", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Application Application { get; set; }

        /// <summary>
        /// An identifier for the remote item in the remote system. For example, the global ID for a remote item in Confluence would consist of the app ID and page ID, like this: `appId=456&amp;pageId=123`.
        /// <br/>
        /// <br/>Setting this field enables the remote issue link details to be updated or deleted using remote system and item details as the record identifier, rather than using the record's Jira ID.
        /// <br/>
        /// <br/>The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("globalId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GlobalId { get; set; }

        /// <summary>
        /// Details of the item linked to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("object", Required = Newtonsoft.Json.Required.Always)]
        public RemoteObject Object { get; set; } = new RemoteObject();

        /// <summary>
        /// Description of the relationship between the issue and the linked item. If not set, the relationship description "links to" is used in Jira.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationship", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Relationship { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The linked item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class RemoteObject
    {

        /// <summary>
        /// Details of the icon for the item. If no icon is defined, the default link icon is used in Jira.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Icon Icon { get; set; }

        /// <summary>
        /// The status of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Status Status { get; set; }

        /// <summary>
        /// The summary details of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Summary { get; set; }

        /// <summary>
        /// The title of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        public string Title { get; set; }

        /// <summary>
        /// The URL of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        public string Url { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class RemoveOptionFromIssuesResult
    {

        /// <summary>
        /// A collection of errors related to unchanged issues. The collection size is limited, which means not all errors may be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SimpleErrorCollection Errors { get; set; }

        /// <summary>
        /// The IDs of the modified issues.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modifiedIssues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> ModifiedIssues { get; set; }

        /// <summary>
        /// The IDs of the unchanged issues, those issues where errors prevent modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unmodifiedIssues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> UnmodifiedIssues { get; set; }

    }

    /// <summary>
    /// Change the order of issue priorities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ReorderIssuePriorities
    {

        /// <summary>
        /// The ID of the priority. Required if `position` isn't provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("after", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string After { get; set; }

        /// <summary>
        /// The list of issue IDs to be reordered. Cannot contain duplicates nor after ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ids", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> Ids { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The position for issue priorities to be moved to. Required if `after` isn't provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Position { get; set; }

    }

    /// <summary>
    /// Change the order of issue resolutions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ReorderIssueResolutionsRequest
    {

        /// <summary>
        /// The ID of the resolution. Required if `position` isn't provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("after", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string After { get; set; }

        /// <summary>
        /// The list of resolution IDs to be reordered. Cannot contain duplicates nor after ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ids", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> Ids { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The position for issue resolutions to be moved to. Required if `after` isn't provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Position { get; set; }

    }

    /// <summary>
    /// The list of required status mappings by issue type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class RequiredMappingByIssueType
    {

        /// <summary>
        /// The ID of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssueTypeId { get; set; }

        /// <summary>
        /// The status IDs requiring mapping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> StatusIds { get; set; }

    }

    /// <summary>
    /// The list of required status mappings by workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class RequiredMappingByWorkflows
    {

        /// <summary>
        /// The ID of the source workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceWorkflowId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceWorkflowId { get; set; }

        /// <summary>
        /// The status IDs requiring mapping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> StatusIds { get; set; }

        /// <summary>
        /// The ID of the target workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetWorkflowId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetWorkflowId { get; set; }

    }

    /// <summary>
    /// Details of an issue resolution.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Resolution
    {

        /// <summary>
        /// The description of the issue resolution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the issue resolution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the issue resolution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The URL of the issue resolution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

    }

    /// <summary>
    /// The ID of an issue resolution.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ResolutionId
    {

        /// <summary>
        /// The ID of the issue resolution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ResolutionJsonBean
    {

        [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Default { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("iconUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IconUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Resource
    {

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("file", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] File { get; set; }

        [Newtonsoft.Json.JsonProperty("filename", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Filename { get; set; }

        [Newtonsoft.Json.JsonProperty("inputStream", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object InputStream { get; set; }

        [Newtonsoft.Json.JsonProperty("open", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Open { get; set; }

        [Newtonsoft.Json.JsonProperty("readable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Readable { get; set; }

        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Uri { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

    }

    /// <summary>
    /// Details of the permission.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class RestrictedPermission
    {

        /// <summary>
        /// The ID of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-2-permissions-get) to get the list of permissions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The key of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-2-permissions-get) to get the list of permissions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class RichText
    {

        [Newtonsoft.Json.JsonProperty("empty", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Empty { get; set; }

        [Newtonsoft.Json.JsonProperty("emptyAdf", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EmptyAdf { get; set; }

        [Newtonsoft.Json.JsonProperty("finalised", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Finalised { get; set; }

        [Newtonsoft.Json.JsonProperty("valueSet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ValueSet { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about a user assigned to a project role.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class RoleActor
    {

        [Newtonsoft.Json.JsonProperty("actorGroup", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectRoleGroup ActorGroup { get; set; }

        [Newtonsoft.Json.JsonProperty("actorUser", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectRoleUser ActorUser { get; set; }

        /// <summary>
        /// The avatar of the role actor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri AvatarUrl { get; set; }

        /// <summary>
        /// The display name of the role actor. For users, depending on the user’s privacy setting, this may return an alternative value for the user's name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The ID of the role actor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The type of role actor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RoleActorType Type { get; set; }

    }

    /// <summary>
    /// The payload used to create a project role. It is optional for CMP projects, as a default role actor will be provided. TMP will add new role actors to the table.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class RolePayload
    {

        /// <summary>
        /// The default actors for the role. By adding default actors, the role will be added to any future projects created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultActors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectCreateResourceIdentifier> DefaultActors { get; set; }

        /// <summary>
        /// The description of the role
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the role
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The strategy to use when there is a conflict with an existing project role. FAIL - Fail execution, this always needs to be unique; USE - Use the existing entity and ignore new entity parameters
        /// </summary>
        [Newtonsoft.Json.JsonProperty("onConflict", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RolePayloadOnConflict OnConflict { get; set; } = Atlassian.Jira.Swagger.RolePayloadOnConflict.USE;

        [Newtonsoft.Json.JsonProperty("pcri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier Pcri { get; set; }

        /// <summary>
        /// The type of the role. Only used by project-scoped project
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RolePayloadType Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class RolesCapabilityPayload
    {

        /// <summary>
        /// A map of role PCRI (can be ID or REF) to a list of user or group PCRI IDs to associate with the role and project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roleToProjectActors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ProjectCreateResourceIdentifier>> RoleToProjectActors { get; set; }

        /// <summary>
        /// The list of roles to create.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RolePayload> Roles { get; set; }

    }

    /// <summary>
    /// A rule configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class RuleConfiguration
    {

        /// <summary>
        /// Whether the rule is disabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Disabled { get; set; } = false;

        /// <summary>
        /// A tag used to filter rules in [Get workflow transition rule configurations](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflow-transition-rules/#api-rest-api-3-workflow-rule-config-get).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tag { get; set; }

        /// <summary>
        /// Configuration of the rule, as it is stored by the Connect or the Forge app on the rule configuration page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public string Value { get; set; }

    }

    /// <summary>
    /// The payload for creating rules in a workflow
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class RulePayload
    {

        /// <summary>
        /// The parameters of the rule
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Parameters { get; set; }

        /// <summary>
        /// The key of the rule. See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflows/\#api-rest-api-3-workflows-capabilities-get
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RuleKey { get; set; }

    }

    /// <summary>
    /// The sanitized JQL queries for the given account IDs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SanitizedJqlQueries
    {

        /// <summary>
        /// The list of sanitized JQL queries.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SanitizedJqlQuery> Queries { get; set; }

    }

    /// <summary>
    /// Details of the sanitized JQL query.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SanitizedJqlQuery
    {

        /// <summary>
        /// The account ID of the user for whom sanitization was performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountId { get; set; }

        /// <summary>
        /// The list of errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorCollection Errors { get; set; }

        /// <summary>
        /// The initial query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("initialQuery", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InitialQuery { get; set; }

        /// <summary>
        /// The sanitized query, if there were no errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sanitizedQuery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SanitizedQuery { get; set; }

    }

    /// <summary>
    /// The request details to generate template from a project
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SaveProjectTemplateRequest
    {

        /// <summary>
        /// The ID of the target project
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ProjectId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateGenerationOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomTemplateOptions TemplateGenerationOptions { get; set; }

        /// <summary>
        /// The type of the template: LIVE | SNAPSHOT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("templateType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SaveProjectTemplateRequestTemplateType TemplateType { get; set; }

    }

    /// <summary>
    /// Request to save a custom template
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SaveTemplateRequest
    {

        /// <summary>
        /// The description of the template
        /// </summary>
        [Newtonsoft.Json.JsonProperty("templateDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TemplateDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("templateFromProjectRequest", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SaveProjectTemplateRequest TemplateFromProjectRequest { get; set; }

        /// <summary>
        /// The name of the template
        /// </summary>
        [Newtonsoft.Json.JsonProperty("templateName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TemplateName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SaveTemplateResponse
    {

        [Newtonsoft.Json.JsonProperty("projectTemplateKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectTemplateKey ProjectTemplateKey { get; set; }

    }

    /// <summary>
    /// The projects the item is associated with. Indicated for items associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Scope
    {

        /// <summary>
        /// The project the item has scope in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectDetails Project { get; set; }

        /// <summary>
        /// The type of scope.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ScopeType Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The payload for creating a scope. Defines if a project is team-managed project or company-managed project
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ScopePayload
    {

        /// <summary>
        /// The type of the scope. Use `GLOBAL` or empty for company-managed project, and `PROJECT` for team-managed project
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ScopePayloadType Type { get; set; }

    }

    /// <summary>
    /// A screen.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Screen
    {

        /// <summary>
        /// The description of the screen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the screen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The name of the screen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The scope of the screen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

    }

    /// <summary>
    /// Details of a screen.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ScreenDetails
    {

        /// <summary>
        /// The description of the screen. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the screen. The name must be unique. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

    }

    /// <summary>
    /// Defines the payload for the field screens. See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-screens/\#api-rest-api-3-screens-post
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ScreenPayload
    {

        /// <summary>
        /// The description of the screen
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the screen
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("pcri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier Pcri { get; set; }

        /// <summary>
        /// The tabs of the screen. See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-screen-tab-fields/\#api-rest-api-3-screens-screenid-tabs-tabid-fields-post
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tabs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TabPayload> Tabs { get; set; }

    }

    /// <summary>
    /// A screen scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ScreenScheme
    {

        /// <summary>
        /// The description of the screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// Details of the issue type screen schemes associated with the screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeScreenSchemes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PageBeanIssueTypeScreenScheme IssueTypeScreenSchemes { get; set; }

        /// <summary>
        /// The name of the screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The IDs of the screens for the screen types of the screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("screens", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScreenTypes Screens { get; set; }

    }

    /// <summary>
    /// Details of a screen scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ScreenSchemeDetails
    {

        /// <summary>
        /// The description of the screen scheme. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the screen scheme. The name must be unique. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// The IDs of the screens for the screen types of the screen scheme. Only screens used in classic projects are accepted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("screens", Required = Newtonsoft.Json.Required.Always)]
        public ScreenTypes Screens { get; set; } = new ScreenTypes();

    }

    /// <summary>
    /// The ID of a screen scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ScreenSchemeId
    {

        /// <summary>
        /// The ID of the screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

    }

    /// <summary>
    /// Defines the payload for the screen schemes. See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-screen-schemes/\#api-rest-api-3-screenscheme-post
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ScreenSchemePayload
    {

        [Newtonsoft.Json.JsonProperty("defaultScreen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier DefaultScreen { get; set; }

        /// <summary>
        /// The description of the screen scheme
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the screen scheme
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("pcri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier Pcri { get; set; }

        /// <summary>
        /// Similar to the field layout scheme those mappings allow users to set different screens for different operations: default - always there, applied to all operations that don't have an explicit mapping `create`, `view`, `edit` - specific operations that are available and users can assign a different screen for each one of them https://support.atlassian.com/jira-cloud-administration/docs/manage-screen-schemes/\#Associating-a-screen-with-an-issue-operation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("screens", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, ProjectCreateResourceIdentifier> Screens { get; set; }

    }

    /// <summary>
    /// The IDs of the screens for the screen types of the screen scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ScreenTypes
    {

        /// <summary>
        /// The ID of the create screen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("create", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Create { get; set; }

        /// <summary>
        /// The ID of the default screen. Required when creating a screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.Always)]
        public long Default { get; set; }

        /// <summary>
        /// The ID of the edit screen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("edit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Edit { get; set; }

        /// <summary>
        /// The ID of the view screen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("view", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long View { get; set; }

    }

    /// <summary>
    /// A screen with tab details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ScreenWithTab
    {

        /// <summary>
        /// The description of the screen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the screen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The name of the screen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The scope of the screen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        /// <summary>
        /// The tab for the screen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tab", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScreenableTab Tab { get; set; }

    }

    /// <summary>
    /// A screen tab field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ScreenableField
    {

        /// <summary>
        /// The ID of the screen tab field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the screen tab field. Required on create and update. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// A screen tab.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ScreenableTab
    {

        /// <summary>
        /// The ID of the screen tab.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The name of the screen tab. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SearchAndReconcileRequestBean
    {

        /// <summary>
        /// Use [expand](#expansion) to include additional information about issues in the response. Note that, unlike the majority of instances where `expand` is specified, `expand` is defined as a comma-delimited string of values. The expand options are:
        /// <br/>
        /// <br/> *  `renderedFields` Returns field values rendered in HTML format.
        /// <br/> *  `names` Returns the display name of each field.
        /// <br/> *  `schema` Returns the schema describing a field type.
        /// <br/> *  `transitions` Returns all possible transitions for the issue.
        /// <br/> *  `operations` Returns all possible operations for the issue.
        /// <br/> *  `editmeta` Returns information about how each field can be edited.
        /// <br/> *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
        /// <br/> *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.
        /// <br/>
        /// <br/>Examples: `"names,changelog"` Returns the display name of each field as well as a list of recent updates to an issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// A list of fields to return for each issue. Use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `*all` Returns all fields.
        /// <br/> *  `*navigable` Returns navigable fields.
        /// <br/> *  `id` Returns only issue IDs.
        /// <br/> *  Any issue field, prefixed with a dash to exclude.
        /// <br/>
        /// <br/>The default is `id`.
        /// <br/>
        /// <br/>Examples:
        /// <br/>
        /// <br/> *  `summary,comment` Returns the summary and comments fields only.
        /// <br/> *  `*all,-comment` Returns all fields except comments.
        /// <br/>
        /// <br/>Multiple `fields` parameters can be included in a request.
        /// <br/>
        /// <br/>Note: By default, this resource returns IDs only. This differs from [GET issue](#api-rest-api-2-issue-issueIdOrKey-get) where the default is all fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Fields { get; set; }

        /// <summary>
        /// Reference fields by their key (rather than ID). The default is `false`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldsByKeys", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool FieldsByKeys { get; set; }

        /// <summary>
        /// A [JQL](https://confluence.atlassian.com/x/egORLQ) expression. For performance reasons, this parameter requires a bounded query. A bounded query is a query with a search restriction.
        /// <br/>
        /// <br/> *  Example of an unbounded query: `order by key desc`.
        /// <br/> *  Example of a bounded query: `assignee = currentUser() order by key`.
        /// <br/>
        /// <br/>Additionally, `orderBy` clause can contain a maximum of 7 fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jql", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Jql { get; set; }

        /// <summary>
        /// The maximum number of items to return per page. To manage page size, API may return fewer items per page where a large number of fields are requested. The greatest number of items returned per page is achieved when requesting `id` or `key` only. It returns max 5000 issues.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; } = 50;

        /// <summary>
        /// The token for a page to fetch that is not the first page. The first page has a `nextPageToken` of `null`. Use the `nextPageToken` to fetch the next page of issues.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPageToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageToken { get; set; }

        /// <summary>
        /// A list of up to 5 issue properties to include in the results. This parameter accepts a comma-separated list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Properties { get; set; }

        /// <summary>
        /// Strong consistency issue ids to be reconciled with search results. Accepts max 50 ids
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reconcileIssues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> ReconcileIssues { get; set; }

    }

    /// <summary>
    /// The result of a JQL search with issues reconsilation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SearchAndReconcileResults
    {

        /// <summary>
        /// Indicates whether this is the last page of the paginated response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The list of issues found by the search or reconsiliation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueBean> Issues { get; set; }

        /// <summary>
        /// The ID and name of each field in the search results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Names { get; set; }

        /// <summary>
        /// Continuation token to fetch the next page. If this result represents the last or the only page this token will be null. This token will expire in 7 days.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPageToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageToken { get; set; }

        /// <summary>
        /// The schema describing the field types in the search results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, JsonTypeBean> Schema { get; set; }

    }

    /// <summary>
    /// Details of how to filter and list search auto complete information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SearchAutoCompleteFilter
    {

        /// <summary>
        /// Include collapsed fields for fields that have non-unique names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includeCollapsedFields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IncludeCollapsedFields { get; set; } = false;

        /// <summary>
        /// List of project IDs used to filter the visible field details returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> ProjectIds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SearchRequestBean
    {

        /// <summary>
        /// Use [expand](#expansion) to include additional information about issues in the response. Note that, unlike the majority of instances where `expand` is specified, `expand` is defined as a list of values. The expand options are:
        /// <br/>
        /// <br/> *  `renderedFields` Returns field values rendered in HTML format.
        /// <br/> *  `names` Returns the display name of each field.
        /// <br/> *  `schema` Returns the schema describing a field type.
        /// <br/> *  `transitions` Returns all possible transitions for the issue.
        /// <br/> *  `operations` Returns all possible operations for the issue.
        /// <br/> *  `editmeta` Returns information about how each field can be edited.
        /// <br/> *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
        /// <br/> *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Expand { get; set; }

        /// <summary>
        /// A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `*all` Returns all fields.
        /// <br/> *  `*navigable` Returns navigable fields.
        /// <br/> *  Any issue field, prefixed with a minus to exclude.
        /// <br/>
        /// <br/>The default is `*navigable`.
        /// <br/>
        /// <br/>Examples:
        /// <br/>
        /// <br/> *  `summary,comment` Returns the summary and comments fields only.
        /// <br/> *  `-description` Returns all navigable (default) fields except description.
        /// <br/> *  `*all,-comment` Returns all fields except comments.
        /// <br/>
        /// <br/>Multiple `fields` parameters can be included in a request.
        /// <br/>
        /// <br/>Note: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-2-issue-issueIdOrKey-get) where the default is all fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Fields { get; set; }

        /// <summary>
        /// Reference fields by their key (rather than ID). The default is `false`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldsByKeys", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool FieldsByKeys { get; set; }

        /// <summary>
        /// A [JQL](https://confluence.atlassian.com/x/egORLQ) expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jql", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Jql { get; set; }

        /// <summary>
        /// The maximum number of items to return per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; } = 50;

        /// <summary>
        /// A list of up to 5 issue properties to include in the results. This parameter accepts a comma-separated list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Properties { get; set; }

        /// <summary>
        /// The index of the first item to return in the page of results (page offset). The base index is `0`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StartAt { get; set; }

        /// <summary>
        /// Determines how to validate the JQL query and treat the validation results. Supported values:
        /// <br/>
        /// <br/> *  `strict` Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).
        /// <br/> *  `warn` Returns all errors as warnings.
        /// <br/> *  `none` No validation is performed.
        /// <br/> *  `true` *Deprecated* A legacy synonym for `strict`.
        /// <br/> *  `false` *Deprecated* A legacy synonym for `warn`.
        /// <br/>
        /// <br/>The default is `strict`.
        /// <br/>
        /// <br/>Note: If the JQL is not correctly formed a 400 response code is returned, regardless of the `validateQuery` value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validateQuery", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SearchRequestBeanValidateQuery ValidateQuery { get; set; }

    }

    /// <summary>
    /// The result of a JQL search.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SearchResults
    {

        /// <summary>
        /// Expand options that include additional search result details in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// The list of issues found by the search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueBean> Issues { get; set; }

        /// <summary>
        /// The maximum number of results that could be on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// The ID and name of each field in the search results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Names { get; set; }

        /// <summary>
        /// The schema describing the field types in the search results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, JsonTypeBean> Schema { get; set; }

        /// <summary>
        /// The index of the first item returned on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StartAt { get; set; }

        /// <summary>
        /// The number of results on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Total { get; set; }

        /// <summary>
        /// Any warnings related to the JQL query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warningMessages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> WarningMessages { get; set; }

    }

    /// <summary>
    /// Details of an issue level security item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SecurityLevel
    {

        /// <summary>
        /// The description of the issue level security item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the issue level security item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Whether the issue level security item is the default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// The ID of the issue level security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueSecuritySchemeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssueSecuritySchemeId { get; set; }

        /// <summary>
        /// The name of the issue level security item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The URL of the issue level security item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

    }

    /// <summary>
    /// Issue security level member.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SecurityLevelMember
    {

        /// <summary>
        /// The user or group being granted the permission. It consists of a `type` and a type-dependent `parameter`. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holder", Required = Newtonsoft.Json.Required.Always)]
        public PermissionHolder Holder { get; set; } = new PermissionHolder();

        /// <summary>
        /// The ID of the issue security level member.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The ID of the issue security level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueSecurityLevelId", Required = Newtonsoft.Json.Required.Always)]
        public string IssueSecurityLevelId { get; set; }

        /// <summary>
        /// The ID of the issue security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueSecuritySchemeId", Required = Newtonsoft.Json.Required.Always)]
        public string IssueSecuritySchemeId { get; set; }

        [Newtonsoft.Json.JsonProperty("managed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Managed { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The payload for creating a security level member. See https://support.atlassian.com/jira-cloud-administration/docs/configure-issue-security-schemes/
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SecurityLevelMemberPayload
    {

        /// <summary>
        /// Defines the value associated with the type. For reporter this would be \{"null"\}; for users this would be the names of specific users); for group this would be group names like \{"administrators", "jira-administrators", "jira-users"\}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parameter { get; set; }

        /// <summary>
        /// The type of the security level member
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SecurityLevelMemberPayloadType Type { get; set; }

    }

    /// <summary>
    /// The payload for creating a security level. See https://support.atlassian.com/jira-cloud-administration/docs/configure-issue-security-schemes/
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SecurityLevelPayload
    {

        /// <summary>
        /// The description of the security level
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Whether the security level is default for the security scheme
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// The name of the security level
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The members of the security level
        /// </summary>
        [Newtonsoft.Json.JsonProperty("securityLevelMembers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SecurityLevelMemberPayload> SecurityLevelMembers { get; set; }

    }

    /// <summary>
    /// Details about a security scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SecurityScheme
    {

        /// <summary>
        /// The ID of the default security level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultSecurityLevelId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long DefaultSecurityLevelId { get; set; }

        /// <summary>
        /// The description of the issue security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the issue security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("levels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SecurityLevel> Levels { get; set; }

        /// <summary>
        /// The name of the issue security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The URL of the issue security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

    }

    /// <summary>
    /// The ID of the issue security scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SecuritySchemeId
    {

        /// <summary>
        /// The ID of the issue security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SecuritySchemeLevelBean
    {

        /// <summary>
        /// The description of the issue security scheme level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Specifies whether the level is the default level. False by default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// The list of level members which should be added to the issue security scheme level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("members", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SecuritySchemeLevelMemberBean> Members { get; set; }

        /// <summary>
        /// The name of the issue security scheme level. Must be unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SecuritySchemeLevelMemberBean
    {

        /// <summary>
        /// The value corresponding to the specified member type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parameter { get; set; }

        /// <summary>
        /// The issue security level member type, e.g `reporter`, `group`, `user`, `projectrole`, `applicationRole`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Details of issue security scheme level new members.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SecuritySchemeMembersRequest
    {

        /// <summary>
        /// The list of level members which should be added to the issue security scheme level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("members", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SecuritySchemeLevelMemberBean> Members { get; set; }

    }

    /// <summary>
    /// The payload for creating a security scheme. See https://support.atlassian.com/jira-cloud-administration/docs/configure-issue-security-schemes/
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SecuritySchemePayload
    {

        /// <summary>
        /// The description of the security scheme
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the security scheme
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("pcri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier Pcri { get; set; }

        /// <summary>
        /// The security levels for the security scheme
        /// </summary>
        [Newtonsoft.Json.JsonProperty("securityLevels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SecurityLevelPayload> SecurityLevels { get; set; }

    }

    /// <summary>
    /// Details about an issue security scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SecuritySchemeWithProjects
    {

        /// <summary>
        /// The default level ID of the issue security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long DefaultLevel { get; set; }

        /// <summary>
        /// The description of the issue security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the issue security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        /// <summary>
        /// The name of the issue security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// The list of project IDs associated with the issue security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> ProjectIds { get; set; }

        /// <summary>
        /// The URL of the issue security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        public string Self { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of security schemes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SecuritySchemes
    {

        /// <summary>
        /// List of security schemes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueSecuritySchemes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SecurityScheme> IssueSecuritySchemes { get; set; }

    }

    /// <summary>
    /// Details about the Jira instance.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ServerInformation
    {

        /// <summary>
        /// The base URL of the Jira instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("baseUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BaseUrl { get; set; }

        /// <summary>
        /// The timestamp when the Jira version was built.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buildDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset BuildDate { get; set; }

        /// <summary>
        /// The build number of the Jira version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buildNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int BuildNumber { get; set; }

        /// <summary>
        /// The type of server deployment. This is always returned as *Cloud*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deploymentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeploymentType { get; set; }

        /// <summary>
        /// The display URL of the Jira instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayUrl { get; set; }

        /// <summary>
        /// The display URL of Confluence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayUrlConfluence", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayUrlConfluence { get; set; }

        /// <summary>
        /// The display URL of the Servicedesk Help Center.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayUrlServicedeskHelpCenter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayUrlServicedeskHelpCenter { get; set; }

        /// <summary>
        /// Jira instance health check results. Deprecated and no longer returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("healthChecks", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HealthCheckResult> HealthChecks { get; set; }

        /// <summary>
        /// The unique identifier of the Jira version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scmInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ScmInfo { get; set; }

        /// <summary>
        /// The time in Jira when this request was responded to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serverTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ServerTime { get; set; }

        /// <summary>
        /// The default timezone of the Jira server. In a format known as Olson Time Zones, IANA Time Zones or TZ Database Time Zones.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serverTimeZone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServerTimeZone { get; set; }

        /// <summary>
        /// The name of the Jira instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serverTitle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServerTitle { get; set; }

        /// <summary>
        /// The version of Jira.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        /// <summary>
        /// The major, minor, and revision version numbers of the Jira version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> VersionNumbers { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ServiceManagementNavigationInfo
    {

        [Newtonsoft.Json.JsonProperty("queueCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QueueCategory { get; set; }

        [Newtonsoft.Json.JsonProperty("queueId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long QueueId { get; set; }

        [Newtonsoft.Json.JsonProperty("queueName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QueueName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ServiceRegistry
    {

        /// <summary>
        /// service description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// service ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        /// <summary>
        /// service name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// organization ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organizationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrganizationId { get; set; }

        /// <summary>
        /// service revision
        /// </summary>
        [Newtonsoft.Json.JsonProperty("revision", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Revision { get; set; }

        [Newtonsoft.Json.JsonProperty("serviceTier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceRegistryTier ServiceTier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ServiceRegistryTier
    {

        /// <summary>
        /// tier description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// tier ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        /// <summary>
        /// tier level
        /// </summary>
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Level { get; set; }

        /// <summary>
        /// tier name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// name key of the tier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NameKey { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details of new default levels.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SetDefaultLevelsRequest
    {

        /// <summary>
        /// List of objects with issue security scheme ID and new default level ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultValues", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<DefaultLevelValue> DefaultValues { get; set; } = new System.Collections.ObjectModel.Collection<DefaultLevelValue>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The new default issue priority.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SetDefaultPriorityRequest
    {

        /// <summary>
        /// The ID of the new default issue priority. Must be an existing ID or null. Setting this to null erases the default priority setting.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

    }

    /// <summary>
    /// The new default issue resolution.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SetDefaultResolutionRequest
    {

        /// <summary>
        /// The ID of the new default issue resolution. Must be an existing ID or null. Setting this to null erases the default resolution setting.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

    }

    /// <summary>
    /// Details of a share permission for the filter.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SharePermission
    {

        /// <summary>
        /// The group that the filter is shared with. For a request, specify the `groupId` or `name` property for the group. As a group's name can change, use of `groupId` is recommended.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupName Group { get; set; }

        /// <summary>
        /// The unique identifier of the share permission.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The project that the filter is shared with. This is similar to the project object returned by [Get project](#api-rest-api-2-project-projectIdOrKey-get) but it contains a subset of the properties, which are: `self`, `id`, `key`, `assigneeType`, `name`, `roles`, `avatarUrls`, `projectType`, `simplified`.  
        /// <br/>For a request, specify the `id` for the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Project Project { get; set; }

        /// <summary>
        /// The project role that the filter is shared with.  
        /// <br/>For a request, specify the `id` for the role. You must also specify the `project` object and `id` for the project that the role is in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectRole Role { get; set; }

        /// <summary>
        /// The type of share permission:
        /// <br/>
        /// <br/> *  `user` Shared with a user.
        /// <br/> *  `group` Shared with a group. If set in a request, then specify `sharePermission.group` as well.
        /// <br/> *  `project` Shared with a project. If set in a request, then specify `sharePermission.project` as well.
        /// <br/> *  `projectRole` Share with a project role in a project. This value is not returned in responses. It is used in requests, where it needs to be specify with `projectId` and `projectRoleId`.
        /// <br/> *  `global` Shared globally. If set in a request, no other `sharePermission` properties need to be specified.
        /// <br/> *  `loggedin` Shared with all logged-in users. Note: This value is set in a request by specifying `authenticated` as the `type`.
        /// <br/> *  `project-unknown` Shared with a project that the user does not have access to. Cannot be set in a request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SharePermissionType Type { get; set; }

        /// <summary>
        /// The user account ID that the filter is shared with. For a request, specify the `accountId` property for the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserBean User { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SharePermissionInputBean
    {

        /// <summary>
        /// The user account ID that the filter is shared with. For a request, specify the `accountId` property for the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountId { get; set; }

        /// <summary>
        /// The ID of the group, which uniquely identifies the group across all Atlassian products.For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*. Cannot be provided with `groupname`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupId { get; set; }

        /// <summary>
        /// The name of the group to share the filter with. Set `type` to `group`. Please note that the name of a group is mutable, to reliably identify a group use `groupId`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupname", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Groupname { get; set; }

        /// <summary>
        /// The ID of the project to share the filter with. Set `type` to `project`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectId { get; set; }

        /// <summary>
        /// The ID of the project role to share the filter with. Set `type` to `projectRole` and the `projectId` for the project that the role is in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectRoleId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectRoleId { get; set; }

        /// <summary>
        /// The rights for the share permission.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rights", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Rights { get; set; }

        /// <summary>
        /// The type of the share permission.Specify the type as follows:
        /// <br/>
        /// <br/> *  `user` Share with a user.
        /// <br/> *  `group` Share with a group. Specify `groupname` as well.
        /// <br/> *  `project` Share with a project. Specify `projectId` as well.
        /// <br/> *  `projectRole` Share with a project role in a project. Specify `projectId` and `projectRoleId` as well.
        /// <br/> *  `global` Share globally, including anonymous users. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.
        /// <br/> *  `authenticated` Share with all logged-in users. This shows as `loggedin` in the response. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SharePermissionInputBeanType Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SimpleApplicationPropertyBean
    {

        /// <summary>
        /// The ID of the application property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The new value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SimpleErrorCollection
    {

        /// <summary>
        /// The list of error messages produced by this operation. For example, "input parameter 'key' must be provided"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ErrorMessages { get; set; }

        /// <summary>
        /// The list of errors by parameter returned by the operation. For example,"projectKey": "Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters."
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Errors { get; set; }

        [Newtonsoft.Json.JsonProperty("httpStatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int HttpStatusCode { get; set; }

    }

    /// <summary>
    /// Details about the operations available in this version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SimpleLink
    {

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("iconClass", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IconClass { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("styleClass", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StyleClass { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Weight { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SimpleListWrapperApplicationRole
    {

        [Newtonsoft.Json.JsonProperty("callback", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ListWrapperCallbackApplicationRole Callback { get; set; }

        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ApplicationRole> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("max-results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        [Newtonsoft.Json.JsonProperty("pagingCallback", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ListWrapperCallbackApplicationRole PagingCallback { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Size { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SimpleListWrapperGroupName
    {

        [Newtonsoft.Json.JsonProperty("callback", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ListWrapperCallbackGroupName Callback { get; set; }

        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GroupName> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("max-results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        [Newtonsoft.Json.JsonProperty("pagingCallback", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ListWrapperCallbackGroupName PagingCallback { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Size { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SimplifiedHierarchyLevel
    {

        /// <summary>
        /// The ID of the level above this one in the hierarchy. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aboveLevelId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long AboveLevelId { get; set; }

        /// <summary>
        /// The ID of the level below this one in the hierarchy. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("belowLevelId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long BelowLevelId { get; set; }

        /// <summary>
        /// The external UUID of the hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalUuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid ExternalUuid { get; set; }

        [Newtonsoft.Json.JsonProperty("hierarchyLevelNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int HierarchyLevelNumber { get; set; }

        /// <summary>
        /// The ID of the hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The issue types available in this hierarchy level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> IssueTypeIds { get; set; }

        /// <summary>
        /// The level of this item in the hierarchy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Level { get; set; }

        /// <summary>
        /// The name of this hierarchy level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The ID of the project configuration. This property is deprecated, see [Change oticen: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectConfigurationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ProjectConfigurationId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SingleRedactionRequest
    {

        [Newtonsoft.Json.JsonProperty("contentItem", Required = Newtonsoft.Json.Required.Always)]
        public ContentItem ContentItem { get; set; } = new ContentItem();

        /// <summary>
        /// Unique id for the redaction request; ID format should be of UUID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid ExternalId { get; set; }

        /// <summary>
        /// The reason why the content is being redacted
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Always)]
        public string Reason { get; set; }

        [Newtonsoft.Json.JsonProperty("redactionPosition", Required = Newtonsoft.Json.Required.Always)]
        public RedactionPosition RedactionPosition { get; set; } = new RedactionPosition();

    }

    /// <summary>
    /// Result for requested redactions
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SingleRedactionResponse
    {

        /// <summary>
        /// An unique id for the redaction request
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid ExternalId { get; set; }

        /// <summary>
        /// Indicates if redaction was success/failure
        /// </summary>
        [Newtonsoft.Json.JsonProperty("successful", Required = Newtonsoft.Json.Required.Always)]
        public bool Successful { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SoftwareNavigationInfo
    {

        [Newtonsoft.Json.JsonProperty("boardId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long BoardId { get; set; }

        [Newtonsoft.Json.JsonProperty("boardName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BoardName { get; set; }

        [Newtonsoft.Json.JsonProperty("simpleBoard", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SimpleBoard { get; set; }

        [Newtonsoft.Json.JsonProperty("totalBoardsInProject", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long TotalBoardsInProject { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The status of the item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Status
    {

        /// <summary>
        /// Details of the icon representing the status. If not provided, no status icon displays in Jira.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Icon Icon { get; set; }

        /// <summary>
        /// Whether the item is resolved. If set to "true", the link to the issue is displayed in a strikethrough font, otherwise the link displays in normal font.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resolved", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Resolved { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A status category.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class StatusCategory
    {

        /// <summary>
        /// The name of the color used to represent the status category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("colorName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ColorName { get; set; }

        /// <summary>
        /// The ID of the status category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The key of the status category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The name of the status category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The URL of the status category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details of the status being created.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class StatusCreate
    {

        /// <summary>
        /// The description of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// The category of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCategory", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StatusCreateStatusCategory StatusCategory { get; set; }

    }

    /// <summary>
    /// Details of the statuses being created and their scope.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class StatusCreateRequest
    {

        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Always)]
        public StatusScope Scope { get; set; } = new StatusScope();

        /// <summary>
        /// Details of the statuses being created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<StatusCreate> Statuses { get; set; } = new System.Collections.ObjectModel.Collection<StatusCreate>();

    }

    /// <summary>
    /// A status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class StatusDetails
    {

        /// <summary>
        /// The description of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The URL of the icon used to represent the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iconUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IconUrl { get; set; }

        /// <summary>
        /// The ID of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The scope of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        /// <summary>
        /// The URL of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        /// <summary>
        /// The category assigned to the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatusCategory StatusCategory { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The statuses associated with this workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class StatusLayoutUpdate
    {

        [Newtonsoft.Json.JsonProperty("approvalConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApprovalConfiguration ApprovalConfiguration { get; set; }

        [Newtonsoft.Json.JsonProperty("layout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowLayout Layout { get; set; }

        /// <summary>
        /// The properties for this status layout.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.IDictionary<string, string> Properties { get; set; } = new System.Collections.Generic.Dictionary<string, string>();

        /// <summary>
        /// A unique ID which the status will use to refer to this layout configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusReference", Required = Newtonsoft.Json.Required.Always)]
        public string StatusReference { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about the mapping from a status to a new status for an issue type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class StatusMapping
    {

        /// <summary>
        /// The ID of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeId", Required = Newtonsoft.Json.Required.Always)]
        public string IssueTypeId { get; set; }

        /// <summary>
        /// The ID of the new status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newStatusId", Required = Newtonsoft.Json.Required.Always)]
        public string NewStatusId { get; set; }

        /// <summary>
        /// The ID of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusId", Required = Newtonsoft.Json.Required.Always)]
        public string StatusId { get; set; }

    }

    /// <summary>
    /// The mapping of old to new status ID for a specific project and issue type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class StatusMappingDTO
    {

        /// <summary>
        /// The issue type for the status mapping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeId", Required = Newtonsoft.Json.Required.Always)]
        public string IssueTypeId { get; set; }

        /// <summary>
        /// The project for the status mapping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.Always)]
        public string ProjectId { get; set; }

        /// <summary>
        /// The list of old and new status ID mappings for the specified project and issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusMigrations", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<StatusMigration> StatusMigrations { get; set; } = new System.Collections.ObjectModel.Collection<StatusMigration>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The details of the statuses in the associated workflows.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class StatusMetadata
    {

        /// <summary>
        /// The category of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StatusMetadataCategory Category { get; set; }

        /// <summary>
        /// The ID of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// The mapping of old to new status ID.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class StatusMigration
    {

        /// <summary>
        /// The new status ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newStatusReference", Required = Newtonsoft.Json.Required.Always)]
        public string NewStatusReference { get; set; }

        /// <summary>
        /// The old status ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oldStatusReference", Required = Newtonsoft.Json.Required.Always)]
        public string OldStatusReference { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The payload for creating a status
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class StatusPayload
    {

        /// <summary>
        /// The description of the status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The conflict strategy for the status already exists. FAIL - Fail execution, this always needs to be unique; USE - Use the existing entity and ignore new entity parameters; NEW - Create a new entity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("onConflict", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StatusPayloadOnConflict OnConflict { get; set; }

        [Newtonsoft.Json.JsonProperty("pcri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier Pcri { get; set; }

        /// <summary>
        /// The status category of the status. The value is case-sensitive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StatusPayloadStatusCategory StatusCategory { get; set; }

    }

    /// <summary>
    /// The list of issue types.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class StatusProjectIssueTypeUsage
    {

        /// <summary>
        /// The issue type ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

    }

    /// <summary>
    /// The issue types using this status in a project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class StatusProjectIssueTypeUsageDTO
    {

        [Newtonsoft.Json.JsonProperty("issueTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatusProjectIssueTypeUsagePage IssueTypes { get; set; }

        /// <summary>
        /// The project ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectId { get; set; }

        /// <summary>
        /// The status ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusId { get; set; }

    }

    /// <summary>
    /// A page of issue types.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class StatusProjectIssueTypeUsagePage
    {

        /// <summary>
        /// Page token for the next page of issue type usages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPageToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageToken { get; set; }

        /// <summary>
        /// The list of issue types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatusProjectIssueTypeUsage> Values { get; set; }

    }

    /// <summary>
    /// The project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class StatusProjectUsage
    {

        /// <summary>
        /// The project ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

    }

    /// <summary>
    /// The projects using this status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class StatusProjectUsageDTO
    {

        [Newtonsoft.Json.JsonProperty("projects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatusProjectUsagePage Projects { get; set; }

        /// <summary>
        /// The status ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusId { get; set; }

    }

    /// <summary>
    /// A page of projects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class StatusProjectUsagePage
    {

        /// <summary>
        /// Page token for the next page of issue type usages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPageToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageToken { get; set; }

        /// <summary>
        /// The list of projects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatusProjectUsage> Values { get; set; }

    }

    /// <summary>
    /// The scope of the status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class StatusScope
    {

        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectId Project { get; set; }

        /// <summary>
        /// The scope of the status. `GLOBAL` for company-managed projects and `PROJECT` for team-managed projects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StatusScopeType Type { get; set; }

    }

    /// <summary>
    /// Details of the status being updated.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class StatusUpdate
    {

        /// <summary>
        /// The description of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// The category of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCategory", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StatusUpdateStatusCategory StatusCategory { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The list of statuses that will be updated.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class StatusUpdateRequest
    {

        /// <summary>
        /// The list of statuses that will be updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<StatusUpdate> Statuses { get; set; } = new System.Collections.ObjectModel.Collection<StatusUpdate>();

    }

    /// <summary>
    /// Workflows using the status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class StatusWorkflowUsageDTO
    {

        /// <summary>
        /// The status ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusId { get; set; }

        [Newtonsoft.Json.JsonProperty("workflows", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatusWorkflowUsagePage Workflows { get; set; }

    }

    /// <summary>
    /// A page of workflows.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class StatusWorkflowUsagePage
    {

        /// <summary>
        /// Page token for the next page of issue type usages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPageToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageToken { get; set; }

        /// <summary>
        /// The list of statuses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatusWorkflowUsageWorkflow> Values { get; set; }

    }

    /// <summary>
    /// The worflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class StatusWorkflowUsageWorkflow
    {

        /// <summary>
        /// The workflow ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

    }

    /// <summary>
    /// The statuses associated with each workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class StatusesPerWorkflow
    {

        /// <summary>
        /// The ID of the initial status for the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("initialStatusId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InitialStatusId { get; set; }

        /// <summary>
        /// The status IDs associated with the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Statuses { get; set; }

        /// <summary>
        /// The ID of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkflowId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class StreamingResponseBody
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class StringList
    {

    }

    /// <summary>
    /// An issue suggested for use in the issue picker auto-completion.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SuggestedIssue
    {

        /// <summary>
        /// The ID of the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The URL of the issue type's avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("img", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Img { get; set; }

        /// <summary>
        /// The key of the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The key of the issue in HTML format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyHtml", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string KeyHtml { get; set; }

        /// <summary>
        /// The phrase containing the query string in HTML format, with the string highlighted with HTML bold tags.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Summary { get; set; }

        /// <summary>
        /// The phrase containing the query string, as plain text.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("summaryText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SummaryText { get; set; }

    }

    /// <summary>
    /// Details of changes to a priority scheme's priorities that require suggested priority mappings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SuggestedMappingsForPrioritiesRequestBean
    {

        /// <summary>
        /// The ids of priorities being removed from the scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("add", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> Add { get; set; }

        /// <summary>
        /// The ids of priorities being removed from the scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remove", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> Remove { get; set; }

    }

    /// <summary>
    /// Details of changes to a priority scheme's projects that require suggested priority mappings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SuggestedMappingsForProjectsRequestBean
    {

        /// <summary>
        /// The ids of projects being added to the scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("add", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> Add { get; set; }

    }

    /// <summary>
    /// Details of changes to a priority scheme that require suggested priority mappings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SuggestedMappingsRequestBean
    {

        /// <summary>
        /// The maximum number of results that could be on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// The priority changes in the scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priorities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SuggestedMappingsForPrioritiesRequestBean Priorities { get; set; }

        /// <summary>
        /// The project changes in the scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SuggestedMappingsForProjectsRequestBean Projects { get; set; }

        /// <summary>
        /// The id of the priority scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long SchemeId { get; set; }

        /// <summary>
        /// The index of the first item returned on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

    }

    /// <summary>
    /// The payload for custom swimlanes
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SwimlanePayload
    {

        /// <summary>
        /// The description of the quick filter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The jql query for the quick filter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jqlQuery", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string JqlQuery { get; set; }

        /// <summary>
        /// The name of the quick filter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// The payload for customising a swimlanes on a board
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SwimlanesPayload
    {

        /// <summary>
        /// The custom swimlane definitions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customSwimlanes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SwimlanePayload> CustomSwimlanes { get; set; }

        /// <summary>
        /// The name of the custom swimlane to use for work items that don't match any other swimlanes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultCustomSwimlaneName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultCustomSwimlaneName { get; set; }

        /// <summary>
        /// The swimlane strategy for the board.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("swimlaneStrategy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SwimlanesPayloadSwimlaneStrategy SwimlaneStrategy { get; set; }

    }

    /// <summary>
    /// List of system avatars.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SystemAvatars
    {

        /// <summary>
        /// A list of avatar details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("system", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Avatar> System { get; set; }

    }

    /// <summary>
    /// Defines the payload for the tabs of the screen. See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-screen-tab-fields/\#api-rest-api-3-screens-screenid-tabs-tabid-fields-post
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class TabPayload
    {

        /// <summary>
        /// The list of resource identifier of the field associated to the tab. See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-screen-tab-fields/\#api-rest-api-3-screens-screenid-tabs-tabid-fields-post
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectCreateResourceIdentifier> Fields { get; set; }

        /// <summary>
        /// The name of the tab
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// Details about a task.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class TaskProgressBeanJsonNode
    {

        /// <summary>
        /// The description of the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The execution time of the task, in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedRuntime", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedRuntime { get; set; }

        /// <summary>
        /// A timestamp recording when the task was finished.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("finished", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Finished { get; set; }

        /// <summary>
        /// The ID of the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// A timestamp recording when the task progress was last updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastUpdate", Required = Newtonsoft.Json.Required.Always)]
        public long LastUpdate { get; set; }

        /// <summary>
        /// Information about the progress of the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// The progress of the task, as a percentage complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("progress", Required = Newtonsoft.Json.Required.Always)]
        public long Progress { get; set; }

        /// <summary>
        /// The result of the task execution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode Result { get; set; }

        /// <summary>
        /// The URL of the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// A timestamp recording when the task was started.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("started", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Started { get; set; }

        /// <summary>
        /// The status of the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaskProgressBeanJsonNodeStatus Status { get; set; }

        /// <summary>
        /// A timestamp recording when the task was submitted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("submitted", Required = Newtonsoft.Json.Required.Always)]
        public long Submitted { get; set; }

        /// <summary>
        /// The ID of the user who submitted the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("submittedBy", Required = Newtonsoft.Json.Required.Always)]
        public long SubmittedBy { get; set; }

    }

    /// <summary>
    /// Details about a task.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class TaskProgressBeanObject
    {

        /// <summary>
        /// The description of the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The execution time of the task, in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedRuntime", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedRuntime { get; set; }

        /// <summary>
        /// A timestamp recording when the task was finished.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("finished", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Finished { get; set; }

        /// <summary>
        /// The ID of the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// A timestamp recording when the task progress was last updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastUpdate", Required = Newtonsoft.Json.Required.Always)]
        public long LastUpdate { get; set; }

        /// <summary>
        /// Information about the progress of the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// The progress of the task, as a percentage complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("progress", Required = Newtonsoft.Json.Required.Always)]
        public long Progress { get; set; }

        /// <summary>
        /// The result of the task execution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Result { get; set; }

        /// <summary>
        /// The URL of the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// A timestamp recording when the task was started.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("started", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Started { get; set; }

        /// <summary>
        /// The status of the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaskProgressBeanObjectStatus Status { get; set; }

        /// <summary>
        /// A timestamp recording when the task was submitted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("submitted", Required = Newtonsoft.Json.Required.Always)]
        public long Submitted { get; set; }

        /// <summary>
        /// The ID of the user who submitted the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("submittedBy", Required = Newtonsoft.Json.Required.Always)]
        public long SubmittedBy { get; set; }

    }

    /// <summary>
    /// Details about a task.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class TaskProgressBeanRemoveOptionFromIssuesResult
    {

        /// <summary>
        /// The description of the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The execution time of the task, in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedRuntime", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedRuntime { get; set; }

        /// <summary>
        /// A timestamp recording when the task was finished.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("finished", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Finished { get; set; }

        /// <summary>
        /// The ID of the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// A timestamp recording when the task progress was last updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastUpdate", Required = Newtonsoft.Json.Required.Always)]
        public long LastUpdate { get; set; }

        /// <summary>
        /// Information about the progress of the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// The progress of the task, as a percentage complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("progress", Required = Newtonsoft.Json.Required.Always)]
        public long Progress { get; set; }

        /// <summary>
        /// The result of the task execution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RemoveOptionFromIssuesResult Result { get; set; }

        /// <summary>
        /// The URL of the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// A timestamp recording when the task was started.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("started", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Started { get; set; }

        /// <summary>
        /// The status of the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaskProgressBeanRemoveOptionFromIssuesResultStatus Status { get; set; }

        /// <summary>
        /// A timestamp recording when the task was submitted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("submitted", Required = Newtonsoft.Json.Required.Always)]
        public long Submitted { get; set; }

        /// <summary>
        /// The ID of the user who submitted the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("submittedBy", Required = Newtonsoft.Json.Required.Always)]
        public long SubmittedBy { get; set; }

    }

    /// <summary>
    /// Details of the time tracking configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class TimeTrackingConfiguration
    {

        /// <summary>
        /// The default unit of time applied to logged time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultUnit", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TimeTrackingConfigurationDefaultUnit DefaultUnit { get; set; }

        /// <summary>
        /// The format that will appear on an issue's *Time Spent* field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeFormat", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TimeTrackingConfigurationTimeFormat TimeFormat { get; set; }

        /// <summary>
        /// The number of days in a working week.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workingDaysPerWeek", Required = Newtonsoft.Json.Required.Always)]
        public double WorkingDaysPerWeek { get; set; }

        /// <summary>
        /// The number of hours in a working day.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workingHoursPerDay", Required = Newtonsoft.Json.Required.Always)]
        public double WorkingHoursPerDay { get; set; }

    }

    /// <summary>
    /// Time tracking details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class TimeTrackingDetails
    {

        /// <summary>
        /// The original estimate of time needed for this issue in readable format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalEstimate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalEstimate { get; set; }

        /// <summary>
        /// The original estimate of time needed for this issue in seconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalEstimateSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long OriginalEstimateSeconds { get; set; }

        /// <summary>
        /// The remaining estimate of time needed for this issue in readable format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remainingEstimate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RemainingEstimate { get; set; }

        /// <summary>
        /// The remaining estimate of time needed for this issue in seconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remainingEstimateSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long RemainingEstimateSeconds { get; set; }

        /// <summary>
        /// Time worked on this issue in readable format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeSpent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeSpent { get; set; }

        /// <summary>
        /// Time worked on this issue in seconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeSpentSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long TimeSpentSeconds { get; set; }

    }

    /// <summary>
    /// Details about the time tracking provider.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class TimeTrackingProvider
    {

        /// <summary>
        /// The key for the time tracking provider. For example, *JIRA*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; }

        /// <summary>
        /// The name of the time tracking provider. For example, *JIRA provided time tracking*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The URL of the configuration page for the time tracking provider app. For example, */example/config/url*. This property is only returned if the `adminPageKey` property is set in the module descriptor of the time tracking provider app.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

    }

    /// <summary>
    /// The payload for the layout details for the destination end of a transition
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ToLayoutPayload
    {

        /// <summary>
        /// Defines where the transition line will be connected to a status. Port 0 to 7 are acceptable values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("port", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Port { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier Status { get; set; }

    }

    /// <summary>
    /// Details of a workflow transition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Transition
    {

        /// <summary>
        /// The description of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        public string Description { get; set; }

        /// <summary>
        /// The statuses the transition can start from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> From { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The ID of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// The properties of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("rules", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowRules Rules { get; set; }

        [Newtonsoft.Json.JsonProperty("screen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransitionScreenDetails Screen { get; set; }

        /// <summary>
        /// The status the transition goes to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Always)]
        public string To { get; set; }

        /// <summary>
        /// The type of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransitionType Type { get; set; }

    }

    /// <summary>
    /// Link information for workflow transitions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class TransitionLink
    {

        /// <summary>
        /// The from port number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fromPort", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FromPort { get; set; }

        /// <summary>
        /// The from status reference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fromStatusReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FromStatusReference { get; set; }

        /// <summary>
        /// The to port number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("toPort", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ToPort { get; set; }

    }

    /// <summary>
    /// The payload for creating a transition in a workflow. Can be DIRECTED, GLOBAL, SELF-LOOPED, GLOBAL LOOPED
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class TransitionPayload
    {

        /// <summary>
        /// The actions that are performed when the transition is made
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RulePayload> Actions { get; set; }

        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConditionGroupPayload Conditions { get; set; }

        /// <summary>
        /// Mechanism in Jira for triggering certain actions, like notifications, automations, etc. Unless a custom notification scheme is configure, it's better not to provide any value here
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customIssueEventId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomIssueEventId { get; set; }

        /// <summary>
        /// The description of the transition
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The statuses that the transition can be made from
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FromLayoutPayload> From { get; set; }

        /// <summary>
        /// The id of the transition
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        /// <summary>
        /// The name of the transition
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The properties of the transition
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ToLayoutPayload To { get; set; }

        [Newtonsoft.Json.JsonProperty("transitionScreen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RulePayload TransitionScreen { get; set; }

        /// <summary>
        /// The triggers that are performed when the transition is made
        /// </summary>
        [Newtonsoft.Json.JsonProperty("triggers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RulePayload> Triggers { get; set; }

        /// <summary>
        /// The type of the transition
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransitionPayloadType Type { get; set; }

        /// <summary>
        /// The validators that are performed when the transition is made
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validators", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RulePayload> Validators { get; set; }

    }

    /// <summary>
    /// Details about a workflow transition in preview context.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class TransitionPreview
    {

        /// <summary>
        /// The post-functions of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PreviewRuleConfiguration> Actions { get; set; }

        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PreviewConditionGroupConfiguration Conditions { get; set; }

        /// <summary>
        /// The custom issue event ID for the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customIssueEventId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomIssueEventId { get; set; }

        /// <summary>
        /// The description of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The statuses the transition can start from, and the mapping of ports between the statuses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransitionLink> Links { get; set; }

        /// <summary>
        /// The name of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The status the transition goes to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("toStatusReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ToStatusReference { get; set; }

        [Newtonsoft.Json.JsonProperty("transitionScreen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PreviewRuleConfiguration TransitionScreen { get; set; }

        /// <summary>
        /// The triggers of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("triggers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PreviewTrigger> Triggers { get; set; }

        /// <summary>
        /// The transition type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransitionPreviewType Type { get; set; }

        /// <summary>
        /// The validators of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validators", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PreviewRuleConfiguration> Validators { get; set; }

    }

    /// <summary>
    /// The details of a transition screen.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class TransitionScreenDetails
    {

        /// <summary>
        /// The ID of the screen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the screen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// The transition update data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class TransitionUpdateDTO
    {

        /// <summary>
        /// The post-functions of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowRuleConfiguration> Actions { get; set; }

        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConditionGroupUpdate Conditions { get; set; }

        /// <summary>
        /// The custom event ID of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customIssueEventId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomIssueEventId { get; set; }

        /// <summary>
        /// The description of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The statuses the transition can start from, and the mapping of ports between the statuses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowTransitionLinks> Links { get; set; }

        /// <summary>
        /// The name of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The properties of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Properties { get; set; }

        /// <summary>
        /// The status the transition goes to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("toStatusReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ToStatusReference { get; set; }

        [Newtonsoft.Json.JsonProperty("transitionScreen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowRuleConfiguration TransitionScreen { get; set; }

        /// <summary>
        /// The triggers of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("triggers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowTrigger> Triggers { get; set; }

        /// <summary>
        /// The transition type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransitionUpdateDTOType Type { get; set; }

        /// <summary>
        /// The validators of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validators", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowRuleConfiguration> Validators { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of issue transitions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Transitions
    {

        /// <summary>
        /// Expand options that include additional transitions details in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// List of issue transitions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transitions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueTransition> Transitions1 { get; set; }

    }

    /// <summary>
    /// The details of a UI modification's context, which define where to activate the UI modification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UiModificationContextDetails
    {

        /// <summary>
        /// The ID of the UI modification context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Whether a context is available. For example, when a project is deleted the context becomes unavailable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAvailable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsAvailable { get; set; }

        /// <summary>
        /// The issue type ID of the context. Null is treated as a wildcard, meaning the UI modification will be applied to all issue types. Each UI modification context can have a maximum of one wildcard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssueTypeId { get; set; }

        /// <summary>
        /// The project ID of the context. Null is treated as a wildcard, meaning the UI modification will be applied to all projects. Each UI modification context can have a maximum of one wildcard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectId { get; set; }

        /// <summary>
        /// The view type of the context. Only `GIC`(Global Issue Create), `IssueView` and `IssueTransition` are supported. Null is treated as a wildcard, meaning the UI modification will be applied to all view types. Each UI modification context can have a maximum of one wildcard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("viewType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UiModificationContextDetailsViewType ViewType { get; set; }

    }

    /// <summary>
    /// The details of a UI modification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UiModificationDetails
    {

        /// <summary>
        /// List of contexts of the UI modification. The maximum number of contexts is 1000.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contexts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UiModificationContextDetails> Contexts { get; set; }

        /// <summary>
        /// The data of the UI modification. The maximum size of the data is 50000 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <summary>
        /// The description of the UI modification. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the UI modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the UI modification. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// The URL of the UI modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        public string Self { get; set; }

    }

    /// <summary>
    /// Identifiers for a UI modification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UiModificationIdentifiers
    {

        /// <summary>
        /// The ID of the UI modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The URL of the UI modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        public string Self { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UnrestrictedUserEmail
    {

        /// <summary>
        /// The accountId of the user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountId { get; set; }

        /// <summary>
        /// The email of the user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details of a custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UpdateCustomFieldDetails
    {

        /// <summary>
        /// The description of the custom field. The maximum length is 40000 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the custom field. It doesn't have to be unique. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The searcher that defines the way the field is searched in Jira. It can be set to `null`, otherwise you must specify the valid searcher for the field type, as listed below (abbreviated values shown):
        /// <br/>
        /// <br/> *  `cascadingselect`: `cascadingselectsearcher`
        /// <br/> *  `datepicker`: `daterange`
        /// <br/> *  `datetime`: `datetimerange`
        /// <br/> *  `float`: `exactnumber` or `numberrange`
        /// <br/> *  `grouppicker`: `grouppickersearcher`
        /// <br/> *  `importid`: `exactnumber` or `numberrange`
        /// <br/> *  `labels`: `labelsearcher`
        /// <br/> *  `multicheckboxes`: `multiselectsearcher`
        /// <br/> *  `multigrouppicker`: `multiselectsearcher`
        /// <br/> *  `multiselect`: `multiselectsearcher`
        /// <br/> *  `multiuserpicker`: `userpickergroupsearcher`
        /// <br/> *  `multiversion`: `versionsearcher`
        /// <br/> *  `project`: `projectsearcher`
        /// <br/> *  `radiobuttons`: `multiselectsearcher`
        /// <br/> *  `readonlyfield`: `textsearcher`
        /// <br/> *  `select`: `multiselectsearcher`
        /// <br/> *  `textarea`: `textsearcher`
        /// <br/> *  `textfield`: `textsearcher`
        /// <br/> *  `url`: `exacttextsearcher`
        /// <br/> *  `userpicker`: `userpickergroupsearcher`
        /// <br/> *  `version`: `versionsearcher`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searcherKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UpdateCustomFieldDetailsSearcherKey SearcherKey { get; set; }

    }

    /// <summary>
    /// The request for updating the default project classification level.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UpdateDefaultProjectClassificationBean
    {

        /// <summary>
        /// The ID of the project classification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

    }

    /// <summary>
    /// The ID of a screen scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UpdateDefaultScreenScheme
    {

        /// <summary>
        /// The ID of the screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("screenSchemeId", Required = Newtonsoft.Json.Required.Always)]
        public string ScreenSchemeId { get; set; }

    }

    /// <summary>
    /// The details of the field configuration scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UpdateFieldConfigurationSchemeDetails
    {

        /// <summary>
        /// The description of the field configuration scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the field configuration scheme. The name must be unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

    }

    /// <summary>
    /// Details of issue security scheme level.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UpdateIssueSecurityLevelDetails
    {

        /// <summary>
        /// The description of the issue security scheme level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the issue security scheme level. Must be unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UpdateIssueSecuritySchemeRequestBean
    {

        /// <summary>
        /// The description of the security scheme scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the security scheme scheme. Must be unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// Details of a notification scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UpdateNotificationSchemeDetails
    {

        /// <summary>
        /// The description of the notification scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the notification scheme. Must be unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Update priorities in a scheme
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UpdatePrioritiesInSchemeRequestBean
    {

        /// <summary>
        /// Priorities to add to a scheme
        /// </summary>
        [Newtonsoft.Json.JsonProperty("add", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrioritySchemeChangesWithoutMappings Add { get; set; }

        /// <summary>
        /// Priorities to remove from a scheme
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remove", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrioritySchemeChangesWithoutMappings Remove { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details of an issue priority.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UpdatePriorityDetails
    {

        /// <summary>
        /// The ID for the avatar for the priority. This parameter is nullable and both iconUrl and avatarId cannot be defined.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long AvatarId { get; set; }

        /// <summary>
        /// The description of the priority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The URL of an icon for the priority. Accepted protocols are HTTP and HTTPS. Built in icons can also be used. Both iconUrl and avatarId cannot be defined.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iconUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UpdatePriorityDetailsIconUrl? IconUrl { get; set; }

        /// <summary>
        /// The name of the priority. Must be unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The status color of the priority in 3-digit or 6-digit hexadecimal format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusColor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusColor { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details of a priority scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UpdatePrioritySchemeRequestBean
    {

        /// <summary>
        /// The default priority of the scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultPriorityId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long DefaultPriorityId { get; set; }

        /// <summary>
        /// The description of the priority scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Instructions to migrate the priorities of issues.
        /// <br/>
        /// <br/>`in` mappings are used to migrate the priorities of issues to priorities used within the priority scheme.
        /// <br/>
        /// <br/>`out` mappings are used to migrate the priorities of issues to priorities not used within the priority scheme.
        /// <br/>
        /// <br/> *  When **priorities** are **added** to the priority scheme, no mapping needs to be provided as the new priorities are not used by any issues.
        /// <br/> *  When **priorities** are **removed** from the priority scheme, issues that are using those priorities must be migrated to new priorities used by the priority scheme.
        /// <br/>    
        /// <br/>     *  An `in` mapping must be provided for each of these priorities.
        /// <br/> *  When **projects** are **added** to the priority scheme, the priorities of issues in those projects might need to be migrated to new priorities used by the priority scheme. This can occur when the current scheme does not use all the priorities in the project(s)' priority scheme(s).
        /// <br/>    
        /// <br/>     *  An `in` mapping must be provided for each of these priorities.
        /// <br/> *  When **projects** are **removed** from the priority scheme, the priorities of issues in those projects might need to be migrated to new priorities within the **Default Priority Scheme** that are not used by the priority scheme. This can occur when the **Default Priority Scheme** does not use all the priorities within the current scheme.
        /// <br/>    
        /// <br/>     *  An `out` mapping must be provided for each of these priorities.
        /// <br/>
        /// <br/>For more information on `in` and `out` mappings, see the child properties documentation for the `PriorityMapping` object below.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mappings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PriorityMapping Mappings { get; set; }

        /// <summary>
        /// The name of the priority scheme. Must be unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The priorities in the scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priorities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UpdatePrioritiesInSchemeRequestBean Priorities { get; set; }

        /// <summary>
        /// The projects in the scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UpdateProjectsInSchemeRequestBean Projects { get; set; }

    }

    /// <summary>
    /// Details of the updated priority scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UpdatePrioritySchemeResponseBean
    {

        [Newtonsoft.Json.JsonProperty("priorityScheme", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrioritySchemeWithPaginatedPrioritiesAndProjects PriorityScheme { get; set; }

        /// <summary>
        /// The in-progress issue migration task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("task", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskProgressBeanJsonNode Task { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about the project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UpdateProjectDetails
    {

        /// <summary>
        /// The default assignee when creating issues for this project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assigneeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UpdateProjectDetailsAssigneeType AssigneeType { get; set; }

        /// <summary>
        /// An integer value for the project's avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long AvatarId { get; set; }

        /// <summary>
        /// The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-2-projectCategory-get) operation. To remove the project category from the project, set the value to `-1.`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("categoryId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long CategoryId { get; set; }

        /// <summary>
        /// A brief description of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the issue security scheme for the project, which enables you to control who can and cannot view issues. Use the [Get issue security schemes](#api-rest-api-2-issuesecurityschemes-get) resource to get all issue security scheme IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueSecurityScheme", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssueSecurityScheme { get; set; }

        /// <summary>
        /// Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// This parameter is deprecated because of privacy changes. Use `leadAccountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. The user name of the project lead. Cannot be provided with `leadAccountId`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lead", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lead { get; set; }

        /// <summary>
        /// The account ID of the project lead. Cannot be provided with `lead`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("leadAccountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LeadAccountId { get; set; }

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The ID of the notification scheme for the project. Use the [Get notification schemes](#api-rest-api-2-notificationscheme-get) resource to get a list of notification scheme IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationScheme", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long NotificationScheme { get; set; }

        /// <summary>
        /// The ID of the permission scheme for the project. Use the [Get all permission schemes](#api-rest-api-2-permissionscheme-get) resource to see a list of all permission scheme IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionScheme", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long PermissionScheme { get; set; }

        /// <summary>
        /// Previous project keys to be released from the current project. Released keys must belong to the current project and not contain the current project key
        /// </summary>
        [Newtonsoft.Json.JsonProperty("releasedProjectKeys", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ReleasedProjectKeys { get; set; }

        /// <summary>
        /// A link to information about this project, such as project documentation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

    }

    /// <summary>
    /// Update projects in a scheme
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UpdateProjectsInSchemeRequestBean
    {

        /// <summary>
        /// Projects to add to a scheme
        /// </summary>
        [Newtonsoft.Json.JsonProperty("add", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrioritySchemeChangesWithoutMappings Add { get; set; }

        /// <summary>
        /// Projects to remove from a scheme
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remove", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrioritySchemeChangesWithoutMappings Remove { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details of an issue resolution.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UpdateResolutionDetails
    {

        /// <summary>
        /// The description of the resolution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the resolution. Must be unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details of a screen.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UpdateScreenDetails
    {

        /// <summary>
        /// The description of the screen. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the screen. The name must be unique. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// Details of a screen scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UpdateScreenSchemeDetails
    {

        /// <summary>
        /// The description of the screen scheme. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the screen scheme. The name must be unique. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The IDs of the screens for the screen types of the screen scheme. Only screens used in classic projects are accepted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("screens", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UpdateScreenTypes Screens { get; set; }

    }

    /// <summary>
    /// The IDs of the screens for the screen types of the screen scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UpdateScreenTypes
    {

        /// <summary>
        /// The ID of the create screen. To remove the screen association, pass a null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("create", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Create { get; set; }

        /// <summary>
        /// The ID of the default screen. When specified, must include a screen ID as a default screen is required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Default { get; set; }

        /// <summary>
        /// The ID of the edit screen. To remove the screen association, pass a null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("edit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Edit { get; set; }

        /// <summary>
        /// The ID of the view screen. To remove the screen association, pass a null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("view", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string View { get; set; }

    }

    /// <summary>
    /// The details of a UI modification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UpdateUiModificationDetails
    {

        /// <summary>
        /// List of contexts of the UI modification. The maximum number of contexts is 1000. If provided, replaces all existing contexts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contexts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UiModificationContextDetails> Contexts { get; set; }

        /// <summary>
        /// The data of the UI modification. The maximum size of the data is 50000 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <summary>
        /// The description of the UI modification. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the UI modification. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UpdateUserToGroupBean
    {

        /// <summary>
        /// The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountId { get; set; }

        /// <summary>
        /// This property is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A project category.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UpdatedProjectCategory
    {

        /// <summary>
        /// The name of the project category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the project category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The description of the project category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The URL of the project category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

    }

    /// <summary>
    /// A user with details as permitted by the user's Atlassian Account privacy settings. However, be aware of these exceptions:
    /// <br/>
    /// <br/> *  User record deleted from Atlassian: This occurs as the result of a right to be forgotten request. In this case, `displayName` provides an indication and other parameters have default values or are blank (for example, email is blank).
    /// <br/> *  User record corrupted: This occurs as a results of events such as a server import and can only happen to deleted users. In this case, `accountId` returns *unknown* and all other parameters have fallback values.
    /// <br/> *  User record unavailable: This usually occurs due to an internal service outage. In this case, all parameters have fallback values.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class User
    {

        /// <summary>
        /// The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required in requests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountId { get; set; }

        /// <summary>
        /// The user account type. Can take the following values:
        /// <br/>
        /// <br/> *  `atlassian` regular Atlassian user account
        /// <br/> *  `app` system account used for Connect applications and OAuth to represent external systems
        /// <br/> *  `customer` Jira Service Desk account representing an external service desk
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UserAccountType AccountType { get; set; }

        /// <summary>
        /// Whether the user is active.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Active { get; set; }

        /// <summary>
        /// The application roles the user is assigned to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("applicationRoles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SimpleListWrapperApplicationRole ApplicationRoles { get; set; }

        /// <summary>
        /// The avatars of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarUrls", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AvatarUrlsBean AvatarUrls { get; set; }

        /// <summary>
        /// The display name of the user. Depending on the user’s privacy setting, this may return an alternative value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The email address of the user. Depending on the user’s privacy setting, this may be returned as null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Expand options that include additional user details in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// The groups that the user belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SimpleListWrapperGroupName Groups { get; set; }

        /// <summary>
        /// This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The locale of the user. Depending on the user’s privacy setting, this may be returned as null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locale { get; set; }

        /// <summary>
        /// This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The URL of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The time zone specified in the user's profile. If the user's time zone is not visible to the current user (due to user's profile setting), or if a time zone has not been set, the instance's default time zone will be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeZone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeZone { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UserBean
    {

        /// <summary>
        /// The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountId { get; set; }

        /// <summary>
        /// Whether the user is active.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Active { get; set; }

        /// <summary>
        /// The avatars of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarUrls", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserBeanAvatarUrls AvatarUrls { get; set; }

        /// <summary>
        /// The display name of the user. Depending on the user’s privacy setting, this may return an alternative value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// This property is deprecated in favor of `accountId` because of privacy changes. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  
        /// <br/>The key of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// This property is deprecated in favor of `accountId` because of privacy changes. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  
        /// <br/>The username of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The URL of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UserBeanAvatarUrls
    {

        /// <summary>
        /// The URL of the user's 16x16 pixel avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("16x16", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri _16x16 { get; set; }

        /// <summary>
        /// The URL of the user's 24x24 pixel avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("24x24", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri _24x24 { get; set; }

        /// <summary>
        /// The URL of the user's 32x32 pixel avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("32x32", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri _32x32 { get; set; }

        /// <summary>
        /// The URL of the user's 48x48 pixel avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("48x48", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri _48x48 { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UserColumnRequestBody
    {

        [Newtonsoft.Json.JsonProperty("columns", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Columns { get; set; }

    }

    /// <summary>
    /// User details permitted by the user's Atlassian Account privacy settings. However, be aware of these exceptions:
    /// <br/>
    /// <br/> *  User record deleted from Atlassian: This occurs as the result of a right to be forgotten request. In this case, `displayName` provides an indication and other parameters have default values or are blank (for example, email is blank).
    /// <br/> *  User record corrupted: This occurs as a results of events such as a server import and can only happen to deleted users. In this case, `accountId` returns *unknown* and all other parameters have fallback values.
    /// <br/> *  User record unavailable: This usually occurs due to an internal service outage. In this case, all parameters have fallback values.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UserDetails
    {

        /// <summary>
        /// The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountId { get; set; }

        /// <summary>
        /// The type of account represented by this user. This will be one of 'atlassian' (normal users), 'app' (application user) or 'customer' (Jira Service Desk customer user)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountType { get; set; }

        /// <summary>
        /// Whether the user is active.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Active { get; set; }

        /// <summary>
        /// The avatars of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarUrls", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AvatarUrlsBean AvatarUrls { get; set; }

        /// <summary>
        /// The display name of the user. Depending on the user’s privacy settings, this may return an alternative value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The email address of the user. Depending on the user’s privacy settings, this may be returned as null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The URL of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        /// <summary>
        /// The time zone specified in the user's profile. Depending on the user’s privacy settings, this may be returned as null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeZone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeZone { get; set; }

    }

    /// <summary>
    /// Filter for a User Picker (single) custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UserFilter
    {

        /// <summary>
        /// Whether the filter is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Always)]
        public bool Enabled { get; set; }

        /// <summary>
        /// User groups autocomplete suggestion users must belong to. If not provided, the default values are used. A maximum of 10 groups can be provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Groups { get; set; }

        /// <summary>
        /// Roles that autocomplete suggestion users must belong to. If not provided, the default values are used. A maximum of 10 roles can be provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roleIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> RoleIds { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of user account IDs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UserKey
    {

        /// <summary>
        /// The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Returns *unknown* if the record is deleted and corrupted, for example, as the result of a server import.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountId { get; set; }

        /// <summary>
        /// This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

    }

    /// <summary>
    /// A paginated list of users sharing the filter. This includes users that are members of the groups or can browse the projects that the filter is shared with.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UserList
    {

        /// <summary>
        /// The index of the last item returned on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("end-index", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EndIndex { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<User> Items { get; set; }

        /// <summary>
        /// The maximum number of results that could be on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("max-results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// The number of items on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Size { get; set; }

        /// <summary>
        /// The index of the first item returned on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start-index", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StartIndex { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UserMigrationBean
    {

        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountId { get; set; }

        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UserNavPropertyJsonBean
    {

        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    /// <summary>
    /// Details of a permission and its availability to a user.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UserPermission
    {

        /// <summary>
        /// Indicate whether the permission key is deprecated. Note that deprecated keys cannot be used in the `permissions parameter of Get my permissions. Deprecated keys are not returned by Get all permissions.`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deprecatedKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DeprecatedKey { get; set; }

        /// <summary>
        /// The description of the permission.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Whether the permission is available to the user in the queried context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("havePermission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HavePermission { get; set; }

        /// <summary>
        /// The ID of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-2-permissions-get) to get the list of permissions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The key of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-2-permissions-get) to get the list of permissions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The name of the permission.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The type of the permission.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UserPermissionType Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A user found in a search.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UserPickerUser
    {

        /// <summary>
        /// The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountId { get; set; }

        /// <summary>
        /// The user account type. Can take the following values:
        /// <br/>
        /// <br/> *  `atlassian` regular Atlassian user account
        /// <br/> *  `app` system account used for Connect applications and OAuth to represent external systems
        /// <br/> *  `customer` Jira Service Desk account representing an external service desk
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UserPickerUserAccountType AccountType { get; set; }

        /// <summary>
        /// The avatar URL of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri AvatarUrl { get; set; }

        /// <summary>
        /// The display name of the user. Depending on the user’s privacy setting, this may be returned as null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The display name, email address, and key of the user with the matched query string highlighted with the HTML bold tag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("html", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html { get; set; }

        /// <summary>
        /// This property is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// This property is no longer available . See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// The level of validation to return from the API. If no values are provided, the default would return `WARNING` and `ERROR` level validation results.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ValidationOptionsForCreate
    {

        [Newtonsoft.Json.JsonProperty("levels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Levels> Levels { get; set; }

    }

    /// <summary>
    /// The level of validation to return from the API. If no values are provided, the default would return `WARNING` and `ERROR` level validation results.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ValidationOptionsForUpdate
    {

        [Newtonsoft.Json.JsonProperty("levels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Levels2> Levels { get; set; }

    }

    /// <summary>
    /// An operand that is a user-provided value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ValueOperand
    {

        /// <summary>
        /// Encoded value, which can be used directly in a JQL query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("encodedValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EncodedValue { get; set; }

        /// <summary>
        /// The operand value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about a project version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Version
    {

        /// <summary>
        /// If the expand option `approvers` is used, returns a list containing the approvers for this version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("approvers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VersionApprover> Approvers { get; set; }

        /// <summary>
        /// Indicates that the version is archived. Optional when creating or updating a version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("archived", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Archived { get; set; }

        /// <summary>
        /// The description of the version. Optional when creating or updating a version. The maximum size is 16,384 bytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// If the expand option `driver` is used, returns the Atlassian account ID of the driver.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("driver", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Driver { get; set; }

        /// <summary>
        /// Use [expand](em&gt;#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `operations` Returns the list of operations available for this version.
        /// <br/> *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.
        /// <br/> *  `driver` Returns the Atlassian account ID of the version driver.
        /// <br/> *  `approvers` Returns a list containing approvers for this version.
        /// <br/>
        /// <br/>Optional for create and update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// The ID of the version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// If the expand option `issuesstatus` is used, returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuesStatusForFixVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VersionIssuesStatus IssuesStatusForFixVersion { get; set; }

        /// <summary>
        /// The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moveUnfixedIssuesTo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri MoveUnfixedIssuesTo { get; set; }

        /// <summary>
        /// The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// If the expand option `operations` is used, returns the list of operations available for this version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SimpleLink> Operations { get; set; }

        /// <summary>
        /// Indicates that the version is overdue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overdue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Overdue { get; set; }

        /// <summary>
        /// Deprecated. Use `projectId`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project { get; set; }

        /// <summary>
        /// The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ProjectId { get; set; }

        /// <summary>
        /// The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("releaseDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset ReleaseDate { get; set; }

        /// <summary>
        /// Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("released", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Released { get; set; }

        /// <summary>
        /// The URL of the version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset StartDate { get; set; }

        /// <summary>
        /// The date on which work on this version is expected to finish, expressed in the instance's *Day/Month/Year Format* date format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userReleaseDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserReleaseDate { get; set; }

        /// <summary>
        /// The date on which work on this version is expected to start, expressed in the instance's *Day/Month/Year Format* date format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userStartDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserStartDate { get; set; }

    }

    /// <summary>
    /// Contains details about a version approver.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class VersionApprover
    {

        /// <summary>
        /// The Atlassian account ID of the approver.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountId { get; set; }

        /// <summary>
        /// A description of why the user is declining the approval.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("declineReason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeclineReason { get; set; }

        /// <summary>
        /// A description of what the user is approving within the specified version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The status of the approval, which can be *PENDING*, *APPROVED*, or *DECLINED*
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Various counts of issues within a version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class VersionIssueCounts
    {

        /// <summary>
        /// List of custom fields using the version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customFieldUsage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VersionUsageInCustomField> CustomFieldUsage { get; set; }

        /// <summary>
        /// Count of issues where a version custom field is set to the version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueCountWithCustomFieldsShowingVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssueCountWithCustomFieldsShowingVersion { get; set; }

        /// <summary>
        /// Count of issues where the `affectedVersion` is set to the version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuesAffectedCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssuesAffectedCount { get; set; }

        /// <summary>
        /// Count of issues where the `fixVersion` is set to the version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuesFixedCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssuesFixedCount { get; set; }

        /// <summary>
        /// The URL of these count details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

    }

    /// <summary>
    /// Counts of the number of issues in various statuses.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class VersionIssuesStatus
    {

        /// <summary>
        /// Count of issues with status *done*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("done", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Done { get; set; }

        /// <summary>
        /// Count of issues with status *in progress*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inProgress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long InProgress { get; set; }

        /// <summary>
        /// Count of issues with status *to do*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("toDo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ToDo { get; set; }

        /// <summary>
        /// Count of issues with a status other than *to do*, *in progress*, and *done*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unmapped", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Unmapped { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class VersionMoveBean
    {

        /// <summary>
        /// The URL (self link) of the version after which to place the moved version. Cannot be used with `position`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("after", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri After { get; set; }

        /// <summary>
        /// An absolute position in which to place the moved version. Cannot be used with `after`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VersionMoveBeanPosition Position { get; set; }

    }

    /// <summary>
    /// Associated related work to a version
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class VersionRelatedWork
    {

        /// <summary>
        /// The category of the related work
        /// </summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Always)]
        public string Category { get; set; }

        /// <summary>
        /// The ID of the issue associated with the related work (if there is one). Cannot be updated via the Rest API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssueId { get; set; }

        /// <summary>
        /// The id of the related work. For the native release note related work item, this will be null, and Rest API does not support updating it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relatedWorkId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelatedWorkId { get; set; }

        /// <summary>
        /// The title of the related work
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// The URL of the related work. Will be null for the native release note related work item, but is otherwise required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Url { get; set; }

    }

    /// <summary>
    /// Count of a version's unresolved issues.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class VersionUnresolvedIssuesCount
    {

        /// <summary>
        /// Count of issues.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuesCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssuesCount { get; set; }

        /// <summary>
        /// Count of unresolved issues.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuesUnresolvedCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssuesUnresolvedCount { get; set; }

        /// <summary>
        /// The URL of these count details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

    }

    /// <summary>
    /// List of custom fields using the version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class VersionUsageInCustomField
    {

        /// <summary>
        /// The ID of the custom field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customFieldId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long CustomFieldId { get; set; }

        /// <summary>
        /// The name of the custom field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldName { get; set; }

        /// <summary>
        /// Count of the issues where the custom field contains the version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueCountWithVersionInCustomField", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssueCountWithVersionInCustomField { get; set; }

    }

    /// <summary>
    /// The group or role to which this item is visible.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Visibility
    {

        /// <summary>
        /// The ID of the group or the name of the role that visibility of this item is restricted to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }

        /// <summary>
        /// Whether visibility of this item is restricted to a group or role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VisibilityType Type { get; set; }

        /// <summary>
        /// The name of the group or role that visibility of this item is restricted to. Please note that the name of a group is mutable, to reliably identify a group use `identifier`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The details of votes on an issue.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Votes
    {

        /// <summary>
        /// Whether the user making this request has voted on the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasVoted", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasVoted { get; set; }

        /// <summary>
        /// The URL of these issue vote details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// List of the users who have voted on this issue. An empty list is returned when the calling user doesn't have the *View voters and watchers* project permission.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("voters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<User> Voters { get; set; }

        /// <summary>
        /// The number of votes on the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("votes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Votes1 { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WarningCollection
    {

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Warnings { get; set; }

    }

    /// <summary>
    /// The details of watchers on an issue.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Watchers
    {

        /// <summary>
        /// Whether the calling user is watching this issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isWatching", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsWatching { get; set; }

        /// <summary>
        /// The URL of these issue watcher details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        /// <summary>
        /// The number of users watching this issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("watchCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int WatchCount { get; set; }

        /// <summary>
        /// Details of the users watching this issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("watchers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserDetails> Watchers1 { get; set; }

    }

    /// <summary>
    /// A webhook.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Webhook
    {

        /// <summary>
        /// The Jira events that trigger the webhook.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Events> Events { get; set; } = new System.Collections.ObjectModel.Collection<Events>();

        /// <summary>
        /// The date after which the webhook is no longer sent. Use [Extend webhook life](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-webhooks/#api-rest-api-3-webhook-refresh-put) to extend the date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ExpirationDate { get; set; }

        /// <summary>
        /// A list of field IDs. When the issue changelog contains any of the fields, the webhook `jira:issue_updated` is sent. If this parameter is not present, the app is notified about all field updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldIdsFilter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> FieldIdsFilter { get; set; }

        /// <summary>
        /// The ID of the webhook.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        /// <summary>
        /// A list of issue property keys. A change of those issue properties triggers the `issue_property_set` or `issue_property_deleted` webhooks. If this parameter is not present, the app is notified about all issue property updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuePropertyKeysFilter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> IssuePropertyKeysFilter { get; set; }

        /// <summary>
        /// The JQL filter that specifies which issues the webhook is sent for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jqlFilter", Required = Newtonsoft.Json.Required.Always)]
        public string JqlFilter { get; set; }

        /// <summary>
        /// The URL that specifies where the webhooks are sent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        public string Url { get; set; }

    }

    /// <summary>
    /// A list of webhooks.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WebhookDetails
    {

        /// <summary>
        /// The Jira events that trigger the webhook.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Events2> Events { get; set; } = new System.Collections.ObjectModel.Collection<Events2>();

        /// <summary>
        /// A list of field IDs. When the issue changelog contains any of the fields, the webhook `jira:issue_updated` is sent. If this parameter is not present, the app is notified about all field updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldIdsFilter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> FieldIdsFilter { get; set; }

        /// <summary>
        /// A list of issue property keys. A change of those issue properties triggers the `issue_property_set` or `issue_property_deleted` webhooks. If this parameter is not present, the app is notified about all issue property updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuePropertyKeysFilter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> IssuePropertyKeysFilter { get; set; }

        /// <summary>
        /// The JQL filter that specifies which issues the webhook is sent for. Only a subset of JQL can be used. The supported elements are:
        /// <br/>
        /// <br/> *  Fields: `issueKey`, `project`, `issuetype`, `status`, `assignee`, `reporter`, `issue.property`, and `cf[id]`. For custom fields (`cf[id]`), only the epic label custom field is supported.".
        /// <br/> *  Operators: `=`, `!=`, `IN`, and `NOT IN`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jqlFilter", Required = Newtonsoft.Json.Required.Always)]
        public string JqlFilter { get; set; }

    }

    /// <summary>
    /// Details of webhooks to register.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WebhookRegistrationDetails
    {

        /// <summary>
        /// The URL that specifies where to send the webhooks. This URL must use the same base URL as the Connect app. Only a single URL per app is allowed to be registered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        public string Url { get; set; }

        /// <summary>
        /// A list of webhooks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webhooks", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<WebhookDetails> Webhooks { get; set; } = new System.Collections.ObjectModel.Collection<WebhookDetails>();

    }

    /// <summary>
    /// The date the refreshed webhooks expire.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WebhooksExpirationDate
    {

        /// <summary>
        /// The expiration date of all the refreshed webhooks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Always)]
        public long ExpirationDate { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkManagementNavigationInfo
    {

        [Newtonsoft.Json.JsonProperty("boardName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BoardName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about a workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Workflow
    {

        /// <summary>
        /// The creation date of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        /// <summary>
        /// The description of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        public string Description { get; set; }

        /// <summary>
        /// Whether the workflow has a draft version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasDraftWorkflow", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasDraftWorkflow { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public PublishedWorkflowId Id { get; set; } = new PublishedWorkflowId();

        /// <summary>
        /// Whether this is the default workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDefault { get; set; }

        [Newtonsoft.Json.JsonProperty("operations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowOperations Operations { get; set; }

        /// <summary>
        /// The projects the workflow is assigned to, through workflow schemes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectDetails> Projects { get; set; }

        /// <summary>
        /// The workflow schemes the workflow is assigned to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowSchemeIdName> Schemes { get; set; }

        /// <summary>
        /// The statuses of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowStatus> Statuses { get; set; }

        /// <summary>
        /// The transitions of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transitions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Transition> Transitions { get; set; }

        /// <summary>
        /// The last edited date of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    /// <summary>
    /// The list of status mappings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowAssociationStatusMapping
    {

        /// <summary>
        /// The ID of the status in the new workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newStatusId", Required = Newtonsoft.Json.Required.Always)]
        public string NewStatusId { get; set; }

        /// <summary>
        /// The ID of the status in the old workflow that isn't present in the new workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oldStatusId", Required = Newtonsoft.Json.Required.Always)]
        public string OldStatusId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowCapabilities
    {

        /// <summary>
        /// The Connect provided ecosystem rules available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("connectRules", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AvailableWorkflowConnectRule> ConnectRules { get; set; }

        /// <summary>
        /// The scope of the workflow capabilities. `GLOBAL` for company-managed projects and `PROJECT` for team-managed projects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("editorScope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WorkflowCapabilitiesEditorScope EditorScope { get; set; }

        /// <summary>
        /// The Forge provided ecosystem rules available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forgeRules", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AvailableWorkflowForgeRule> ForgeRules { get; set; }

        /// <summary>
        /// The types of projects that this capability set is available for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ProjectTypes> ProjectTypes { get; set; }

        /// <summary>
        /// The Atlassian provided system rules available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("systemRules", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AvailableWorkflowSystemRule> SystemRules { get; set; }

        /// <summary>
        /// The trigger rules available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("triggerRules", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AvailableWorkflowTriggers> TriggerRules { get; set; }

    }

    /// <summary>
    /// The payload for creating a workflows. See https://www.atlassian.com/software/jira/guides/workflows/overview\#what-is-a-jira-workflow
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowCapabilityPayload
    {

        /// <summary>
        /// The statuses for the workflow
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatusPayload> Statuses { get; set; }

        [Newtonsoft.Json.JsonProperty("workflowScheme", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowSchemePayload WorkflowScheme { get; set; }

        /// <summary>
        /// The transitions for the workflow
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflows", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowPayload> Workflows { get; set; }

    }

    /// <summary>
    /// A compound workflow transition rule condition. This object returns `nodeType` as `compound`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowCompoundCondition
    {

        /// <summary>
        /// The list of workflow conditions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> Conditions { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonProperty("nodeType", Required = Newtonsoft.Json.Required.Always)]
        public string NodeType { get; set; }

        /// <summary>
        /// The compound condition operator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WorkflowCompoundConditionOperator Operator { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The workflow transition rule conditions tree.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowCondition
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The details of the workflows to create.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowCreate
    {

        /// <summary>
        /// The description of the workflow to create.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("loopedTransitionContainerLayout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowLayout LoopedTransitionContainerLayout { get; set; }

        /// <summary>
        /// The name of the workflow to create.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("startPointLayout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowLayout StartPointLayout { get; set; }

        /// <summary>
        /// The statuses associated with this workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<StatusLayoutUpdate> Statuses { get; set; } = new System.Collections.ObjectModel.Collection<StatusLayoutUpdate>();

        /// <summary>
        /// The transitions of this workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transitions", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<TransitionUpdateDTO> Transitions { get; set; } = new System.Collections.ObjectModel.Collection<TransitionUpdateDTO>();

    }

    /// <summary>
    /// The create workflows payload.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowCreateRequest
    {

        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowScope Scope { get; set; }

        /// <summary>
        /// The statuses to associate with the workflows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowStatusUpdate> Statuses { get; set; }

        /// <summary>
        /// The details of the workflows to create.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflows", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowCreate> Workflows { get; set; }

    }

    /// <summary>
    /// Details of the created workflows and statuses.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowCreateResponse
    {

        /// <summary>
        /// List of created statuses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JiraWorkflowStatus> Statuses { get; set; }

        /// <summary>
        /// List of created workflows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflows", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JiraWorkflow> Workflows { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowCreateValidateRequest
    {

        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        public WorkflowCreateRequest Payload { get; set; } = new WorkflowCreateRequest();

        [Newtonsoft.Json.JsonProperty("validationOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValidationOptionsForCreate ValidationOptions { get; set; }

    }

    /// <summary>
    /// The version details of the workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowDocumentVersionBean
    {

        /// <summary>
        /// The version UUID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The version number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long VersionNumber { get; set; }

    }

    /// <summary>
    /// A reference to the location of the error. This will be null if the error does not refer to a specific element.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowElementReference
    {

        /// <summary>
        /// A property key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("propertyKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PropertyKey { get; set; }

        /// <summary>
        /// A rule ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RuleId { get; set; }

        [Newtonsoft.Json.JsonProperty("statusMappingReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectAndIssueTypePair StatusMappingReference { get; set; }

        /// <summary>
        /// A status reference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusReference { get; set; }

        /// <summary>
        /// A transition ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transitionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransitionId { get; set; }

    }

    /// <summary>
    /// The classic workflow identifiers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowIDs
    {

        /// <summary>
        /// The entity ID of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityId { get; set; }

        /// <summary>
        /// The name of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

    }

    /// <summary>
    /// Properties that identify a workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowId
    {

        /// <summary>
        /// Whether the workflow is in the draft state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("draft", Required = Newtonsoft.Json.Required.Always)]
        public bool Draft { get; set; }

        /// <summary>
        /// The name of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

    }

    /// <summary>
    /// The starting point for the statuses in the workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowLayout
    {

        /// <summary>
        /// The x axis location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double X { get; set; }

        /// <summary>
        /// The y axis location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Y { get; set; }

    }

    /// <summary>
    /// The workflow metadata and issue type IDs which use this workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowMetadataAndIssueTypeRestModel
    {

        /// <summary>
        /// The list of issue type IDs for the mapping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> IssueTypeIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonProperty("workflow", Required = Newtonsoft.Json.Required.Always)]
        public WorkflowMetadataRestModel Workflow { get; set; } = new WorkflowMetadataRestModel();

    }

    /// <summary>
    /// Workflow metadata and usage detail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowMetadataRestModel
    {

        /// <summary>
        /// The description of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        public DocumentVersion Version { get; set; } = new DocumentVersion();

    }

    /// <summary>
    /// Operations allowed on a workflow
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowOperations
    {

        /// <summary>
        /// Whether the workflow can be deleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("canDelete", Required = Newtonsoft.Json.Required.Always)]
        public bool CanDelete { get; set; }

        /// <summary>
        /// Whether the workflow can be updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("canEdit", Required = Newtonsoft.Json.Required.Always)]
        public bool CanEdit { get; set; }

    }

    /// <summary>
    /// The payload for creating workflow, see https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflows/\#api-rest-api-3-workflows-create-post
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowPayload
    {

        /// <summary>
        /// The description of the workflow
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("loopedTransitionContainerLayout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowStatusLayoutPayload LoopedTransitionContainerLayout { get; set; }

        /// <summary>
        /// The name of the workflow
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The strategy to use if there is a conflict with another workflow
        /// </summary>
        [Newtonsoft.Json.JsonProperty("onConflict", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WorkflowPayloadOnConflict OnConflict { get; set; } = Atlassian.Jira.Swagger.WorkflowPayloadOnConflict.NEW;

        [Newtonsoft.Json.JsonProperty("pcri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier Pcri { get; set; }

        [Newtonsoft.Json.JsonProperty("startPointLayout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowStatusLayoutPayload StartPointLayout { get; set; }

        /// <summary>
        /// The statuses to be used in the workflow
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowStatusPayload> Statuses { get; set; }

        /// <summary>
        /// The transitions for the workflow
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transitions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransitionPayload> Transitions { get; set; }

    }

    /// <summary>
    /// Details of a workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowPreview
    {

        /// <summary>
        /// The description of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("loopedTransitionContainerLayout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowPreviewLayout LoopedTransitionContainerLayout { get; set; }

        /// <summary>
        /// The name of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The project and issue type context for this workflow query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryContext", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectIssueTypeQueryContext> QueryContext { get; set; }

        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowPreviewScope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("startPointLayout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowPreviewLayout StartPointLayout { get; set; }

        /// <summary>
        /// The statuses referenced in this workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowPreviewStatus> Statuses { get; set; }

        /// <summary>
        /// The transitions of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transitions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransitionPreview> Transitions { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowDocumentVersionBean Version { get; set; }

    }

    /// <summary>
    /// Layout coordinates for workflow elements.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowPreviewLayout
    {

        /// <summary>
        /// The X coordinate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double X { get; set; }

        /// <summary>
        /// The Y coordinate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Y { get; set; }

    }

    /// <summary>
    /// The details of the preview workflow request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowPreviewRequest
    {

        /// <summary>
        /// The list of issue type IDs. At most 25 issue type IDs can be specified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> IssueTypeIds { get; set; }

        /// <summary>
        /// The projectId parameter is required and will be used for permission checks. In addition, you must supply at least one of the following lookup terms: *workflowNames*, *workflowIds*, or *issueTypeIds*. The specified workflows must be associated with the given project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.Always)]
        public string ProjectId { get; set; }

        /// <summary>
        /// The list of workflow IDs to be returned. At most 25 workflow IDs can be specified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> WorkflowIds { get; set; }

        /// <summary>
        /// The list of workflow names to be returned. At most 25 workflow names can be specified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowNames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> WorkflowNames { get; set; }

    }

    /// <summary>
    /// The preview workflow response containing workflows and statuses.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowPreviewResponse
    {

        /// <summary>
        /// The list of statuses referenced by the workflows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JiraWorkflowPreviewStatus> Statuses { get; set; }

        /// <summary>
        /// The list of workflows. The workflows are returned in the same order as specified in the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflows", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowPreview> Workflows { get; set; }

    }

    /// <summary>
    /// The scope of the workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowPreviewScope
    {

        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowProjectIdScope Project { get; set; }

        /// <summary>
        /// The scope of the workflow. `GLOBAL` for company-managed projects and `PROJECT` for team-managed projects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WorkflowPreviewScopeType Type { get; set; }

    }

    /// <summary>
    /// Details about a workflow status in preview context.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowPreviewStatus
    {

        [Newtonsoft.Json.JsonProperty("approvalConfiguration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApprovalConfigurationPreview ApprovalConfiguration { get; set; }

        /// <summary>
        /// Whether the status is deprecated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deprecated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Deprecated { get; set; }

        [Newtonsoft.Json.JsonProperty("layout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowPreviewLayout Layout { get; set; }

        /// <summary>
        /// The reference of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusReference { get; set; }

    }

    /// <summary>
    /// Project ID details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowProjectIdScope
    {

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

    }

    /// <summary>
    /// The issue type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowProjectIssueTypeUsage
    {

        /// <summary>
        /// The ID of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

    }

    /// <summary>
    /// Issue types associated with the workflow for a project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowProjectIssueTypeUsageDTO
    {

        [Newtonsoft.Json.JsonProperty("issueTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowProjectIssueTypeUsagePage IssueTypes { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectId { get; set; }

        /// <summary>
        /// The ID of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkflowId { get; set; }

    }

    /// <summary>
    /// A page of issue types.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowProjectIssueTypeUsagePage
    {

        /// <summary>
        /// Token for the next page of issue type usages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPageToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageToken { get; set; }

        /// <summary>
        /// The list of issue types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowProjectIssueTypeUsage> Values { get; set; }

    }

    /// <summary>
    /// Projects using the workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowProjectUsageDTO
    {

        [Newtonsoft.Json.JsonProperty("projects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectUsagePage Projects { get; set; }

        /// <summary>
        /// The workflow ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkflowId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowReadRequest
    {

        /// <summary>
        /// The list of projects and issue types to query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectAndIssueTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectAndIssueTypePair> ProjectAndIssueTypes { get; set; }

        /// <summary>
        /// The list of workflow IDs to query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> WorkflowIds { get; set; }

        /// <summary>
        /// The list of workflow names to query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowNames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> WorkflowNames { get; set; }

    }

    /// <summary>
    /// Details of workflows and related statuses.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowReadResponse
    {

        /// <summary>
        /// List of statuses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JiraWorkflowStatus> Statuses { get; set; }

        /// <summary>
        /// List of workflows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflows", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JiraWorkflow> Workflows { get; set; }

    }

    /// <summary>
    /// The statuses referenced in the workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowReferenceStatus
    {

        [Newtonsoft.Json.JsonProperty("approvalConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApprovalConfiguration ApprovalConfiguration { get; set; }

        /// <summary>
        /// Indicates if the status is deprecated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deprecated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Deprecated { get; set; }

        [Newtonsoft.Json.JsonProperty("layout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowStatusLayout Layout { get; set; }

        /// <summary>
        /// The properties associated with the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Properties { get; set; }

        /// <summary>
        /// The reference of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusReference { get; set; }

    }

    /// <summary>
    /// The configuration of the rule.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowRuleConfiguration
    {

        /// <summary>
        /// The ID of the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The parameters related to the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Parameters { get; set; }

        /// <summary>
        /// The rule key of the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleKey", Required = Newtonsoft.Json.Required.Always)]
        public string RuleKey { get; set; }

    }

    /// <summary>
    /// A collection of transition rules.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowRules
    {

        [Newtonsoft.Json.JsonProperty("conditionsTree", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConditionsTree { get; set; }

        /// <summary>
        /// The workflow post functions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postFunctions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowTransitionRule> PostFunctions { get; set; }

        /// <summary>
        /// The workflow validators.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validators", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowTransitionRule> Validators { get; set; }

    }

    /// <summary>
    /// Details of the workflow and its transition rules.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowRulesSearch
    {

        /// <summary>
        /// Use expand to include additional information in the response. This parameter accepts `transition` which, for each rule, returns information about the transition the rule is assigned to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// The list of workflow rule IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<System.Guid> RuleIds { get; set; } = new System.Collections.ObjectModel.Collection<System.Guid>();

        /// <summary>
        /// The workflow ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowEntityId", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid WorkflowEntityId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details of workflow transition rules.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowRulesSearchDetails
    {

        /// <summary>
        /// List of workflow rule IDs that do not belong to the workflow or can not be found.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invalidRules", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Guid> InvalidRules { get; set; }

        /// <summary>
        /// List of valid workflow transition rules.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validRules", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowTransitionRules> ValidRules { get; set; }

        /// <summary>
        /// The workflow ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowEntityId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid WorkflowEntityId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about a workflow scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowScheme
    {

        /// <summary>
        /// The name of the default workflow for the workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira. If `defaultWorkflow` is not specified when creating a workflow scheme, it is set to *Jira Workflow (jira)*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultWorkflow", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultWorkflow { get; set; }

        /// <summary>
        /// The description of the workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Whether the workflow scheme is a draft or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("draft", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Draft { get; set; }

        /// <summary>
        /// The ID of the workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The issue type to workflow mappings, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeMappings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> IssueTypeMappings { get; set; }

        /// <summary>
        /// The issue types available in Jira.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, IssueTypeDetails> IssueTypes { get; set; }

        /// <summary>
        /// The date-time that the draft workflow scheme was last modified. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModified { get; set; }

        /// <summary>
        /// The user that last modified the draft workflow scheme. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedUser", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User LastModifiedUser { get; set; }

        /// <summary>
        /// The name of the workflow scheme. The name must be unique. The maximum length is 255 characters. Required when creating a workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// For draft workflow schemes, this property is the name of the default workflow for the original workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalDefaultWorkflow", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalDefaultWorkflow { get; set; }

        /// <summary>
        /// For draft workflow schemes, this property is the issue type to workflow mappings for the original workflow scheme, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalIssueTypeMappings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> OriginalIssueTypeMappings { get; set; }

        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// Whether to create or update a draft workflow scheme when updating an active workflow scheme. An active workflow scheme is a workflow scheme that is used by at least one project. The following examples show how this property works:
        /// <br/>
        /// <br/> *  Update an active workflow scheme with `updateDraftIfNeeded` set to `true`: If a draft workflow scheme exists, it is updated. Otherwise, a draft workflow scheme is created.
        /// <br/> *  Update an active workflow scheme with `updateDraftIfNeeded` set to `false`: An error is returned, as active workflow schemes cannot be updated.
        /// <br/> *  Update an inactive workflow scheme with `updateDraftIfNeeded` set to `true`: The workflow scheme is updated, as inactive workflow schemes do not require drafts to update.
        /// <br/>
        /// <br/>Defaults to `false`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updateDraftIfNeeded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UpdateDraftIfNeeded { get; set; }

    }

    /// <summary>
    /// The explicit association between issue types and a workflow in a workflow scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowSchemeAssociation
    {

        /// <summary>
        /// The issue types assigned to the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> IssueTypeIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The ID of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowId", Required = Newtonsoft.Json.Required.Always)]
        public string WorkflowId { get; set; }

    }

    /// <summary>
    /// A workflow scheme along with a list of projects that use it.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowSchemeAssociations
    {

        /// <summary>
        /// The list of projects that use the workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> ProjectIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowScheme", Required = Newtonsoft.Json.Required.Always)]
        public WorkflowScheme WorkflowScheme { get; set; } = new WorkflowScheme();

    }

    /// <summary>
    /// The ID and the name of the workflow scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowSchemeIdName
    {

        /// <summary>
        /// The ID of the workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

    }

    /// <summary>
    /// The payload for creating a workflow scheme. See https://www.atlassian.com/software/jira/guides/workflows/overview\#what-is-a-jira-workflow-scheme
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowSchemePayload
    {

        [Newtonsoft.Json.JsonProperty("defaultWorkflow", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier DefaultWorkflow { get; set; }

        /// <summary>
        /// The description of the workflow scheme
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Association between issuetypes and workflows
        /// </summary>
        [Newtonsoft.Json.JsonProperty("explicitMappings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, ProjectCreateResourceIdentifier> ExplicitMappings { get; set; }

        /// <summary>
        /// The name of the workflow scheme
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("pcri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier Pcri { get; set; }

    }

    /// <summary>
    /// An associated workflow scheme and project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowSchemeProjectAssociation
    {

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.Always)]
        public string ProjectId { get; set; }

        /// <summary>
        /// The ID of the workflow scheme. If the workflow scheme ID is `null`, the operation assigns the default workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowSchemeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkflowSchemeId { get; set; }

    }

    /// <summary>
    /// Projects using the workflow scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowSchemeProjectUsageDTO
    {

        [Newtonsoft.Json.JsonProperty("projects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectUsagePage Projects { get; set; }

        /// <summary>
        /// The workflow scheme ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowSchemeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkflowSchemeId { get; set; }

    }

    /// <summary>
    /// The workflow scheme read request body.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowSchemeReadRequest
    {

        /// <summary>
        /// The list of project IDs to query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ProjectIds { get; set; }

        /// <summary>
        /// The list of workflow scheme IDs to query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowSchemeIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> WorkflowSchemeIds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowSchemeReadResponse
    {

        [Newtonsoft.Json.JsonProperty("defaultWorkflow", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowMetadataRestModel DefaultWorkflow { get; set; }

        /// <summary>
        /// The description of the workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Always)]
        public WorkflowScope Scope { get; set; } = new WorkflowScope();

        /// <summary>
        /// Indicates if there's an [asynchronous task](#async-operations) for this workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskId { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        public DocumentVersion Version { get; set; } = new DocumentVersion();

        /// <summary>
        /// Mappings from workflows to issue types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowsForIssueTypes", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<WorkflowMetadataAndIssueTypeRestModel> WorkflowsForIssueTypes { get; set; } = new System.Collections.ObjectModel.Collection<WorkflowMetadataAndIssueTypeRestModel>();

    }

    /// <summary>
    /// The update workflow scheme payload.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowSchemeUpdateRequest
    {

        /// <summary>
        /// The ID of the workflow for issue types without having a mapping defined in this workflow scheme. Only used in global-scoped workflow schemes. If the `defaultWorkflowId` isn't specified, this is set to *Jira Workflow (jira)*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultWorkflowId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultWorkflowId { get; set; }

        /// <summary>
        /// The new description for this workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of this workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The new name for this workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// Overrides, for the selected issue types, any status mappings provided in `statusMappingsByWorkflows`. Status mappings are required when the new workflow for an issue type doesn't contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusMappingsByIssueTypeOverride", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MappingsByIssueTypeOverride> StatusMappingsByIssueTypeOverride { get; set; }

        /// <summary>
        /// The status mappings by workflows. Status mappings are required when the new workflow for an issue type doesn't contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusMappingsByWorkflows", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MappingsByWorkflow> StatusMappingsByWorkflows { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        public DocumentVersion Version { get; set; } = new DocumentVersion();

        /// <summary>
        /// Mappings from workflows to issue types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowsForIssueTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowSchemeAssociation> WorkflowsForIssueTypes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The request payload to get the required mappings for updating a workflow scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowSchemeUpdateRequiredMappingsRequest
    {

        /// <summary>
        /// The ID of the new default workflow for this workflow scheme. Only used in global-scoped workflow schemes. If it isn't specified, is set to *Jira Workflow (jira)*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultWorkflowId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultWorkflowId { get; set; }

        /// <summary>
        /// The ID of the workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The new workflow to issue type mappings for this workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowsForIssueTypes", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<WorkflowSchemeAssociation> WorkflowsForIssueTypes { get; set; } = new System.Collections.ObjectModel.Collection<WorkflowSchemeAssociation>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowSchemeUpdateRequiredMappingsResponse
    {

        /// <summary>
        /// The list of required status mappings by issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusMappingsByIssueTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RequiredMappingByIssueType> StatusMappingsByIssueTypes { get; set; }

        /// <summary>
        /// The list of required status mappings by workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusMappingsByWorkflows", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RequiredMappingByWorkflows> StatusMappingsByWorkflows { get; set; }

        /// <summary>
        /// The details of the statuses in the associated workflows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatusMetadata> Statuses { get; set; }

        /// <summary>
        /// The statuses associated with each workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusesPerWorkflow", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatusesPerWorkflow> StatusesPerWorkflow { get; set; }

    }

    /// <summary>
    /// The worflow scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowSchemeUsage
    {

        /// <summary>
        /// The workflow scheme ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

    }

    /// <summary>
    /// Workflow schemes using the workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowSchemeUsageDTO
    {

        /// <summary>
        /// The workflow ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkflowId { get; set; }

        [Newtonsoft.Json.JsonProperty("workflowSchemes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowSchemeUsagePage WorkflowSchemes { get; set; }

    }

    /// <summary>
    /// A page of workflow schemes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowSchemeUsagePage
    {

        /// <summary>
        /// Token for the next page of issue type usages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPageToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageToken { get; set; }

        /// <summary>
        /// The list of workflow schemes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowSchemeUsage> Values { get; set; }

    }

    /// <summary>
    /// The scope of the workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowScope
    {

        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectId Project { get; set; }

        /// <summary>
        /// The scope of the workflow. `GLOBAL` for company-managed projects and `PROJECT` for team-managed projects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WorkflowScopeType Type { get; set; }

    }

    /// <summary>
    /// Page of items, including workflows and related statuses.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowSearchResponse
    {

        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// List of statuses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JiraWorkflowStatus> Statuses { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// List of workflows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JiraWorkflow> Values { get; set; }

    }

    /// <summary>
    /// Details of a workflow status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowStatus
    {

        /// <summary>
        /// The ID of the issue status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the status in the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// Additional properties that modify the behavior of issues in this status. Supports the properties `jira.issue.editable` and `issueEditable` (deprecated) that indicate whether issues are editable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }

    }

    /// <summary>
    /// The x and y location of the status in the workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowStatusLayout
    {

        /// <summary>
        /// The x axis location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? X { get; set; }

        /// <summary>
        /// The y axis location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Y { get; set; }

    }

    /// <summary>
    /// The layout of the workflow status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowStatusLayoutPayload
    {

        /// <summary>
        /// The x coordinate of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double X { get; set; }

        /// <summary>
        /// The y coordinate of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Y { get; set; }

    }

    /// <summary>
    /// The statuses to be used in the workflow
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowStatusPayload
    {

        [Newtonsoft.Json.JsonProperty("layout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowStatusLayoutPayload Layout { get; set; }

        [Newtonsoft.Json.JsonProperty("pcri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCreateResourceIdentifier Pcri { get; set; }

        /// <summary>
        /// The properties of the workflow status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Properties { get; set; }

    }

    /// <summary>
    /// Details of the status being updated.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowStatusUpdate
    {

        /// <summary>
        /// The description of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// The category of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCategory", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WorkflowStatusUpdateStatusCategory StatusCategory { get; set; }

        /// <summary>
        /// The reference of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusReference", Required = Newtonsoft.Json.Required.Always)]
        public string StatusReference { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A workflow transition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowTransition
    {

        /// <summary>
        /// The transition ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>
        /// The transition name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

    }

    /// <summary>
    /// The statuses the transition can start from, and the mapping of ports between the statuses.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowTransitionLinks
    {

        /// <summary>
        /// The port that the transition starts from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fromPort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FromPort { get; set; }

        /// <summary>
        /// The status that the transition starts from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fromStatusReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FromStatusReference { get; set; }

        /// <summary>
        /// The port that the transition goes to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("toPort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ToPort { get; set; }

    }

    /// <summary>
    /// Details about the server Jira is running on.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowTransitionProperty
    {

        /// <summary>
        /// The ID of the transition property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The key of the transition property. Also known as the name of the transition property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The value of the transition property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A workflow transition rule.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowTransitionRule
    {

        /// <summary>
        /// EXPERIMENTAL. The configuration of the transition rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Configuration { get; set; }

        /// <summary>
        /// The type of the transition rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; }

    }

    /// <summary>
    /// A workflow with transition rules.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowTransitionRules
    {

        /// <summary>
        /// The list of conditions within the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AppWorkflowTransitionRule> Conditions { get; set; }

        /// <summary>
        /// The list of post functions within the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postFunctions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AppWorkflowTransitionRule> PostFunctions { get; set; }

        /// <summary>
        /// The list of validators within the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validators", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AppWorkflowTransitionRule> Validators { get; set; }

        [Newtonsoft.Json.JsonProperty("workflowId", Required = Newtonsoft.Json.Required.Always)]
        public WorkflowId WorkflowId { get; set; } = new WorkflowId();

    }

    /// <summary>
    /// Details about a workflow configuration update request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowTransitionRulesDetails
    {

        [Newtonsoft.Json.JsonProperty("workflowId", Required = Newtonsoft.Json.Required.Always)]
        public WorkflowId WorkflowId { get; set; } = new WorkflowId();

        /// <summary>
        /// The list of connect workflow rule IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowRuleIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> WorkflowRuleIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    }

    /// <summary>
    /// Details about a workflow configuration update request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowTransitionRulesUpdate
    {

        /// <summary>
        /// The list of workflows with transition rules to update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflows", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<WorkflowTransitionRules> Workflows { get; set; } = new System.Collections.ObjectModel.Collection<WorkflowTransitionRules>();

    }

    /// <summary>
    /// Details of any errors encountered while updating workflow transition rules for a workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowTransitionRulesUpdateErrorDetails
    {

        /// <summary>
        /// A list of transition rule update errors, indexed by the transition rule ID. Any transition rule that appears here wasn't updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleUpdateErrors", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> RuleUpdateErrors { get; set; } = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.ICollection<string>>();

        /// <summary>
        /// The list of errors that specify why the workflow update failed. The workflow was not updated if the list contains any entries.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updateErrors", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> UpdateErrors { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonProperty("workflowId", Required = Newtonsoft.Json.Required.Always)]
        public WorkflowId WorkflowId { get; set; } = new WorkflowId();

    }

    /// <summary>
    /// Details of any errors encountered while updating workflow transition rules.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowTransitionRulesUpdateErrors
    {

        /// <summary>
        /// A list of workflows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updateResults", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<WorkflowTransitionRulesUpdateErrorDetails> UpdateResults { get; set; } = new System.Collections.ObjectModel.Collection<WorkflowTransitionRulesUpdateErrorDetails>();

    }

    /// <summary>
    /// The transitions of the workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowTransitions
    {

        /// <summary>
        /// The post-functions of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowRuleConfiguration> Actions { get; set; }

        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConditionGroupConfiguration Conditions { get; set; }

        /// <summary>
        /// The custom event ID of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customIssueEventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomIssueEventId { get; set; }

        /// <summary>
        /// The description of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The statuses the transition can start from, and the mapping of ports between the statuses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowTransitionLinks> Links { get; set; }

        /// <summary>
        /// The name of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The properties of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Properties { get; set; }

        /// <summary>
        /// The status the transition goes to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("toStatusReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ToStatusReference { get; set; }

        [Newtonsoft.Json.JsonProperty("transitionScreen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowRuleConfiguration TransitionScreen { get; set; }

        /// <summary>
        /// The triggers of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("triggers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowTrigger> Triggers { get; set; }

        /// <summary>
        /// The transition type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WorkflowTransitionsType Type { get; set; }

        /// <summary>
        /// The validators of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validators", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowRuleConfiguration> Validators { get; set; }

    }

    /// <summary>
    /// The trigger configuration associated with a workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowTrigger
    {

        /// <summary>
        /// The ID of the trigger.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The parameters of the trigger.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.IDictionary<string, string> Parameters { get; set; } = new System.Collections.Generic.Dictionary<string, string>();

        /// <summary>
        /// The rule key of the trigger.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleKey", Required = Newtonsoft.Json.Required.Always)]
        public string RuleKey { get; set; }

    }

    /// <summary>
    /// The details of the workflows to update.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowUpdate
    {

        /// <summary>
        /// The mapping of old to new status ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultStatusMappings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatusMigration> DefaultStatusMappings { get; set; }

        /// <summary>
        /// The new description for this workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of this workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("loopedTransitionContainerLayout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowLayout LoopedTransitionContainerLayout { get; set; }

        [Newtonsoft.Json.JsonProperty("startPointLayout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowLayout StartPointLayout { get; set; }

        /// <summary>
        /// The mapping of old to new status ID for a specific project and issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusMappings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatusMappingDTO> StatusMappings { get; set; }

        /// <summary>
        /// The statuses associated with this workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<StatusLayoutUpdate> Statuses { get; set; } = new System.Collections.ObjectModel.Collection<StatusLayoutUpdate>();

        /// <summary>
        /// The transitions of this workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transitions", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<TransitionUpdateDTO> Transitions { get; set; } = new System.Collections.ObjectModel.Collection<TransitionUpdateDTO>();

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        public DocumentVersion Version { get; set; } = new DocumentVersion();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The update workflows payload.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowUpdateRequest
    {

        /// <summary>
        /// The statuses to associate with the workflows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowStatusUpdate> Statuses { get; set; }

        /// <summary>
        /// The details of the workflows to update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflows", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowUpdate> Workflows { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowUpdateResponse
    {

        /// <summary>
        /// List of updated statuses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JiraWorkflowStatus> Statuses { get; set; }

        /// <summary>
        /// If there is a [asynchronous task](#async-operations) operation, as a result of this update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskId { get; set; }

        /// <summary>
        /// List of updated workflows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflows", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JiraWorkflow> Workflows { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowUpdateValidateRequestBean
    {

        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        public WorkflowUpdateRequest Payload { get; set; } = new WorkflowUpdateRequest();

        [Newtonsoft.Json.JsonProperty("validationOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValidationOptionsForUpdate ValidationOptions { get; set; }

    }

    /// <summary>
    /// The details about a workflow validation error.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowValidationError
    {

        /// <summary>
        /// An error code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        [Newtonsoft.Json.JsonProperty("elementReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowElementReference ElementReference { get; set; }

        /// <summary>
        /// The validation error level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WorkflowValidationErrorLevel Level { get; set; }

        /// <summary>
        /// An error message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// The type of element the error or warning references.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WorkflowValidationErrorType Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowValidationErrorList
    {

        /// <summary>
        /// The list of validation errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowValidationError> Errors { get; set; }

    }

    /// <summary>
    /// Details of workflows and their transition rules to delete.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkflowsWithTransitionRulesDetails
    {

        /// <summary>
        /// The list of workflows with transition rules to delete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflows", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<WorkflowTransitionRulesDetails> Workflows { get; set; } = new System.Collections.ObjectModel.Collection<WorkflowTransitionRulesDetails>();

    }

    /// <summary>
    /// Working days configuration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkingDaysConfig
    {

        [Newtonsoft.Json.JsonProperty("friday", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Friday { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("monday", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Monday { get; set; }

        [Newtonsoft.Json.JsonProperty("nonWorkingDays", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NonWorkingDay> NonWorkingDays { get; set; }

        [Newtonsoft.Json.JsonProperty("saturday", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Saturday { get; set; }

        [Newtonsoft.Json.JsonProperty("sunday", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Sunday { get; set; }

        [Newtonsoft.Json.JsonProperty("thursday", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Thursday { get; set; }

        [Newtonsoft.Json.JsonProperty("timezoneId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimezoneId { get; set; }

        [Newtonsoft.Json.JsonProperty("tuesday", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Tuesday { get; set; }

        [Newtonsoft.Json.JsonProperty("wednesday", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Wednesday { get; set; }

    }

    /// <summary>
    /// Details of a worklog.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Worklog
    {

        /// <summary>
        /// Details of the user who created the worklog.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDetails Author { get; set; }

        /// <summary>
        /// A comment about the worklog. Optional when creating or updating a worklog.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        /// <summary>
        /// The datetime on which the worklog was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        /// <summary>
        /// The ID of the worklog record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The ID of the issue this worklog is for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssueId { get; set; }

        /// <summary>
        /// Details of properties for the worklog. Optional when creating or updating a worklog.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EntityProperty> Properties { get; set; }

        /// <summary>
        /// The URL of the worklog item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The datetime on which the worklog effort was started. Required when creating a worklog. Optional when updating a worklog.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("started", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Started { get; set; }

        /// <summary>
        /// The time spent working on the issue as days (\#d), hours (\#h), or minutes (\#m or \#). Required when creating a worklog if `timeSpentSeconds` isn't provided. Optional when updating a worklog. Cannot be provided if `timeSpentSecond` is provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeSpent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeSpent { get; set; }

        /// <summary>
        /// The time in seconds spent working on the issue. Required when creating a worklog if `timeSpent` isn't provided. Optional when updating a worklog. Cannot be provided if `timeSpent` is provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeSpentSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long TimeSpentSeconds { get; set; }

        /// <summary>
        /// Details of the user who last updated the worklog.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updateAuthor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDetails UpdateAuthor { get; set; }

        /// <summary>
        /// The datetime on which the worklog was last updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

        /// <summary>
        /// Details about any restrictions in the visibility of the worklog. Optional when creating or updating a worklog.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visibility", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Visibility Visibility { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorklogIdsRequestBean
    {

        /// <summary>
        /// A list of worklog IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ids", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<long> Ids { get; set; } = new System.Collections.ObjectModel.Collection<long>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorklogsMoveRequestBean
    {

        /// <summary>
        /// A list of worklog IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ids", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> Ids { get; set; }

        /// <summary>
        /// The issue id or key of the destination issue
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueIdOrKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssueIdOrKey { get; set; }

    }

    /// <summary>
    /// Details about data policy.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WorkspaceDataPolicy
    {

        /// <summary>
        /// Whether the workspace contains any content inaccessible to the requesting application.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("anyContentBlocked", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AnyContentBlocked { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"issuetype")]
        Issuetype = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"project")]
        Project = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"user")]
        User = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"priority")]
        Priority = 3,

    }

    /// <summary>
    /// The status of the project classification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Anonymous
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PUBLISHED")]
        PUBLISHED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ARCHIVED")]
        ARCHIVED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DRAFT")]
        DRAFT = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum OrderBy
    {

        [System.Runtime.Serialization.EnumMember(Value = @"rank")]
        Rank = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-rank")]
        Minusrank = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"+rank")]
        Plusrank = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum OrderBy2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"description")]
        Description = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-description")]
        Minusdescription = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"+description")]
        Plusdescription = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"-name")]
        Minusname = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"+name")]
        Plusname = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Filter2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"my")]
        My = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"favourite")]
        Favourite = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum OrderBy3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"description")]
        Description = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-description")]
        Minusdescription = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"+description")]
        Plusdescription = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"favorite_count")]
        Favorite_count = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"-favorite_count")]
        Minusfavorite_count = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"+favorite_count")]
        Plusfavorite_count = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"-id")]
        Minusid = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"+id")]
        Plusid = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"is_favorite")]
        Is_favorite = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"-is_favorite")]
        Minusis_favorite = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"+is_favorite")]
        Plusis_favorite = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"-name")]
        Minusname = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"+name")]
        Plusname = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"owner")]
        Owner = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"-owner")]
        Minusowner = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"+owner")]
        Plusowner = 17,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Status2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"active")]
        Active = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"archived")]
        Archived = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"deleted")]
        Deleted = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Check
    {

        [System.Runtime.Serialization.EnumMember(Value = @"syntax")]
        Syntax = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"type")]
        Type = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"complexity")]
        Complexity = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Anonymous2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"custom")]
        Custom = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"system")]
        System = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum OrderBy4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"contextsCount")]
        ContextsCount = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-contextsCount")]
        MinuscontextsCount = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"+contextsCount")]
        PluscontextsCount = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"lastUsed")]
        LastUsed = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"-lastUsed")]
        MinuslastUsed = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"+lastUsed")]
        PluslastUsed = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"-name")]
        Minusname = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"+name")]
        Plusname = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"screensCount")]
        ScreensCount = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"-screensCount")]
        MinusscreensCount = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"+screensCount")]
        PlusscreensCount = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"projectsCount")]
        ProjectsCount = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"-projectsCount")]
        MinusprojectsCount = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"+projectsCount")]
        PlusprojectsCount = 14,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Expand
    {

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-name")]
        Minusname = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"+name")]
        Plusname = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"trashDate")]
        TrashDate = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"-trashDate")]
        MinustrashDate = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"+trashDate")]
        PlustrashDate = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"plannedDeletionDate")]
        PlannedDeletionDate = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"-plannedDeletionDate")]
        MinusplannedDeletionDate = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"+plannedDeletionDate")]
        PlusplannedDeletionDate = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"projectsCount")]
        ProjectsCount = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"-projectsCount")]
        MinusprojectsCount = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"+projectsCount")]
        PlusprojectsCount = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum OrderBy5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"description")]
        Description = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-description")]
        Minusdescription = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"+description")]
        Plusdescription = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"favourite_count")]
        Favourite_count = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"-favourite_count")]
        Minusfavourite_count = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"+favourite_count")]
        Plusfavourite_count = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"-id")]
        Minusid = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"+id")]
        Plusid = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"is_favourite")]
        Is_favourite = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"-is_favourite")]
        Minusis_favourite = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"+is_favourite")]
        Plusis_favourite = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"-name")]
        Minusname = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"+name")]
        Plusname = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"owner")]
        Owner = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"-owner")]
        Minusowner = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"+owner")]
        Plusowner = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"is_shared")]
        Is_shared = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"-is_shared")]
        Minusis_shared = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"+is_shared")]
        Plusis_shared = 20,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum AvatarSize
    {

        [System.Runtime.Serialization.EnumMember(Value = @"xsmall")]
        Xsmall = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"xsmall@2x")]
        Xsmall_2x = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"xsmall@3x")]
        Xsmall_3x = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"small")]
        Small = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"small@2x")]
        Small_2x = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"small@3x")]
        Small_3x = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"medium")]
        Medium = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"medium@2x")]
        Medium_2x = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"medium@3x")]
        Medium_3x = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"large")]
        Large = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"large@2x")]
        Large_2x = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"large@3x")]
        Large_3x = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"xlarge")]
        Xlarge = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"xlarge@2x")]
        Xlarge_2x = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"xlarge@3x")]
        Xlarge_3x = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"xxlarge")]
        Xxlarge = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"xxlarge@2x")]
        Xxlarge_2x = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"xxlarge@3x")]
        Xxlarge_3x = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"xxxlarge")]
        Xxxlarge = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"xxxlarge@2x")]
        Xxxlarge_2x = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"xxxlarge@3x")]
        Xxxlarge_3x = 20,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum DeleteSubtasks
    {

        [System.Runtime.Serialization.EnumMember(Value = @"true")]
        True = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum OrderBy6
    {

        [System.Runtime.Serialization.EnumMember(Value = @"created")]
        Created = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-created")]
        Minuscreated = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"+created")]
        Pluscreated = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum AdjustEstimate
    {

        [System.Runtime.Serialization.EnumMember(Value = @"leave")]
        Leave = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"auto")]
        Auto = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum AdjustEstimate2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"new")]
        New = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"leave")]
        Leave = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"manual")]
        Manual = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"auto")]
        Auto = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum AdjustEstimate3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"leave")]
        Leave = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"auto")]
        Auto = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum AdjustEstimate4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"new")]
        New = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"leave")]
        Leave = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"manual")]
        Manual = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"auto")]
        Auto = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum AdjustEstimate5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"new")]
        New = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"leave")]
        Leave = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"manual")]
        Manual = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"auto")]
        Auto = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum OrderBy7
    {

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-name")]
        Minusname = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"+name")]
        Plusname = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"-id")]
        Minusid = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"+id")]
        Plusid = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum OrderBy8
    {

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-name")]
        Minusname = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"+name")]
        Plusname = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"-id")]
        Minusid = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"+id")]
        Plusid = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Validation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"strict")]
        Strict = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"warn")]
        Warn = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ApplicationKey
    {

        [System.Runtime.Serialization.EnumMember(Value = @"jira-core")]
        JiraCore = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"jira-product-discovery")]
        JiraProductDiscovery = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"jira-software")]
        JiraSoftware = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"jira-servicedesk")]
        JiraServicedesk = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum OrderBy9
    {

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"+name")]
        Plusname = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"-name")]
        Minusname = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum OrderBy10
    {

        [System.Runtime.Serialization.EnumMember(Value = @"category")]
        Category = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-category")]
        Minuscategory = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"+category")]
        Pluscategory = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"key")]
        Key = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"-key")]
        Minuskey = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"+key")]
        Pluskey = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"-name")]
        Minusname = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"+name")]
        Plusname = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"owner")]
        Owner = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"-owner")]
        Minusowner = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"+owner")]
        Plusowner = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"issueCount")]
        IssueCount = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"-issueCount")]
        MinusissueCount = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"+issueCount")]
        PlusissueCount = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"lastIssueUpdatedDate")]
        LastIssueUpdatedDate = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"-lastIssueUpdatedDate")]
        MinuslastIssueUpdatedDate = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"+lastIssueUpdatedDate")]
        PluslastIssueUpdatedDate = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"archivedDate")]
        ArchivedDate = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"+archivedDate")]
        PlusarchivedDate = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"-archivedDate")]
        MinusarchivedDate = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"deletedDate")]
        DeletedDate = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"+deletedDate")]
        PlusdeletedDate = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"-deletedDate")]
        MinusdeletedDate = 23,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Action
    {

        [System.Runtime.Serialization.EnumMember(Value = @"view")]
        View = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"browse")]
        Browse = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"edit")]
        Edit = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"create")]
        Create = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Anonymous3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"live")]
        Live = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"archived")]
        Archived = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"deleted")]
        Deleted = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ProjectTypeKey
    {

        [System.Runtime.Serialization.EnumMember(Value = @"software")]
        Software = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"service_desk")]
        Service_desk = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"business")]
        Business = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"product_discovery")]
        Product_discovery = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ProjectTypeKey2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"software")]
        Software = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"service_desk")]
        Service_desk = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"business")]
        Business = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"product_discovery")]
        Product_discovery = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum OrderBy11
    {

        [System.Runtime.Serialization.EnumMember(Value = @"description")]
        Description = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-description")]
        Minusdescription = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"+description")]
        Plusdescription = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"issueCount")]
        IssueCount = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"-issueCount")]
        MinusissueCount = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"+issueCount")]
        PlusissueCount = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"lead")]
        Lead = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"-lead")]
        Minuslead = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"+lead")]
        Pluslead = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"-name")]
        Minusname = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"+name")]
        Plusname = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ComponentSource
    {

        [System.Runtime.Serialization.EnumMember(Value = @"jira")]
        Jira = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"compass")]
        Compass = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"auto")]
        Auto = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ComponentSource2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"jira")]
        Jira = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"compass")]
        Compass = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"auto")]
        Auto = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum OrderBy12
    {

        [System.Runtime.Serialization.EnumMember(Value = @"description")]
        Description = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-description")]
        Minusdescription = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"+description")]
        Plusdescription = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"-name")]
        Minusname = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"+name")]
        Plusname = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"releaseDate")]
        ReleaseDate = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"-releaseDate")]
        MinusreleaseDate = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"+releaseDate")]
        PlusreleaseDate = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"sequence")]
        Sequence = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"-sequence")]
        Minussequence = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"+sequence")]
        Plussequence = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"startDate")]
        StartDate = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"-startDate")]
        MinusstartDate = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"+startDate")]
        PlusstartDate = 14,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Anonymous4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GLOBAL")]
        GLOBAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TEMPLATE")]
        TEMPLATE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT")]
        PROJECT = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum OrderBy13
    {

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-name")]
        Minusname = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"+name")]
        Plusname = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"-id")]
        Minusid = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"+id")]
        Plusid = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum OrderBy14
    {

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-name")]
        Minusname = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"+name")]
        Plusname = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"-id")]
        Minusid = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"+id")]
        Plusid = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ValidateQuery
    {

        [System.Runtime.Serialization.EnumMember(Value = @"strict")]
        Strict = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"warn")]
        Warn = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"true")]
        True = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Type2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"project")]
        Project = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"issuetype")]
        Issuetype = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"priority")]
        Priority = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Type3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"project")]
        Project = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"issuetype")]
        Issuetype = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"priority")]
        Priority = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Type4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"project")]
        Project = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"issuetype")]
        Issuetype = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"priority")]
        Priority = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Type5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"issuetype")]
        Issuetype = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"project")]
        Project = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"priority")]
        Priority = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Size
    {

        [System.Runtime.Serialization.EnumMember(Value = @"xsmall")]
        Xsmall = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"small")]
        Small = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"medium")]
        Medium = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"large")]
        Large = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"xlarge")]
        Xlarge = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Format
    {

        [System.Runtime.Serialization.EnumMember(Value = @"png")]
        Png = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"svg")]
        Svg = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Type6
    {

        [System.Runtime.Serialization.EnumMember(Value = @"issuetype")]
        Issuetype = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"project")]
        Project = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"priority")]
        Priority = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Size2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"xsmall")]
        Xsmall = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"small")]
        Small = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"medium")]
        Medium = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"large")]
        Large = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"xlarge")]
        Xlarge = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Format2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"png")]
        Png = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"svg")]
        Svg = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Type7
    {

        [System.Runtime.Serialization.EnumMember(Value = @"issuetype")]
        Issuetype = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"project")]
        Project = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"priority")]
        Priority = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Size3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"xsmall")]
        Xsmall = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"small")]
        Small = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"medium")]
        Medium = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"large")]
        Large = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"xlarge")]
        Xlarge = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Format3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"png")]
        Png = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"svg")]
        Svg = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Anonymous5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"postfunction")]
        Postfunction = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"condition")]
        Condition = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"validator")]
        Validator = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum OrderBy15
    {

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-name")]
        Minusname = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"+name")]
        Plusname = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"created")]
        Created = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"-created")]
        Minuscreated = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"+created")]
        Pluscreated = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"updated")]
        Updated = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"+updated")]
        Plusupdated = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"-updated")]
        Minusupdated = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum WorkflowMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"live")]
        Live = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum WorkflowMode2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"live")]
        Live = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum WorkflowMode3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"live")]
        Live = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum WorkflowMode4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"live")]
        Live = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum EntityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IssueProperty")]
        IssueProperty = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CommentProperty")]
        CommentProperty = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DashboardItemProperty")]
        DashboardItemProperty = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IssueTypeProperty")]
        IssueTypeProperty = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ProjectProperty")]
        ProjectProperty = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"UserProperty")]
        UserProperty = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"WorklogProperty")]
        WorklogProperty = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"BoardProperty")]
        BoardProperty = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"SprintProperty")]
        SprintProperty = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response
    {

        [Newtonsoft.Json.JsonProperty("keys", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Keys> Keys { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response2
    {

        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum AddAtlassianTeamRequestPlanningStyle
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Scrum")]
        Scrum = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Kanban")]
        Kanban = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum AnnouncementBannerConfigurationVisibility
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PUBLIC")]
        PUBLIC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PRIVATE")]
        PRIVATE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ApprovalConfigurationActive
    {

        [System.Runtime.Serialization.EnumMember(Value = @"true")]
        True = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ApprovalConfigurationConditionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"number")]
        Number = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"percent")]
        Percent = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"numberPerPrincipal")]
        NumberPerPrincipal = 2,

    }

    /// <summary>
    /// A list of roles that should be excluded as possible approvers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Exclude
    {

        [System.Runtime.Serialization.EnumMember(Value = @"assignee")]
        Assignee = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"reporter")]
        Reporter = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum AvailableWorkflowConnectRuleRuleType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Condition")]
        Condition = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Validator")]
        Validator = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Function")]
        Function = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Screen")]
        Screen = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum AvailableWorkflowForgeRuleRuleType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Condition")]
        Condition = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Validator")]
        Validator = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Function")]
        Function = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Screen")]
        Screen = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum AvailableWorkflowSystemRuleRuleType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Condition")]
        Condition = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Validator")]
        Validator = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Function")]
        Function = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Screen")]
        Screen = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum BoardFeaturePayloadFeatureKey
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ESTIMATION")]
        ESTIMATION = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SPRINTS")]
        SPRINTS = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum BoardPayloadCardColorStrategy
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ISSUE_TYPE")]
        ISSUE_TYPE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST_TYPE")]
        REQUEST_TYPE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ASSIGNEE")]
        ASSIGNEE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PRIORITY")]
        PRIORITY = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM")]
        CUSTOM = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum BulkEditShareableEntityRequestAction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"changeOwner")]
        ChangeOwner = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"changePermission")]
        ChangePermission = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"addPermission")]
        AddPermission = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"removePermission")]
        RemovePermission = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum BulkEditShareableEntityResponseAction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"changeOwner")]
        ChangeOwner = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"changePermission")]
        ChangePermission = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"addPermission")]
        AddPermission = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"removePermission")]
        RemovePermission = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum CardLayoutFieldMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PLAN")]
        PLAN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WORK")]
        WORK = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ComponentWithIssueCountAssigneeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT_DEFAULT")]
        PROJECT_DEFAULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPONENT_LEAD")]
        COMPONENT_LEAD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT_LEAD")]
        PROJECT_LEAD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UNASSIGNED")]
        UNASSIGNED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ComponentWithIssueCountRealAssigneeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT_DEFAULT")]
        PROJECT_DEFAULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPONENT_LEAD")]
        COMPONENT_LEAD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT_LEAD")]
        PROJECT_LEAD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UNASSIGNED")]
        UNASSIGNED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum CompoundClauseOperator
    {

        [System.Runtime.Serialization.EnumMember(Value = @"and")]
        And = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"or")]
        Or = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"not")]
        Not = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ConditionGroupConfigurationOperation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ANY")]
        ANY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ConditionGroupPayloadOperation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ANY")]
        ANY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ConditionGroupUpdateOperation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ANY")]
        ANY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ConnectCustomFieldValue_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"StringIssueField")]
        StringIssueField = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NumberIssueField")]
        NumberIssueField = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RichTextIssueField")]
        RichTextIssueField = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SingleSelectIssueField")]
        SingleSelectIssueField = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"MultiSelectIssueField")]
        MultiSelectIssueField = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"TextIssueField")]
        TextIssueField = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ContentItemEntityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"issuefieldvalue")]
        Issuefieldvalue = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"issue-comment")]
        IssueComment = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"issue-worklog")]
        IssueWorklog = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum CreateDateFieldRequestType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DueDate")]
        DueDate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TargetStartDate")]
        TargetStartDate = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TargetEndDate")]
        TargetEndDate = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DateCustomField")]
        DateCustomField = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum CreateIssueSourceRequestType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Board")]
        Board = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Project")]
        Project = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Filter")]
        Filter = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum CreatePermissionHolderRequestType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Group")]
        Group = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AccountId")]
        AccountId = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum CreatePermissionRequestType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"View")]
        View = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Edit")]
        Edit = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum CreatePlanOnlyTeamRequestPlanningStyle
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Scrum")]
        Scrum = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Kanban")]
        Kanban = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum CreatePriorityDetailsIconUrl
    {

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/blocker.png")]
        _images_icons_priorities_blocker_png = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/critical.png")]
        _images_icons_priorities_critical_png = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/high.png")]
        _images_icons_priorities_high_png = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/highest.png")]
        _images_icons_priorities_highest_png = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/low.png")]
        _images_icons_priorities_low_png = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/lowest.png")]
        _images_icons_priorities_lowest_png = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/major.png")]
        _images_icons_priorities_major_png = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/medium.png")]
        _images_icons_priorities_medium_png = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/minor.png")]
        _images_icons_priorities_minor_png = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/trivial.png")]
        _images_icons_priorities_trivial_png = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/blocker_new.png")]
        _images_icons_priorities_blocker_new_png = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/critical_new.png")]
        _images_icons_priorities_critical_new_png = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/high_new.png")]
        _images_icons_priorities_high_new_png = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/highest_new.png")]
        _images_icons_priorities_highest_new_png = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/low_new.png")]
        _images_icons_priorities_low_new_png = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/lowest_new.png")]
        _images_icons_priorities_lowest_new_png = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/major_new.png")]
        _images_icons_priorities_major_new_png = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/medium_new.png")]
        _images_icons_priorities_medium_new_png = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/minor_new.png")]
        _images_icons_priorities_minor_new_png = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/trivial_new.png")]
        _images_icons_priorities_trivial_new_png = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum CreateProjectDetailsAssigneeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT_LEAD")]
        PROJECT_LEAD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"UNASSIGNED")]
        UNASSIGNED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum CreateProjectDetailsProjectTemplateKey
    {

        [System.Runtime.Serialization.EnumMember(Value = @"com.pyxis.greenhopper.jira:gh-simplified-agility-kanban")]
        Com_pyxis_greenhopper_jiraGhSimplifiedAgilityKanban = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"com.pyxis.greenhopper.jira:gh-simplified-agility-scrum")]
        Com_pyxis_greenhopper_jiraGhSimplifiedAgilityScrum = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"com.pyxis.greenhopper.jira:gh-simplified-basic")]
        Com_pyxis_greenhopper_jiraGhSimplifiedBasic = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"com.pyxis.greenhopper.jira:gh-simplified-kanban-classic")]
        Com_pyxis_greenhopper_jiraGhSimplifiedKanbanClassic = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"com.pyxis.greenhopper.jira:gh-simplified-scrum-classic")]
        Com_pyxis_greenhopper_jiraGhSimplifiedScrumClassic = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"com.pyxis.greenhopper.jira:gh-cross-team-template")]
        Com_pyxis_greenhopper_jiraGhCrossTeamTemplate = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"com.pyxis.greenhopper.jira:gh-cross-team-planning-template")]
        Com_pyxis_greenhopper_jiraGhCrossTeamPlanningTemplate = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-it-service-management")]
        Com_atlassian_servicedeskSimplifiedItServiceManagement = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-it-service-management-basic")]
        Com_atlassian_servicedeskSimplifiedItServiceManagementBasic = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-it-service-management-operations")]
        Com_atlassian_servicedeskSimplifiedItServiceManagementOperations = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-general-service-desk")]
        Com_atlassian_servicedeskSimplifiedGeneralServiceDesk = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-general-service-desk-it")]
        Com_atlassian_servicedeskSimplifiedGeneralServiceDeskIt = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-general-service-desk-business")]
        Com_atlassian_servicedeskSimplifiedGeneralServiceDeskBusiness = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-internal-service-desk")]
        Com_atlassian_servicedeskSimplifiedInternalServiceDesk = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-external-service-desk")]
        Com_atlassian_servicedeskSimplifiedExternalServiceDesk = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-hr-service-desk")]
        Com_atlassian_servicedeskSimplifiedHrServiceDesk = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-facilities-service-desk")]
        Com_atlassian_servicedeskSimplifiedFacilitiesServiceDesk = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-legal-service-desk")]
        Com_atlassian_servicedeskSimplifiedLegalServiceDesk = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-marketing-service-desk")]
        Com_atlassian_servicedeskSimplifiedMarketingServiceDesk = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-finance-service-desk")]
        Com_atlassian_servicedeskSimplifiedFinanceServiceDesk = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-analytics-service-desk")]
        Com_atlassian_servicedeskSimplifiedAnalyticsServiceDesk = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-design-service-desk")]
        Com_atlassian_servicedeskSimplifiedDesignServiceDesk = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-sales-service-desk")]
        Com_atlassian_servicedeskSimplifiedSalesServiceDesk = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-halp-service-desk")]
        Com_atlassian_servicedeskSimplifiedHalpServiceDesk = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-blank-project-it")]
        Com_atlassian_servicedeskSimplifiedBlankProjectIt = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-blank-project-business")]
        Com_atlassian_servicedeskSimplifiedBlankProjectBusiness = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:next-gen-it-service-desk")]
        Com_atlassian_servicedeskNextGenItServiceDesk = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:next-gen-hr-service-desk")]
        Com_atlassian_servicedeskNextGenHrServiceDesk = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:next-gen-legal-service-desk")]
        Com_atlassian_servicedeskNextGenLegalServiceDesk = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:next-gen-marketing-service-desk")]
        Com_atlassian_servicedeskNextGenMarketingServiceDesk = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:next-gen-facilities-service-desk")]
        Com_atlassian_servicedeskNextGenFacilitiesServiceDesk = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:next-gen-general-service-desk")]
        Com_atlassian_servicedeskNextGenGeneralServiceDesk = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:next-gen-general-it-service-desk")]
        Com_atlassian_servicedeskNextGenGeneralItServiceDesk = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:next-gen-general-business-service-desk")]
        Com_atlassian_servicedeskNextGenGeneralBusinessServiceDesk = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:next-gen-analytics-service-desk")]
        Com_atlassian_servicedeskNextGenAnalyticsServiceDesk = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:next-gen-finance-service-desk")]
        Com_atlassian_servicedeskNextGenFinanceServiceDesk = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:next-gen-design-service-desk")]
        Com_atlassian_servicedeskNextGenDesignServiceDesk = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:next-gen-sales-service-desk")]
        Com_atlassian_servicedeskNextGenSalesServiceDesk = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira-core-project-templates:jira-core-simplified-content-management")]
        Com_atlassian_jiraCoreProjectTemplatesJiraCoreSimplifiedContentManagement = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval")]
        Com_atlassian_jiraCoreProjectTemplatesJiraCoreSimplifiedDocumentApproval = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking")]
        Com_atlassian_jiraCoreProjectTemplatesJiraCoreSimplifiedLeadTracking = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira-core-project-templates:jira-core-simplified-process-control")]
        Com_atlassian_jiraCoreProjectTemplatesJiraCoreSimplifiedProcessControl = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira-core-project-templates:jira-core-simplified-procurement")]
        Com_atlassian_jiraCoreProjectTemplatesJiraCoreSimplifiedProcurement = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira-core-project-templates:jira-core-simplified-project-management")]
        Com_atlassian_jiraCoreProjectTemplatesJiraCoreSimplifiedProjectManagement = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment")]
        Com_atlassian_jiraCoreProjectTemplatesJiraCoreSimplifiedRecruitment = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira-core-project-templates:jira-core-simplified-task-")]
        Com_atlassian_jiraCoreProjectTemplatesJiraCoreSimplifiedTask = 45,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum CreateProjectDetailsProjectTypeKey
    {

        [System.Runtime.Serialization.EnumMember(Value = @"software")]
        Software = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"service_desk")]
        Service_desk = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"business")]
        Business = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum CreateSchedulingRequestDependencies
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Sequential")]
        Sequential = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Concurrent")]
        Concurrent = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum CreateSchedulingRequestEstimation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"StoryPoints")]
        StoryPoints = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Days")]
        Days = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Hours")]
        Hours = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum CreateSchedulingRequestInferredDates
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SprintDates")]
        SprintDates = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ReleaseDates")]
        ReleaseDates = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum CreateWorkflowConditionOperator
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AND")]
        AND = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OR")]
        OR = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum CreateWorkflowTransitionDetailsType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"global")]
        Global = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"initial")]
        Initial = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"directed")]
        Directed = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum CustomFieldDefinitionJsonBeanSearcherKey
    {

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:cascadingselectsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesCascadingselectsearcher = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:daterange")]
        Com_atlassian_jira_plugin_system_customfieldtypesDaterange = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:datetimerange")]
        Com_atlassian_jira_plugin_system_customfieldtypesDatetimerange = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:exactnumber")]
        Com_atlassian_jira_plugin_system_customfieldtypesExactnumber = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:exacttextsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesExacttextsearcher = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesGrouppickersearcher = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:labelsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesLabelsearcher = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:multiselectsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesMultiselectsearcher = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:numberrange")]
        Com_atlassian_jira_plugin_system_customfieldtypesNumberrange = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:projectsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesProjectsearcher = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:textsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesTextsearcher = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:userpickergroupsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesUserpickergroupsearcher = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:versionsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesVersionsearcher = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum CustomFieldPayloadOnConflict
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FAIL")]
        FAIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"USE")]
        USE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
        NEW = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum CustomFieldPayloadScope
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GLOBAL")]
        GLOBAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TEMPLATE")]
        TEMPLATE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT")]
        PROJECT = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum CustomTemplatesProjectDetailsAccessLevel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"open")]
        Open = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"limited")]
        Limited = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"private")]
        Private = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"free")]
        Free = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum CustomTemplatesProjectDetailsAssigneeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT_DEFAULT")]
        PROJECT_DEFAULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPONENT_LEAD")]
        COMPONENT_LEAD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT_LEAD")]
        PROJECT_LEAD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UNASSIGNED")]
        UNASSIGNED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum DashboardGadgetColor
    {

        [System.Runtime.Serialization.EnumMember(Value = @"blue")]
        Blue = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"red")]
        Red = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"yellow")]
        Yellow = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"green")]
        Green = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"cyan")]
        Cyan = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"purple")]
        Purple = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"gray")]
        Gray = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"white")]
        White = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum DefaultShareScopeScope
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GLOBAL")]
        GLOBAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHENTICATED")]
        AUTHENTICATED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PRIVATE")]
        PRIVATE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum DefaultWorkflowEditorResponseValue
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
        NEW = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGACY")]
        LEGACY = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum EventNotificationNotificationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CurrentAssignee")]
        CurrentAssignee = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Reporter")]
        Reporter = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CurrentUser")]
        CurrentUser = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ProjectLead")]
        ProjectLead = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ComponentLead")]
        ComponentLead = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Group")]
        Group = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ProjectRole")]
        ProjectRole = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"EmailAddress")]
        EmailAddress = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AllWatchers")]
        AllWatchers = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"UserCustomField")]
        UserCustomField = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"GroupCustomField")]
        GroupCustomField = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum FieldChangedClauseOperator
    {

        [System.Runtime.Serialization.EnumMember(Value = @"changed")]
        Changed = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum FieldLastUsedType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TRACKED")]
        TRACKED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_TRACKED")]
        NOT_TRACKED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NO_INFORMATION")]
        NO_INFORMATION = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum FieldReferenceDataAuto
    {

        [System.Runtime.Serialization.EnumMember(Value = @"true")]
        True = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum FieldReferenceDataDeprecated
    {

        [System.Runtime.Serialization.EnumMember(Value = @"true")]
        True = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum FieldReferenceDataOrderable
    {

        [System.Runtime.Serialization.EnumMember(Value = @"true")]
        True = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum FieldReferenceDataSearchable
    {

        [System.Runtime.Serialization.EnumMember(Value = @"true")]
        True = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum FieldValueClauseOperator
    {

        [System.Runtime.Serialization.EnumMember(Value = @"=")]
        Eq = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"!=")]
        Ne = 1,

        [System.Runtime.Serialization.EnumMember(Value = @">")]
        Gt = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"<")]
        Lt = 3,

        [System.Runtime.Serialization.EnumMember(Value = @">=")]
        Ge = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"<=")]
        Le = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"in")]
        In = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"not in")]
        Not_in = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"~")]
        _ = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"~=")]
        Approx = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"is not")]
        Is_not = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum FieldWasClauseOperator
    {

        [System.Runtime.Serialization.EnumMember(Value = @"was")]
        Was = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"was in")]
        Was_in = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"was not in")]
        Was_not_in = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"was not")]
        Was_not = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum FoundGroupManagedBy
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EXTERNAL")]
        EXTERNAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ADMINS")]
        ADMINS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_MEMBERS")]
        TEAM_MEMBERS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OPEN")]
        OPEN = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum FoundGroupUsageType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"USERBASE_GROUP")]
        USERBASE_GROUP = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_COLLABORATION")]
        TEAM_COLLABORATION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ADMIN_OVERSIGHT")]
        ADMIN_OVERSIGHT = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum FunctionReferenceDataIsList
    {

        [System.Runtime.Serialization.EnumMember(Value = @"true")]
        True = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum FunctionReferenceDataSupportsListAndSingleValueOperators
    {

        [System.Runtime.Serialization.EnumMember(Value = @"true")]
        True = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum GetAtlassianTeamResponsePlanningStyle
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Scrum")]
        Scrum = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Kanban")]
        Kanban = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum GetDateFieldResponseType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DueDate")]
        DueDate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TargetStartDate")]
        TargetStartDate = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TargetEndDate")]
        TargetEndDate = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DateCustomField")]
        DateCustomField = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum GetIssueSourceResponseType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Board")]
        Board = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Project")]
        Project = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Filter")]
        Filter = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum GetPermissionHolderResponseType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Group")]
        Group = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AccountId")]
        AccountId = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum GetPermissionResponseType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"View")]
        View = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Edit")]
        Edit = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum GetPlanOnlyTeamResponsePlanningStyle
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Scrum")]
        Scrum = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Kanban")]
        Kanban = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum GetPlanResponseStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Trashed")]
        Trashed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Archived")]
        Archived = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum GetPlanResponseForPageStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Trashed")]
        Trashed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Archived")]
        Archived = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum GetSchedulingResponseDependencies
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Sequential")]
        Sequential = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Concurrent")]
        Concurrent = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum GetSchedulingResponseEstimation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"StoryPoints")]
        StoryPoints = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Days")]
        Days = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Hours")]
        Hours = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum GetSchedulingResponseInferredDates
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SprintDates")]
        SprintDates = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ReleaseDates")]
        ReleaseDates = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum GetTeamResponseForPageType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PlanOnly")]
        PlanOnly = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Atlassian")]
        Atlassian = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Attributes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"notSelectable")]
        NotSelectable = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"defaultValue")]
        DefaultValue = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum GroupLabelType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ADMIN")]
        ADMIN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SINGLE")]
        SINGLE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MULTIPLE")]
        MULTIPLE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Attributes2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"notSelectable")]
        NotSelectable = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"defaultValue")]
        DefaultValue = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum IssueLayoutItemPayloadSectionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"content")]
        Content = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"primaryContext")]
        PrimaryContext = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"secondaryContext")]
        SecondaryContext = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum IssueLayoutItemPayloadType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FIELD")]
        FIELD = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum IssueLayoutPayloadIssueLayoutType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ISSUE_VIEW")]
        ISSUE_VIEW = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ISSUE_CREATE")]
        ISSUE_CREATE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST_FORM")]
        REQUEST_FORM = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum IssueTypeCreateBeanType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"subtask")]
        Subtask = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"standard")]
        Standard = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum IssueTypeHierarchyPayloadOnConflict
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FAIL")]
        FAIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"USE")]
        USE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
        NEW = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum IssueTypePayloadOnConflict
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FAIL")]
        FAIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"USE")]
        USE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
        NEW = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum JexpJqlIssuesValidation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"strict")]
        Strict = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"warn")]
        Warn = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum JiraExpressionValidationErrorType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"syntax")]
        Syntax = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"type")]
        Type = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum JiraStatusStatusCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TODO")]
        TODO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DONE")]
        DONE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum JiraWorkflowPreviewStatusStatusCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TODO")]
        TODO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DONE")]
        DONE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum JiraWorkflowStatusStatusCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TODO")]
        TODO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DONE")]
        DONE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum JqlQueryClauseTimePredicateOperator
    {

        [System.Runtime.Serialization.EnumMember(Value = @"before")]
        Before = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"after")]
        After = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"from")]
        From = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"to")]
        To = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"on")]
        On = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"during")]
        During = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"by")]
        By = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum JqlQueryFieldEntityPropertyType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"number")]
        Number = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"string")]
        String = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"text")]
        Text = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"date")]
        Date = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"user")]
        User = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum JqlQueryOrderByClauseElementDirection
    {

        [System.Runtime.Serialization.EnumMember(Value = @"asc")]
        Asc = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"desc")]
        Desc = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum JsonNodeNumberType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INT")]
        INT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LONG")]
        LONG = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BIG_INTEGER")]
        BIG_INTEGER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FLOAT")]
        FLOAT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DOUBLE")]
        DOUBLE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"BIG_DECIMAL")]
        BIG_DECIMAL = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum KeywordOperandKeyword
    {

        [System.Runtime.Serialization.EnumMember(Value = @"empty")]
        Empty = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum LicensedApplicationPlan
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNLICENSED")]
        UNLICENSED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FREE")]
        FREE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PAID")]
        PAID = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum MoveFieldBeanPosition
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Earlier")]
        Earlier = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Later")]
        Later = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"First")]
        First = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Last")]
        Last = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum NotificationSchemePayloadOnConflict
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FAIL")]
        FAIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"USE")]
        USE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
        NEW = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum OrderOfCustomFieldOptionsPosition
    {

        [System.Runtime.Serialization.EnumMember(Value = @"First")]
        First = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Last")]
        Last = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum OrderOfIssueTypesPosition
    {

        [System.Runtime.Serialization.EnumMember(Value = @"First")]
        First = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Last")]
        Last = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum PermissionPayloadDTOOnConflict
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FAIL")]
        FAIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"USE")]
        USE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
        NEW = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum PreviewConditionGroupConfigurationOperation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ANY")]
        ANY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ProjectAssigneeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT_LEAD")]
        PROJECT_LEAD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"UNASSIGNED")]
        UNASSIGNED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ProjectTypeKey3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"software")]
        Software = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"service_desk")]
        Service_desk = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"business")]
        Business = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ProjectStyle
    {

        [System.Runtime.Serialization.EnumMember(Value = @"classic")]
        Classic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"next-gen")]
        NextGen = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ProjectArchetypeRealType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS")]
        BUSINESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SOFTWARE")]
        SOFTWARE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT_DISCOVERY")]
        PRODUCT_DISCOVERY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SERVICE_DESK")]
        SERVICE_DESK = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_SERVICE")]
        CUSTOMER_SERVICE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OPS")]
        OPS = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ProjectArchetypeStyle
    {

        [System.Runtime.Serialization.EnumMember(Value = @"classic")]
        Classic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"next-gen")]
        NextGen = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ProjectArchetypeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS")]
        BUSINESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SOFTWARE")]
        SOFTWARE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT_DISCOVERY")]
        PRODUCT_DISCOVERY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SERVICE_DESK")]
        SERVICE_DESK = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_SERVICE")]
        CUSTOMER_SERVICE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OPS")]
        OPS = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ProjectComponentAssigneeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT_DEFAULT")]
        PROJECT_DEFAULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPONENT_LEAD")]
        COMPONENT_LEAD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT_LEAD")]
        PROJECT_LEAD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UNASSIGNED")]
        UNASSIGNED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ProjectComponentRealAssigneeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT_DEFAULT")]
        PROJECT_DEFAULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPONENT_LEAD")]
        COMPONENT_LEAD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT_LEAD")]
        PROJECT_LEAD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UNASSIGNED")]
        UNASSIGNED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ProjectCreateResourceIdentifierType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ref")]
        Ref = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ProjectDetailsProjectTypeKey
    {

        [System.Runtime.Serialization.EnumMember(Value = @"software")]
        Software = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"service_desk")]
        Service_desk = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"business")]
        Business = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ProjectFeatureState2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ENABLED")]
        ENABLED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DISABLED")]
        DISABLED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMING_SOON")]
        COMING_SOON = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ProjectFeatureStateState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ENABLED")]
        ENABLED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DISABLED")]
        DISABLED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMING_SOON")]
        COMING_SOON = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ProjectPayloadProjectTypeKey
    {

        [System.Runtime.Serialization.EnumMember(Value = @"software")]
        Software = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"business")]
        Business = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"service_desk")]
        Service_desk = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"product_discovery")]
        Product_discovery = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Attributes3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"notSelectable")]
        NotSelectable = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"defaultValue")]
        DefaultValue = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ProjectTemplateModelType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LIVE")]
        LIVE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SNAPSHOT")]
        SNAPSHOT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum RedactionJobStatusResponseJobStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum RoleActorType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"atlassian-group-role-actor")]
        AtlassianGroupRoleActor = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"atlassian-user-role-actor")]
        AtlassianUserRoleActor = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum RolePayloadOnConflict
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FAIL")]
        FAIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"USE")]
        USE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
        NEW = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum RolePayloadType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HIDDEN")]
        HIDDEN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VIEWABLE")]
        VIEWABLE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EDITABLE")]
        EDITABLE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum SaveProjectTemplateRequestTemplateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LIVE")]
        LIVE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SNAPSHOT")]
        SNAPSHOT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ScopeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT")]
        PROJECT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TEMPLATE")]
        TEMPLATE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ScopePayloadType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GLOBAL")]
        GLOBAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT")]
        PROJECT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum SearchRequestBeanValidateQuery
    {

        [System.Runtime.Serialization.EnumMember(Value = @"strict")]
        Strict = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"warn")]
        Warn = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"true")]
        True = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum SecurityLevelMemberPayloadType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"group")]
        Group = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"reporter")]
        Reporter = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"users")]
        Users = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum SharePermissionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"user")]
        User = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"group")]
        Group = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"project")]
        Project = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"projectRole")]
        ProjectRole = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"global")]
        Global = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"loggedin")]
        Loggedin = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"authenticated")]
        Authenticated = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"project-unknown")]
        ProjectUnknown = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum SharePermissionInputBeanType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"user")]
        User = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"project")]
        Project = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"group")]
        Group = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"projectRole")]
        ProjectRole = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"global")]
        Global = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"authenticated")]
        Authenticated = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum StatusCreateStatusCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TODO")]
        TODO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DONE")]
        DONE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum StatusMetadataCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TODO")]
        TODO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DONE")]
        DONE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum StatusPayloadOnConflict
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FAIL")]
        FAIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"USE")]
        USE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
        NEW = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum StatusPayloadStatusCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TODO")]
        TODO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DONE")]
        DONE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum StatusScopeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT")]
        PROJECT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GLOBAL")]
        GLOBAL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum StatusUpdateStatusCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TODO")]
        TODO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DONE")]
        DONE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum SwimlanesPayloadSwimlaneStrategy
    {

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"custom")]
        Custom = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"parentChild")]
        ParentChild = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"assignee")]
        Assignee = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"assigneeUnassignedFirst")]
        AssigneeUnassignedFirst = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"epic")]
        Epic = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"project")]
        Project = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"issueparent")]
        Issueparent = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"issuechildren")]
        Issuechildren = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"request_type")]
        Request_type = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum TaskProgressBeanJsonNodeStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ENQUEUED")]
        ENQUEUED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RUNNING")]
        RUNNING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETE")]
        COMPLETE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCEL_REQUESTED")]
        CANCEL_REQUESTED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DEAD")]
        DEAD = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum TaskProgressBeanObjectStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ENQUEUED")]
        ENQUEUED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RUNNING")]
        RUNNING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETE")]
        COMPLETE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCEL_REQUESTED")]
        CANCEL_REQUESTED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DEAD")]
        DEAD = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum TaskProgressBeanRemoveOptionFromIssuesResultStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ENQUEUED")]
        ENQUEUED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RUNNING")]
        RUNNING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETE")]
        COMPLETE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCEL_REQUESTED")]
        CANCEL_REQUESTED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DEAD")]
        DEAD = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum TimeTrackingConfigurationDefaultUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"minute")]
        Minute = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"hour")]
        Hour = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"day")]
        Day = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"week")]
        Week = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum TimeTrackingConfigurationTimeFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"pretty")]
        Pretty = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"days")]
        Days = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"hours")]
        Hours = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum TransitionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"global")]
        Global = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"initial")]
        Initial = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"directed")]
        Directed = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum TransitionPayloadType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"global")]
        Global = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"initial")]
        Initial = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"directed")]
        Directed = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum TransitionPreviewType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INITIAL")]
        INITIAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GLOBAL")]
        GLOBAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DIRECTED")]
        DIRECTED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum TransitionUpdateDTOType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INITIAL")]
        INITIAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GLOBAL")]
        GLOBAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DIRECTED")]
        DIRECTED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum UiModificationContextDetailsViewType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GIC")]
        GIC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IssueView")]
        IssueView = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"IssueTransition")]
        IssueTransition = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum UpdateCustomFieldDetailsSearcherKey
    {

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:cascadingselectsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesCascadingselectsearcher = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:daterange")]
        Com_atlassian_jira_plugin_system_customfieldtypesDaterange = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:datetimerange")]
        Com_atlassian_jira_plugin_system_customfieldtypesDatetimerange = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:exactnumber")]
        Com_atlassian_jira_plugin_system_customfieldtypesExactnumber = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:exacttextsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesExacttextsearcher = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesGrouppickersearcher = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:labelsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesLabelsearcher = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:multiselectsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesMultiselectsearcher = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:numberrange")]
        Com_atlassian_jira_plugin_system_customfieldtypesNumberrange = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:projectsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesProjectsearcher = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:textsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesTextsearcher = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:userpickergroupsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesUserpickergroupsearcher = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:versionsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesVersionsearcher = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum UpdatePriorityDetailsIconUrl
    {

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/blocker.png")]
        _images_icons_priorities_blocker_png = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/critical.png")]
        _images_icons_priorities_critical_png = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/high.png")]
        _images_icons_priorities_high_png = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/highest.png")]
        _images_icons_priorities_highest_png = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/low.png")]
        _images_icons_priorities_low_png = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/lowest.png")]
        _images_icons_priorities_lowest_png = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/major.png")]
        _images_icons_priorities_major_png = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/medium.png")]
        _images_icons_priorities_medium_png = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/minor.png")]
        _images_icons_priorities_minor_png = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/trivial.png")]
        _images_icons_priorities_trivial_png = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/blocker_new.png")]
        _images_icons_priorities_blocker_new_png = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/critical_new.png")]
        _images_icons_priorities_critical_new_png = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/high_new.png")]
        _images_icons_priorities_high_new_png = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/highest_new.png")]
        _images_icons_priorities_highest_new_png = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/low_new.png")]
        _images_icons_priorities_low_new_png = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/lowest_new.png")]
        _images_icons_priorities_lowest_new_png = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/major_new.png")]
        _images_icons_priorities_major_new_png = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/medium_new.png")]
        _images_icons_priorities_medium_new_png = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/minor_new.png")]
        _images_icons_priorities_minor_new_png = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/trivial_new.png")]
        _images_icons_priorities_trivial_new_png = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum UpdateProjectDetailsAssigneeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT_LEAD")]
        PROJECT_LEAD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"UNASSIGNED")]
        UNASSIGNED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum UserAccountType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"atlassian")]
        Atlassian = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"app")]
        App = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"customer")]
        Customer = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum UserPermissionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GLOBAL")]
        GLOBAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT")]
        PROJECT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum UserPickerUserAccountType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"atlassian")]
        Atlassian = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"app")]
        App = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"customer")]
        Customer = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Levels
    {

        [System.Runtime.Serialization.EnumMember(Value = @"WARNING")]
        WARNING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Levels2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"WARNING")]
        WARNING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum VersionMoveBeanPosition
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Earlier")]
        Earlier = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Later")]
        Later = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"First")]
        First = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Last")]
        Last = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum VisibilityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"group")]
        Group = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"role")]
        Role = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Events
    {

        [System.Runtime.Serialization.EnumMember(Value = @"jira:issue_created")]
        JiraIssue_created = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"jira:issue_updated")]
        JiraIssue_updated = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"jira:issue_deleted")]
        JiraIssue_deleted = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"comment_created")]
        Comment_created = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"comment_updated")]
        Comment_updated = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"comment_deleted")]
        Comment_deleted = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"issue_property_set")]
        Issue_property_set = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"issue_property_deleted")]
        Issue_property_deleted = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Events2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"jira:issue_created")]
        JiraIssue_created = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"jira:issue_updated")]
        JiraIssue_updated = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"jira:issue_deleted")]
        JiraIssue_deleted = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"comment_created")]
        Comment_created = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"comment_updated")]
        Comment_updated = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"comment_deleted")]
        Comment_deleted = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"issue_property_set")]
        Issue_property_set = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"issue_property_deleted")]
        Issue_property_deleted = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum WorkflowCapabilitiesEditorScope
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT")]
        PROJECT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GLOBAL")]
        GLOBAL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum ProjectTypes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"software")]
        Software = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"service_desk")]
        Service_desk = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"product_discovery")]
        Product_discovery = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"business")]
        Business = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum WorkflowCompoundConditionOperator
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AND")]
        AND = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OR")]
        OR = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum WorkflowPayloadOnConflict
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FAIL")]
        FAIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"USE")]
        USE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
        NEW = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum WorkflowPreviewScopeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT")]
        PROJECT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GLOBAL")]
        GLOBAL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum WorkflowScopeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT")]
        PROJECT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GLOBAL")]
        GLOBAL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum WorkflowStatusUpdateStatusCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TODO")]
        TODO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DONE")]
        DONE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum WorkflowTransitionsType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INITIAL")]
        INITIAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GLOBAL")]
        GLOBAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DIRECTED")]
        DIRECTED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum WorkflowValidationErrorLevel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"WARNING")]
        WARNING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum WorkflowValidationErrorType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"RULE")]
        RULE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"STATUS")]
        STATUS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"STATUS_LAYOUT")]
        STATUS_LAYOUT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"STATUS_PROPERTY")]
        STATUS_PROPERTY = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"WORKFLOW")]
        WORKFLOW = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSITION")]
        TRANSITION = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSITION_PROPERTY")]
        TRANSITION_PROPERTY = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"SCOPE")]
        SCOPE = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"STATUS_MAPPING")]
        STATUS_MAPPING = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"TRIGGER")]
        TRIGGER = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Keys
    {

        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }

        public string Key { get; }

        public System.Type Type { get; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter
    {
        internal static readonly string DefaultDiscriminatorName = "discriminator";

        private readonly string _discriminatorName;

        [System.ThreadStatic]
        private static bool _isReading;

        [System.ThreadStatic]
        private static bool _isWriting;

        public JsonInheritanceConverter()
        {
            _discriminatorName = DefaultDiscriminatorName;
        }

        public JsonInheritanceConverter(string discriminatorName)
        {
            _discriminatorName = discriminatorName;
        }

        public string DiscriminatorName { get { return _discriminatorName; } }

        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
        {
            try
            {
                _isWriting = true;

                var jObject = Newtonsoft.Json.Linq.JObject.FromObject(value, serializer);
                jObject.AddFirst(new Newtonsoft.Json.Linq.JProperty(_discriminatorName, GetSubtypeDiscriminator(value.GetType())));
                writer.WriteToken(jObject.CreateReader());
            }
            finally
            {
                _isWriting = false;
            }
        }

        public override bool CanWrite
        {
            get
            {
                if (_isWriting)
                {
                    _isWriting = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanRead
        {
            get
            {
                if (_isReading)
                {
                    _isReading = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanConvert(System.Type objectType)
        {
            return true;
        }

        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObject>(reader);
            if (jObject == null)
                return null;

            var discriminatorValue = jObject.GetValue(_discriminatorName);
            var discriminator = discriminatorValue != null ? Newtonsoft.Json.Linq.Extensions.Value<string>(discriminatorValue) : null;
            var subtype = GetObjectSubtype(objectType, discriminator);

            var objectContract = serializer.ContractResolver.ResolveContract(subtype) as Newtonsoft.Json.Serialization.JsonObjectContract;
            if (objectContract == null || System.Linq.Enumerable.All(objectContract.Properties, p => p.PropertyName != _discriminatorName))
            {
                jObject.Remove(_discriminatorName);
            }

            try
            {
                _isReading = true;
                return serializer.Deserialize(jObject.CreateReader(), subtype);
            }
            finally
            {
                _isReading = false;
            }
        }

        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Key == discriminator)
                    return attribute.Type;
            }

            return objectType;
        }

        private string GetSubtypeDiscriminator(System.Type objectType)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Type == objectType)
                    return attribute.Key;
            }

            return objectType.Name;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 108
#pragma warning restore 114
#pragma warning restore 472
#pragma warning restore 612
#pragma warning restore 649
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8600
#pragma warning restore 8602
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625
#pragma warning restore 8765
